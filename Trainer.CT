<?xml version="1.0" encoding="utf-8"?>
<CheatTable CheatEngineTableVersion="28">
  <Forms>
  </Forms>
  <CheatEntries>
  </CheatEntries>
  <UserdefinedSymbols/>
  <LuaScript>--[[Simple Trainer by zeka (C) 2017 - 2019.
The unauthorized reproduction and/or distribution of code in this trainer is prohibited by copyright laws.
It is a violation of the End User License Agreement (EULA) and is subject to termination of End User services.]]

-- Start up timer
SYSTEM_CLOCK = os.clock()

activateProtection()

-- Anti-Tencent HABO
if string.match(TrainerOrigin:lower(), "documents and settings") then
messageDialog("Current trainer path is prohibited. Try again after moving locations.\n\nPath: " .. TrainerOrigin, mtError, mbClose)
closeCE()
return caFree
end

-- Identify the user by collecting IP address information
-- This was agreed on when accepting the EULA and Privacy Policy
http = getInternet()
userIP = http.getURL("http://myip.dnsomatic.com/")
userIP2 = http.getURL("https://api.ipify.org/") -- backup incase first site offline
userFlag = 0

-- (C) 2018 Paul Kulchenko
function GetIPType(ip)
  local R = {ERROR = 0, IPV4 = 1, IPV6 = 2, STRING = 3}
  if type(ip) ~= "string" then return R.ERROR end

  -- check for format 1.11.111.111 for ipv4
  local chunks = {ip:match("^(%d+)%.(%d+)%.(%d+)%.(%d+)$")}
  if #chunks == 4 then
    for _,v in pairs(chunks) do
      if tonumber(v) > 255 then return R.STRING end
    end
    return R.IPV4
  end

  -- check for ipv6 format, should be 8 'chunks' of numbers/letters
  -- without leading/trailing chars
  -- or fewer than 8 chunks, but with only one `::` group
  local chunks = {ip:match("^"..(("([a-fA-F0-9]*):"):rep(8):gsub(":$","$")))}
  if #chunks == 8
  or #chunks < 8 and ip:match('::') and not ip:gsub("::","",1):match('::') then
    for _,v in pairs(chunks) do
      if #v > 0 and tonumber(v, 16) > 65535 then return R.STRING end
    end
    return R.IPV6
  end

  return R.STRING
end

local IPType = {[0] = "Error", "IPv4", "IPv6", "string"}

-- can connect to Google services
function ConnectionCheck()
  local result = http.getURL("https://docs.google.com/document/d/[redacted]/export?format=txt")
  if result then
    if not string.match(result, "verified") then
      commands = "@echo on && taskkill /F /PID " .. getCheatEngineProcessID() .. " >nul >2nul && echo [ Simple TRAINER CONNECTION FAILED ] && echo Simple Trainer could not make a valid connection to 172.217.12.142. && echo Please verify you have a valid internet connection and Google Services are not blocked. && timeout 60"
      os.execute(commands)
      closeCE()
      return caFree
    end
  end
end

function isValidConnection(ip, ip2)
  if string.match(IPType[GetIPType(ip)], "IPv6") or string.match(IPType[GetIPType(ip)], "IPv4") then
    return ip
  elseif string.match(IPType[GetIPType(ip2)], "IPv6") or string.match(IPType[GetIPType(ip2)], "IPv4") then
    return ip2
  else
    return "false"
  end
end

ConnectionCheck()

validConnection = isValidConnection(userIP, userIP2)

-- Lua Switch case - http://lua-users.org/wiki/SwitchStatement
function switch(t)
  t.case = function (self,x)
    local f=self[x] or self.default
    if f then
      if type(f)=="function" then
        f(x,self)
      else
        error("case "..tostring(x).." not a function")
      end
    end
  end
  return t
end

-- Refuse proxy and VPN connections
connectionType = "n/a"
http.Header = "User-Agent: Simple Trainer application : Luascript"
CheckIP = http.getURL("https://proxycheck.io/v2/" .. validConnection .. "?key=" .. Simple.fieldKey.Text:reverse() .. "&vpn=1&inf=1&port=1&seen=1&time=1&asn=1")
http.Header = ""
if CheckIP then
asoVal = string.sub(CheckIP, string.find(CheckIP, '"asn":') + 10, string.find(CheckIP, '"provider":') - 12)
if asoVal == nil then
  asoVal = "N/A"
end
if string.match(CheckIP, '"city":') then
  locVal = string.sub(CheckIP, string.find(CheckIP, '"city":') + 9, string.find(CheckIP, '"latitude"') - 12) .. ", " .. string.sub(CheckIP, string.find(CheckIP, '"country":') + 12, string.find(CheckIP, '"city"') - 12)
else
  locVal = string.sub(CheckIP, string.find(CheckIP, '"country":') + 12, string.find(CheckIP, '"city"') - 12)
end
if string.match(CheckIP, '"proxy": "yes"') then
  if string.match(CheckIP, '"type": "blacklisted by') then
    local bl = string.sub(CheckIP, string.find(CheckIP, 'blacklisted by') + 15, string.find(CheckIP, '}') - 7)
    commands = "@echo on && taskkill /F /PID " .. getCheatEngineProcessID() .. " >nul >2nul && echo [ Simple TRAINER SUSPENDED ] && echo Due to suspicious activity or a breach of the End User License Agreement on this network or IP address (" .. bl .. "), && echo your usage of this Software has been permanently suspended. && echo If you believe this to be an error, please contact the developer. (ERR CODE: 9) && timeout 60"
    os.execute(commands)
    closeCE()
    return caFree
  else
    local getProxyType = string.sub(CheckIP, string.find(CheckIP, '"type":') + 9, string.find(CheckIP, '"type":') + 23)
    connectionType = "proxy: " .. getProxyType
  end
  elseif string.find(CheckIP, '"status": "error"') then
    commands = "@echo on && taskkill /F /PID " .. getCheatEngineProcessID() .. " >nul >2nul && echo [ Simple TRAINER CONNECTION REFUSED ] && echo An unknown error occurred when sending a request to the server. Try again later. && echo If this message persists, please report to the developer. && timeout 60"
    os.execute(commands)
    closeCE()
    return caFree
  elseif string.match(CheckIP, '"proxy": "no"') then
  else
    commands = "@echo on && taskkill /F /PID " .. getCheatEngineProcessID() .. " >nul >2nul && echo [ Simple TRAINER CONNECTION REFUSED ] && echo Request to the server was denied as the limit was passed. && echo Please try again tomorrow. If the issue persists, please notify the developer with the above Error message. && timeout 60"
    os.execute(commands)
    closeCE()
    return caFree
end
else
  commands = "@echo on && taskkill /F /PID " .. getCheatEngineProcessID() .. " >nul >2nul && echo [ Simple TRAINER CONNECTION FAILED ] && echo Simple Trainer could not connect to the internet. && echo Please verify you have a valid internet connection and it is not being blocked. && timeout 60"
  os.execute(commands)
  closeCE()
  return caFree
end

userSerial = ""
function getSerial()
  local command = 'wmic csproduct get uuid && wmic path Win32_ComputerSystemProduct get UUID'
  i= 0
  for dir in io.popen(command):lines() do
    i = i + 1
    if (i == 2) then
    userSerial = string.sub(dir, 0, dir:len() - 3)
    end
  end
end

getSerial()

-- Check banned or limited connections
if not string.match(validConnection, "false") then
    local list = http.getURL("https://docs.google.com/document/d/" .. Simple.driveDoc1.Text:reverse() .. "/export?format=txt")
    if list == nil then
      commands = "@echo on && taskkill /F /PID " .. getCheatEngineProcessID() .. " >nul >2nul && echo [ Simple TRAINER CONNECTION FAILED ] && echo Simple Trainer could not make a valid connection to 172.217.12.142. && echo Please verify you have a valid internet connection and it is not being blocked. && timeout 60"
      os.execute(commands)
      closeCE()
      return caFree
    end
    list = list .. ' '
    for w in list:gmatch("(.-) ") do
      if string.match(w, userSerial) then
        if string.match(w, userSerial .. "limited") then
          messageDialog("Due to suspicious activity, your usage of this trainer has been limited. Continued suspicious activity will lead to a permanent suspension of the Software.\n\nLimited features:\n- Auto Assembler\n- Lua Injection\n- ID Search\n- Secret Code\n- Submit Comment\n\nIf you believe this is an error, please contact the developer. (ERR CODE: 11)", mtWarning, mbOK)
          userFlag = 1
          break
        elseif string.match(w, userSerial .. "suspended") then
          commands = "@echo on && taskkill /F /PID " .. getCheatEngineProcessID() .. " >nul >2nul && echo [ Simple TRAINER SUSPENDED ] && echo Due to suspicious activity or a breach of the End User License Agreement, && echo your usage of this Software has been permanently suspended. && echo If you believe this to be an error, please contact the developer. (ERR CODE: 12) && timeout 60"
          os.execute(commands)
          closeCE()
          return caFree
        end
      end
    end
  else
    commands = "@echo on && taskkill /F /PID " .. getCheatEngineProcessID() .. " >nul >2nul && echo [ Simple TRAINER CONNECTION FAILED ] && echo A critical error occurred when verifying client data. && echo If this error persists, please report to the developer. && timeout 60"
    os.execute(commands)
    closeCE()
    return caFree
end

z= "?attredirects=0&d=1"

--Debug
getLuaEngine().cbShowOnPrint.Checked=false
getLuaEngine().hide()
--getLuaEngine().cbShowOnPrint.Checked=true
--getLuaEngine().show()

function openConsole(sender)
if sender.Checked then
getLuaEngine().cbShowOnPrint.Checked=true
getLuaEngine().show()
else
getLuaEngine().cbShowOnPrint.Checked=false
getLuaEngine().hide()
end
end

Simple.SettingsPageControl.Enabled = false
Simple.SettingsPageControl.Visible = false
Simple.FormStyle = fsSystemStayOnTop
Simple.ProfilePanel.Visible = false
Simple.ProfileBox.Visible = false
Simple.PointersPanel.Visible = false
Simple.PointersBox.Visible = false
Simple.SearchToolPanel.Visible = false
Simple.SearchToolBox.Visible = false
Simple.DisableAllPanel.Visible = false
Simple.LogPanel.Visible = false
Simple.LogBox.Visible = false
Simple.AboutPanel.Visible = false
Simple.AboutBox.Visible = false
Simple.AutoAssemblerPanel.Visible = false
Simple.AutoAssemblerBox.Visible = false

Simple.PointerScriptsBox.Visible = false

-- Trainer configuration
trainer_version = "0.9"
revision_number = 3
G_site_build = true -- true for G_site, false for M_site
build_version = 19
settings_protocol_ver = 3
pre_release_ver = 0

if revision_number == 0 then
header_revision_number = ""
else
header_revision_number = "r" .. revision_number
end

-- Trainer url's
build_version_url = "https://raw.githubusercontent.com/zeka/Simple-Trainer/master/Version/Latest%20Release"
supported_build_url = "https://raw.githubusercontent.com/zeka/Simple-Trainer/master/Version/Supported%20Release"
auth_key_url = "https://docs.google.com/document/d/[redacted]/export?format=txt"
load_ini_url = "https://raw.githubusercontent.com/zeka/Simple-Trainer/master/Resources/Load.ini"
donators_url = "https://raw.githubusercontent.com/zeka/Simple-Trainer/master/Donators"
G_url = "https://www.G_site.net/"
M_site_url = "https://www.M_site.net/"

if G_site_build then site = "G_site"
else site = "M"
end

function resetSettings()
  if messageDialog("Settings protocol was updated.\n\nSimple Trainer will forcefully reset your trainer settings to its default state and you will need to go through the set-up phase again.\n\nContinue with the reset or close the trainer?", mtWarning, mbYes, mbClose, 0) == mrYes then
  local p=getSettings('SimpleTrainerSettings')
  if p.Value['IsAdmin']~="" then
    saveKeyIsAdmin=p.Value['IsAdmin']
  end
  if p.Value['AuthKey']~="" then
    trainer_auth_key=p.Value['AuthKey']
    else
    trainer_auth_key=""
end
  p.destroy()
  os.execute('reg delete "HKEY_CURRENT_USER\\Software\\Cheat Engine\\SimpleTrainerSettings" /F')
  local p=getSettings('SimpleTrainerSettings')
  p.Value['LastVersion']=build_version
  p.Value['SettingsVersion']=settings_protocol_ver
  if saveKeyIsAdmin~="" then
    p.Value['IsAdmin']=saveKeyIsAdmin
  end
  p.Value['AuthKey']=trainer_auth_key
  p.destroy()
  --shellExecute(command, parameters OPTIONAL, folder OPTIONAL, showcommand OPTIONAL)
  else
    closeCE()
    return caFree
  end
end

function callResetSettings()
  --use this to reset the current settings
  local p=getSettings('SimpleTrainerSettings')
  if p.Value['SettingsVersion']~="" then
      protocol_ver = tonumber(p.Value['SettingsVersion'])
      if protocol_ver < settings_protocol_ver then
        resetSettings()
        end
    else
      if p.Value['FirstStart']=="Saved" then
        resetSettings()
      end
  end
  p.destroy()
end

callResetSettings()

local p=getSettings('SimpleTrainerSettings')
if p.Value['FirstStart']~="Saved" then
    trainer_firststart = true
    else
    trainer_firststart = false
end
if p.Value['GameDirectory']~="" then
    Simple.GameDirectory.Text=p.Value['GameDirectory']
end
if p.Value['MainGitHubURL']~="" then
    Simple.GitHubURL.Text=p.Value['MainGitHubURL']
end
if p.Value['GameVersion']~="" then
    Simple.GitHubGameVersion.Text=p.Value['GameVersion']
end
if p.Value['EnforceBypass']~="" then
    Simple.EnforceBypass.State=p.Value['EnforceBypass']
end
if p.Value['EnableLog']~="" then
    Simple.EnableLog.State=p.Value['EnableLog']
end
if p.Value['UseLowerMemory']~="" then
    Simple.UseLowerMemory.State=p.Value['UseLowerMemory']
end
if p.Value['AutoBanWarnings']~="" then
    Simple.AutoBanWarnings.State=p.Value['AutoBanWarnings']
end
if p.Value['DisableNotWorking']~="" then
    Simple.DisableNotWorking.State=p.Value['DisableNotWorking']
end
if p.Value['CheckHackConflicts']~="" then
    Simple.CheckHackConflicts.State=p.Value['CheckHackConflicts']
end
if p.Value['CustomHeader']~="" then
    Simple.CustomTrainerHeader.Text=p.Value['CustomHeader']
end
if p.Value['AutoEnableMSCRC']~="" then
    Simple.AutoEnableMSCRC.State=p.Value['AutoEnableMSCRC']
end
if p.Value['LastVersion']~="" then
    LastVersionUsed=tonumber(p.Value['LastVersion'])
    else
    LastVersionUsed=build_version
end
if p.Value['AuthKey']~="" then
    trainer_auth_key=p.Value['AuthKey']
    else
    trainer_auth_key=""
end
if p.Value['TargetProcess']~="" then
    Simple.GameProcess.Text=p.Value['TargetProcess']
end
if p.Value['GitHubBranch']~="" then
    Simple.GitHubBranch.Text=p.Value['GitHubBranch']
end
if p.Value['LogOnStartup']~="" then
    Simple.ShowLogOnStartUp.State=p.Value['LogOnStartup']
end
if p.Value['UserCode']~="" then
    Simple.UserPass.Text=p.Value['UserCode']
end
if p.Value['LocalControl']~="" then
    Simple.LocalControlBox.ItemIndex=p.Value['LocalControl']
end
if p.Value['AutoLoadLua']~="" then
    Simple.AutoLoadLuaFile.State=p.Value['AutoLoadLua']
end
if p.Value['NoLogPrompt']~="" then
    Simple.NoLogExportPrompt.State=p.Value['NoLogPrompt']
end

-- request donations
if p.Value['TrainerUsage']~="" then
    p.Value['TrainerUsage'] = p.Value['TrainerUsage'] + 1
    else
    p.Value['TrainerUsage'] = "1"
end

-- Pointers section
if p.Value['PtrRefRate']~="" then
  Simple.PtrRefreshRate.Text=p.Value['PtrRefRate']
end

if p.Value['Ptr1Name']~="" then
  Simple.Pointer1Name.Text=p.Value['Ptr1Name']
end
if p.Value['Ptr2Name']~="" then
  Simple.Pointer2Name.Text=p.Value['Ptr2Name']
end
if p.Value['Ptr3Name']~="" then
  Simple.Pointer3Name.Text=p.Value['Ptr3Name']
end
if p.Value['Ptr4Name']~="" then
  Simple.Pointer4Name.Text=p.Value['Ptr4Name']
end
if p.Value['Ptr5Name']~="" then
  Simple.Pointer5Name.Text=p.Value['Ptr5Name']
end
if p.Value['Ptr6Name']~="" then
  Simple.Pointer6Name.Text=p.Value['Ptr6Name']
end
if p.Value['Ptr7Name']~="" then
  Simple.Pointer7Name.Text=p.Value['Ptr7Name']
end
if p.Value['Ptr1Val']~="" then
  Simple.Pointer1Value.Text=p.Value['Ptr1Val']
end
if p.Value['Ptr2Val']~="" then
  Simple.Pointer2Value.Text=p.Value['Ptr2Val']
end
if p.Value['Ptr3Val']~="" then
  Simple.Pointer3Value.Text=p.Value['Ptr3Val']
end
if p.Value['Ptr4Val']~="" then
  Simple.Pointer4Value.Text=p.Value['Ptr4Val']
end
if p.Value['Ptr5Val']~="" then
  Simple.Pointer5Value.Text=p.Value['Ptr5Val']
end
if p.Value['Ptr6Val']~="" then
  Simple.Pointer6Value.Text=p.Value['Ptr6Val']
end
if p.Value['Ptr7Val']~="" then
  Simple.Pointer7Value.Text=p.Value['Ptr7Val']
end
p.destroy()

trainer_directory = Simple.GameDirectory.Text
trainer_github = Simple.GitHubURL.Text
trainer_gameversion = Simple.GitHubGameVersion.Text
trainer_bypass = Simple.EnforceBypass.State
trainer_log = Simple.EnableLog.State
trainer_lowermemory = Simple.UseLowerMemory.State
trainer_banwarning = Simple.AutoBanWarnings.State
trainer_disablenotworking = Simple.DisableNotWorking.State
trainer_checkconflicts = Simple.CheckHackConflicts.State
trainer_header = Simple.CustomTrainerHeader.Text
trainer_enableMSCRC = Simple.AutoEnableMSCRC.State
trainer_target = Simple.GameProcess.Text
trainer_branch = Simple.GitHubBranch.Text
trainer_startuplog = Simple.ShowLogOnStartUp.State
trainer_code = Simple.UserPass.Text
trainer_control = Simple.LocalControlBox.ItemIndex
trainer_autolua = Simple.AutoLoadLuaFile.State
trainer_logprompt = Simple.NoLogExportPrompt.State

function saveTrainerSettings()
beep()
if messageDialog("Are you sure you want to save any new changes? An immediate trainer restart is required.", mtConfirmation, mbYes, mbNo, 0) == mrYes then
local p=getSettings('SimpleTrainerSettings')
p.Value['FirstStart']="Saved"
p.Value['GameDirectory']=Simple.GameDirectory.Text
p.Value['MainGitHubURL']=Simple.GitHubURL.Text
p.Value['GameVersion']=Simple.GitHubGameVersion.Text
p.Value['EnforceBypass']=Simple.EnforceBypass.State
p.Value['EnableLog']=Simple.EnableLog.State
p.Value['UseLowerMemory']=Simple.UseLowerMemory.State
p.Value['AutoBanWarnings']=Simple.AutoBanWarnings.State
p.Value['DisableNotWorking']=Simple.DisableNotWorking.State
p.Value['CheckHackConflicts']=Simple.CheckHackConflicts.State
p.Value['CustomHeader']=Simple.CustomTrainerHeader.Text
p.Value['AutoEnableMSCRC']=Simple.AutoEnableMSCRC.State
p.Value['LastVersion']=build_version
p.Value['SettingsVersion']=settings_protocol_ver
p.Value['AuthKey']=trainer_auth_key
p.Value['TargetProcess']=Simple.GameProcess.Text
p.Value['GitHubBranch']=Simple.GitHubBranch.Text
p.Value['LogOnStartup']=Simple.ShowLogOnStartUp.State
p.Value['TrainerHash']=global_md5_hash
p.Value['UserCode']=Simple.UserPass.Text
p.Value['LocalControl']=Simple.LocalControlBox.ItemIndex
p.Value['AutoLoadLua']=Simple.AutoLoadLuaFile.State
p.Value['NoLogPrompt']=Simple.NoLogExportPrompt.State
p.destroy()
writeToLogFile("CONFIG", "Trainer settings were updated and saved")
messageDialog("Settings have been saved! The trainer will now close.", mtConfirmation, mbOK)
if trainer_log == 1 and trainer_logprompt == 0 then
if messageDialog("Would you like to export the trainer Log File?", mtConfirmation, mbNo, mbYes, 0) == mrYes then
    ExportLog()
  end
end
closeCE()
  return caFree
end
end

Simple.CELabel12.Caption = "Simple Trainer is initializing... please wait."
Simple.CELabel11.Caption = "[Simple] Starting up Simple Tips... please wait."

if pre_release_ver ~= 0 then
TrainerCaption = "Simple Trainer Pre-v" .. trainer_version .. "pr" .. pre_release_ver .. " [BETA]"
LogTrainerCaption = "Simple TRAINER LOG - Version Pre-" .. trainer_version .. " [BETA]"
else
TrainerCaption = "Simple Trainer v" .. trainer_version .. header_revision_number .. " [BETA]"
LogTrainerCaption = "Simple TRAINER LOG - Version " .. trainer_version .. header_revision_number .. " [BETA]"
end
if trainer_header=="" then
Simple.Caption = TrainerCaption
else
Simple.Caption = trainer_header
end

-- Closes our table process entirely and stops active timers
function CloseClick(showPrompt)
if showPrompt then
if messageDialog("Are you sure you want to completely close Simple Trainer?\n\nUnsaved changes will be lost and any enabled hacks will NOT be disabled with the closure of the trainer (File > Disable All).", mtConfirmation, mbYes, mbNo, 0) == mrYes then
  if trainer_log == 1 and trainer_logprompt == 0 then
    if messageDialog("Would you like to export the trainer Log File?", mtConfirmation, mbNo, mbYes, 0) == mrYes then
      ExportLog()
    end
  end
    closeCE()
    return caFree
end
else
closeCE()
  return caFree
  end
end

Simple.OnClose = CloseClick

-- Is the trainer attached?
IS_CUR_ATTACHED = 0

function temp_RedirectG_site()
  beep()
local answer = messageDialog("You will be redirected to G_site.net.\nContinue?", mtConfirmation, mbYes, mbNo)
    if answer == mrYes then
    os.execute("start " .. G_url)
    end
end

SelectProcessControl = 0
Simple.SettingsPageControl.TabIndex = 0

-- Create Main Menu
mainMenu=createMainMenu(Simple)
mainMenu_items=menu_getItems(mainMenu)

mi=createMenuItem(mainMenu)
menuItem_setCaption(mi,'File')

Simple.ProfilePanel.Visible = true
Simple.PointersPanel.Visible = true
Simple.SearchToolPanel.Visible = true
Simple.DisableAllPanel.Visible = true
Simple.LogPanel.Visible = true
Simple.AboutPanel.Visible = true
Simple.AutoAssemblerPanel.Visible = true

function closeSettingsTab()
if LastVersionUsed < build_version then
  messageDialog("You recently updated to a newer version of the trainer.\n\nPlease verify that all settings are correct and then click Save!", mtInformation, mbOK)
elseif trainer_firststart then
messageDialog("Please adjust the settings to your preferences, then click Save to save and restart the trainer!", mtInformation, mbOK)
else
  if IS_CUR_ATTACHED==1 then
    Simple.HacksPage.Enabled = true
  end
Simple.SaveSettings.Visible = false
Simple.SettingsPageControl.Enabled = false
Simple.SelectProcess.Visible = true
Simple.SelectProcess.BringToFront()
Simple.ProfilePanel.Visible = true
Simple.PointersPanel.Visible = true
Simple.SearchToolPanel.Visible = true
Simple.DisableAllPanel.Visible = true
Simple.LogPanel.Visible = true
Simple.AboutPanel.Visible = true
Simple.AutoAssemblerPanel.Visible = true
Simple.SettingsPageControl.sendToBack()
Simple.SettingsPageControl.Visible = false
menuItem_setCaption(mi2,'Open Settings')
menuItem_onClick(mi2,openSettingsTab)
end
end

function openSettingsTab()
if trainer_firststart then
  Simple.Load.TabVisible = false
  else
  Simple.Load.TabVisible = true
end
Simple.SaveSettings.Visible = true
Simple.SelectProcess.Visible = false
Simple.ProfilePanel.Visible = false
Simple.PointersPanel.Visible = false
Simple.SearchToolPanel.Visible = false
Simple.DisableAllPanel.Visible = false
Simple.LogPanel.Visible = false
Simple.AboutPanel.Visible = false
Simple.AutoAssemblerPanel.Visible = false
Simple.HacksPage.Enabled = false
Simple.SettingsPageControl.Enabled = true
Simple.SettingsPageControl.Visible = false
Simple.SettingsPageControl.Visible = true
Simple.SettingsPageControl.BringToFront()
Simple.SaveSettings.BringToFront()
menuItem_setCaption(mi2,'Close Settings')
menuItem_onClick(mi2,closeSettingsTab)
end

mi2=createMenuItem(mainMenu)
menuItem_setCaption(mi2,'Open Settings')

function redirectPaypal(sender)
  local answer = messageDialog("Considering to donate? \n\nYou will be redirected to paypal.com. Continue?", mtConfirmation, mbYes, mbNo)
    if answer == mrYes then
    os.execute('start "" "https://www.paypal.com/"')
    end
end

mi3=createMenuItem(mainMenu)
menuItem_setCaption(mi3,'Donate')
menuItem_onClick(mi3,redirectPaypal)

mi4=createMenuItem(mainMenu)
menuItem_setCaption(mi4,'Status: Initializing trainer...')

mi8=createMenuItem(mmenu)
menuItem_setCaption(mi8,'Trainer Thread')
menuItem_onClick(mi8,temp_RedirectG_site)

function redirectEULA()
  local answer = messageDialog("Your usage of Simple Trainer is governed by the End-User License Agreement (EULA), which you accepted prior to using this trainer. You can view this EULA at any time, and is recommended as it may change.\n\nView the EULA on GitHub?", mtConfirmation, mbYes, mbNo)
    if answer == mrYes then
    os.execute('start "" "https://github.com/zeka/Simple-Trainer/blob/master/EULA.md"')
    end
end

miEula=createMenuItem(mmenu)
menuItem_setCaption(miEula,'EULA')
menuItem_onClick(miEula,redirectEULA)

function redirectPrivacyPolicy()
  local answer = messageDialog("Simple Trainer may collect certain personally-identifiable information when you use the trainer, which you accepted prior to using this trainer. You can view the Privacy Policy at any time, and is recommended as it may change.\n\nView the Privacy Policy on GitHub?", mtConfirmation, mbYes, mbNo)
    if answer == mrYes then
    os.execute('start "" "https://github.com/zeka/Simple-Trainer/blob/master/EULA.md"')
    end
end

miPp=createMenuItem(mmenu)
menuItem_setCaption(miPp,'Privacy Policy')
menuItem_onClick(miPp,redirectPrivacyPolicy)

mi5=createMenuItem(mainMenu)
menuItem_setCaption(mi5,'Exit')
menuItem_onClick(mi5,CloseClick)

mi0=createMenuItem(mmenu)
menuItem_setCaption(mi0,'Disable All')

function getThatGarbageOutOfHere()
  beep()
  if messageDialog("Would you like to clean the trainer's memory? This will lower the current memory usage of the trainer, but may have unknown side effects.\n\nThis action cannot be undone. Continue?", mtConfirmation, mbNo, mbYes, 0) == mrYes then
    collectgarbage("collect")
  end
end

mi9=createMenuItem(mmenu)
menuItem_setCaption(mi9,'Clean Memory')
menuItem_onClick(mi9,getThatGarbageOutOfHere)

menuSep=createMenuItem(mmenu)
menuItem_setCaption(menuSep,'-')

menuSep2=createMenuItem(mmenu)
menuItem_setCaption(menuSep2,'-')

menuItem_add(mainMenu_items, mi)
menuItem_add(mainMenu_items, mi2)
menuItem_add(mainMenu_items, mi3)
menuItem_add(mainMenu_items, mi4)
menuItem_add(mi, mi0)
menuItem_add(mi, mi8)
menuItem_add(mi, mi9)
menuItem_add(mi, menuSep)
menuItem_add(mi, miEula)
menuItem_add(mi, miPp)
menuItem_add(mi, menuSep2)
menuItem_add(mi, mi5)

globalSettings=getSettings('SimpleTrainerSettings')

Simple.SettingsPageControl.Visible = true
Simple.SaveSettings.Visible = true
Simple.HacksPage.Enabled = false
Simple.SelectProcess.Visible = false

if globalSettings.Value['IsAdmin']=="zeka" then
Simple.Debug.Visible = true
else
Simple.Debug.Visible = false
end

TDirectory = {}
MSDirectory = {}

command = 'dir "' .. trainer_directory .. '" /b /a'
for dir in io.popen(command):lines() do
table.insert(MSDirectory, dir)
end

command = 'dir "' .. TrainerOrigin .. '" /b /a'
for dir in io.popen(command):lines() do
table.insert(TDirectory, dir)
end

--find file
function findFile(DirName, str)
if DirName == "MSDirectory" then
  tablename = MSDirectory
end
if DirName == "TDirectory" then
  tablename = TDirectory
end
  for i=0, #tablename do
    if tablename[i] == str then
      return "true"
    end
  end
end

noAccessToLogFile = false

function ExportLog()
  beep()
local answer = messageDialog("This will export the Log File to " .. TrainerOrigin .. "Trainer Log.txt.\n\nContinue?", mtConfirmation, mbYes, mbNo)
    if answer == mrYes then
if trainer_log==1 then
  local logFile, err = io.open(TrainerOrigin .. "\\Trainer Log.txt", "w+")
  if logFile==nil then
    messageDialog("An error occurred when attempting to generate a Trainer Log file:\n" .. err .. "\n\nPlease report this error message (screenshot preferred) to zeka.", mtError. mbOK)
    writeToLogFile("CRITICAL", "An error occurred when attempting to generate a Trainer Log file: " .. err .. "\n\nPlease report this error message (screenshot preferred) to zeka.")
  else
    logFile:write(Simple.LogFile.Lines.Text)
    logFile:close()
  end
else
  showMessage("Trainer Log setting is not enabled. Please enable it if you want to export the log.")
end
end
end

function ClearLog()
  beep()
  local answer = messageDialog("Are you sure you want to clear the Log? This cannot be undone!", mtConfirmation, mbYes, mbNo)
    if answer == mrYes then
      Simple.LogFile.Lines.Text = "[" .. getCurrentTime() .. "] [" .. getCheatEngineProcessID() .. "] [INFO] Log file was cleared."
    end
end

function CopyLogToClipboard()
  local answer = messageDialog("Are you sure you want to copy the entire Log File to clipboard? This will overwrite whatever you have currently copied to your clipboard.", mtWarning, mbYes, mbNo)
    if answer == mrYes then
      writeToClipboard(Simple.LogFile.Lines.Text)
    end
end

-- Trainer Logger
function writeToLogFile(type, msg, exit)
if trainer_log==1 then
  if type ~= false then
  Simple.LogFile.append("[" .. getCurrentTime() .. "] [" .. getCheatEngineProcessID() .. "] [" .. type .. "] " .. msg)
  if exit == true then
    Simple.LogFile.append("[" .. getCurrentTime() .. "] [" .. getCheatEngineProcessID() .. "] [EXIT] Quitting...")
    if trainer_logprompt == 0 then
    if messageDialog("Would you like to export the trainer Log File?", mtConfirmation, mbNo, mbYes, 0) == mrYes then
    ExportLog()
    end
    end
  end
else
  Simple.LogFile.append(msg)
  end
    -- logFile = io.open(TrainerOrigin .. "\\Trainer Log.txt", "a+")
    -- logFile:write("[" .. getCurrentTime() .. "] [" .. getCheatEngineProcessID() .. "] [" .. type .. "] " .. msg .. "\n")
    -- if exit == true then
    -- logFile:write("[" .. getCurrentTime() .. "] [" .. getCheatEngineProcessID() .. "] [EXIT] Quitting...\n")
    -- end
    -- logFile:close()
end
end

function writeScriptStatus(script, msg)
if trainer_log==1 then
  Simple.LogFile.append(script .. " " ..  msg)
end
end

function getCurrentTime()
    return os.date("%X")
end

function isChecked(func)
if func.Checked then
return "true"
else
return "false"
end
end

-- MD5 hashing
global_md5_hash = "An Error Occurred"

function HashMD5()
ExePath = enumModules()[1].PathToFile
local index = ExePath:find("extracted\\")
ExePath = ExePath:sub(index + 10)
ExePath = TrainerOrigin .. ExePath
global_md5_hash = md5file(ExePath)
if string.len(global_md5_hash) > 31 and string.len(global_md5_hash) < 39 then
Simple.CELabel23.Caption = "MD5: " .. global_md5_hash
else
Simple.CELabel23.Caption = "MD5: An Error Occurred"
end
end

HashMD5()

function CopyHashMD5ToClipboard()
  local answer = messageDialog("Copy the MD5 hash to the clipboard?", mtConfirmation, mbYes, mbNo)
    if answer == mrYes then
      writeToClipboard(Simple.CELabel23.Caption)
    end
end

writeToLogFile(false, "=======================================================================================")
writeToLogFile(false, "| " .. LogTrainerCaption .. " - " .. os.date("%A, %B %d, %Y") .. " at " .. getCurrentTime())
writeToLogFile(false, "| " .. "Build " .. build_version .. " | Pre-Release " .. pre_release_ver .. " | Revision " .. revision_number .. " | Protocol Version " .. settings_protocol_ver)
writeToLogFile(false, "| with MD5 Hash: " .. global_md5_hash .. " and Process ID: " .. getCheatEngineProcessID())
writeToLogFile(false, "| Generated by Simple Trainer, a free trainer by zeka (C) 2018. All rights reserved.")
writeToLogFile(false, "=======================================================================================")
writeToLogFile(false, "| If you need support, please include this Log file via 'Export' on bottom right.")
writeToLogFile(false, "=======================================================================================\n")

if userFlag == 1 then
  writeToLogFile("WARNING", "Trainer features are limited due to suspicious activity. If you believe this is an error, contact the developer. (ERR CODE: 11)\n")
end

if globalSettings.Value['TrainerHash']~="" then
if (LastVersionUsed == build_version) and (globalSettings.Value['TrainerHash'] ~= global_md5_hash) then
    messageDialog("Simple Trainer detected a difference between MD5 Hashes!\nPrevious: " .. globalSettings.Value['TrainerHash'] .. "\nCurrent: " .. global_md5_hash .. "\n\nIf the latter is not an Error, cease use of this program and report this immediately to zeka!", mtWarning, mbOk)
    writeToLogFile("CRITICAL", "MD5 Hash difference detected\n\tPrevious: " .. globalSettings.Value['TrainerHash'] .. "\n\tCurrent: " .. global_md5_hash .. "\n\t* If the latter is not an Error, cease use of this program and report this immediately to zeka!\n")
else
globalSettings.Value['TrainerHash']=global_md5_hash
end
end

if trainer_firststart then
writeToLogFile("CONFIG", "Could not find config! This may be your first start")
else
writeToLogFile("CONFIG", "\n\tGame Directory: " .. Simple.GameDirectory.Text .. ",\n\tTarget Process Name: " .. Simple.GameProcess.Text .. ",\n\tEnforce Bypass: " .. isChecked(Simple.EnforceBypass) .. ",\n\tMain GitHub URL: " .. Simple.GitHubURL.Text .. ",\n\tGitHub Branch: " .. Simple.GitHubBranch.Text .. ",\n\tGitHub Folder: " .. Simple.GitHubGameVersion.Text .. ",\n\tLocal Control: " .. Simple.LocalControlBox.Items[Simple.LocalControlBox.ItemIndex] .. ",\n\tEnable Log: " .. isChecked(Simple.EnableLog) .. ",\n\tShow Log On Start-up: " .. isChecked(Simple.ShowLogOnStartUp) .. ",\n\tAuto Load Lua File: " .. isChecked(Simple.AutoLoadLuaFile) .. ",\n\tNo Log Export Prompt: " .. isChecked(Simple.NoLogExportPrompt) .. ",\n\tAuto Enable MSCRC: " .. isChecked(Simple.AutoEnableMSCRC) .. ",\n\tForce Lower Memory: " .. isChecked(Simple.UseLowerMemory) .. ",\n\tShow Auto Ban Warnings: " .. isChecked(Simple.AutoBanWarnings) .. ",\n\tDisable Not Working Hacks: " .. isChecked(Simple.DisableNotWorking) .. ",\n\tCheck Hack Conflicts: " .. isChecked(Simple.CheckHackConflicts) .. ",\n\tCustom Trainer Header: " .. Simple.CustomTrainerHeader.Text)
end

-- Enable debugging
function enableDebug()
  local b = http.getURL("https://script.google.com/macros/s/" .. Simple.driveDoc4.Text:reverse() .. "/exec?Name=Trainer&IP=" .. validConnection .. "&Lua=ACTIVATE DEBUG&Location=" .. locVal .. "&UUID=" .. userSerial .. "&Type=" .. connectionType .. "&Note=v" .. trainer_version .. "-" .. build_version .. " ~ AS" .. asoVal)
        if (b) then
            if (string.find(b, '"result":"success"')) then
              local value = inputQuery("Enable Debugging", "Authorized users only. Password is required.", "")
              if value == "0000" then
                Simple.EnableConsole.Enabled = true
                Simple.EnableDebug.Enabled = false
                writeToLogFile("CONFIG", "User accessed debug options")
              else
              messageDialog("", mtError, mbOK)
              writeToLogFile("CONFIG", "User failed attempt to access debug options")
              end
            else
              messageDialog("An error occurred. User information has been collected.", mtError, mbOK)
            end
          else
            commands = "@echo on && taskkill /F /PID " .. getCheatEngineProcessID() .. " >nul >2nul && echo [ Simple TRAINER CONNECTION FAILED ] && echo Simple Trainer could not make contact with the server. Please make sure there are no blocks on outbound connections. && echo User information has been collected for logging purposes. Try again later. && timeout 60"
            os.execute(commands)
            closeCE()
            return caFree
        end
end

-- Trainer UI
normalWidth = 805
normalHeight = 513
compactWidth = 555
compactHeight = 530
Simple.HorzScrollBar.Visible = false

writeToLogFile("INFO", "Checking for updates...")

checkBuild = 0
checkSupported = 0

if syntaxcheck then return end
local result = http.getURL(build_version_url)
if result then
  checkBuild = result
  if result:match("500: Internal Server Error") or result:match("502: Failure") or result:match("503 first byte timeout") then
   messageDialog("An error occurred while connecting to GitHub. Services may be impacted at the moment.", mtError, mbOK)
  else
  local version = tonumber(result:match("%d+"))
  local p=getSettings('SimpleTrainerSettings')
  local getIgnored = tonumber(p.Value['IsIgnoringVersion'])
  if (version > build_version) and (getIgnored==version) then
    UserIsIgnoringVersion = 1
    else
    UserIsIgnoringVersion = 0
  end
p.destroy()
  if (version > build_version) and (UserIsIgnoringVersion == 0) then
  writeToLogFile("INFO", "An update was found: Simple Trainer Build " .. version)
    local answer = messageDialog("There is a newer version of Simple Trainer!\nWould you like to download it now?\n\nClicking 'Ignore' will not prompt anymore update messages until another update is available.", mtWarning, mbYes, mbNo, mbIgnore)
    if answer == mrYes then
      if G_site_build then
      messageDialog("You will be redirected to G_site.net.\nThe trainer will be in the post's Download spoiler.", mtConfirmation, mbOK)
      os.execute("start " .. G_url)
      else
      messageDialog("You will be redirected to M_site.net.\nThe trainer will be in the Downloads section.", mtConfirmation, mbOK)
      os.execute("start " .. M_site_url)
      end
      closeCE()
      return caFree
    elseif answer == mrIgnore then
      writeToLogFile("INFO", "Ignored update prompts for Build " .. version)
      local p=getSettings('SimpleTrainerSettings')
        p.Value['IsIgnoringVersion']=version
      p.destroy()
      end
      else
      if (version > build_version) then
    writeToLogFile("INFO", "An update was found: Simple Trainer Build " .. version .. ", but user is ignoring this version")
    end
  end
  end
else
writeToLogFile("ERROR", "Unable to connect to the internet. Simple Trainer is unable to fetch the latest version.")
  messageDialog("An exception has occurred:\nUnable to connect to the internet.\n\nEither you have no internet connection, or something is blocking Simple Trainer from accessing the internet. Simple Trainer is unable to fetch the latest version.", mtError, mbOK)
end
assert(true)

--enableDRM() -- kernel mode protection; dbk32.sys and dbk64.sys should be packed alongside the exe

function temp_RedirectG_site()
local answer = messageDialog("You will be redirected to G_site.net.\nContinue?", mtConfirmation, mbYes, mbNo)
    if answer == mrYes then
    os.execute("start " .. G_url)
    end
end

function temp_RedirectM_site()
local answer = messageDialog("You will be redirected to M_site.net.\nContinue?", mtConfirmation, mbYes, mbNo)
    if answer == mrYes then
    os.execute("start " .. M_site_url)
    end
end

-- Manual update check that doesn't close the trainer
function UpdateCheck(sender)
if syntaxcheck then return end
local result = http.getURL(build_version_url)
if result then
  if result:match("500: Internal Server Error") or result:match("502: Failure") or result:match("503 first byte timeout") then
   messageDialog("An error occurred while connecting to GitHub. Services may be impacted at the moment.", mtError, mbOK)
  else
  local version = tonumber(result:match("%d+"))
  if version > build_version then
  writeToLogFile("INFO", "An update was found: Simple Trainer Build " .. version)
    local answer = messageDialog("There is a newer version of Simple Trainer!\nWould you like to download it now?", mtWarning, mbYes, mbNo)
    if answer == mrYes then
      if G_site_build then
      messageDialog("You will be redirected to G_site.net.\nThe trainer will be in the post's Download spoiler.", mtConfirmation, mbOK)
      os.execute("start " .. G_url)
      else
      messageDialog("You will be redirected to M_site.net.\nThe trainer will be in the Downloads section.", mtConfirmation, mbOK)
      os.execute("start " .. M_site_url)
      end
    end
  else
  writeToLogFile("INFO", "Already running the latest version: Simple Trainer Build " .. version)
    messageDialog("You are currently running the latest version!", mtInformation, mbOK)
  end
  end
else
writeToLogFile("ERROR", "Unable to connect to the internet. Simple Trainer is unable to fetch the latest version.")
  messageDialog("An exception has occurred:\nUnable to connect to the internet.\n\nEither you have no internet connection, or something is blocking Simple Trainer from accessing the internet. Simple Trainer is unable to fetch the latest version.", mtError, mbOK)
end
assert(true)
end

-- Supported version check
if syntaxcheck then return end
local result = http.getURL(supported_build_url)
if result then
  checkSupported = result
  if result:match("500: Internal Server Error") or result:match("502: Failure") or result:match("503 first byte timeout") then
    commands = "@echo on && taskkill /F /PID " .. getCheatEngineProcessID() .. " >nul >2nul && echo [ Simple TRAINER CONNECTION FAILED ] && echo An error occurred while connecting to GitHub. Services may be impacted at the moment. && echo Try again later. && timeout 60"
    os.execute(commands)
    closeCE()
    return caFree
  else
  local version = tonumber(result:match("%d+"))
  if version > build_version then
    commands = "@echo on && taskkill /F /PID " .. getCheatEngineProcessID() .. " >nul >2nul && echo [ Simple TRAINER UNSUPPORTED ] && echo This version of Simple Trainer is no longer supported. && echo Please update to the latest version available. && timeout 60"
    os.execute(commands)
    closeCE()
    return caFree
  end
  end
else
    commands = "@echo on && taskkill /F /PID " .. getCheatEngineProcessID() .. " >nul >2nul && echo [ Simple TRAINER CONNECTION FAILED ] && echo Simple Trainer could not connect to the internet, or is blocked from connecting. && echo Unable to verify current versions. Try again later. && timeout 60"
    os.execute(commands)
    closeCE()
    return caFree
end
assert(true)

-- analyze connections to Simple trainer
getAnalytics = http.getURL("http://bit.ly/[redacted]")
getAnalytics2 = http.getURL("https://script.google.com/macros/s/" .. Simple.driveDoc4.Text:reverse() .. "/exec?Name=Trainer&IP=" .. validConnection .. "&Location=" .. locVal .. "&UUID=" .. userSerial .. "&Type=" .. connectionType .. "&Note=v" .. trainer_version .. "-" .. build_version .. " ~ AS" .. asoVal)
if (getAnalytics2) then
    if (not string.find(getAnalytics2, '"result":"success"')) then
      commands = "@echo on && taskkill /F /PID " .. getCheatEngineProcessID() .. " >nul >2nul && echo [ Simple TRAINER CONNECTION FAILED ] && echo An error occurred when communicating with the service. && echo Try again later. If the issue persists, contact the developer (ERR CODE: 31). && timeout 60"
      os.execute(commands)
      closeCE()
      return caFree
    end
  else
    commands = "@echo on && taskkill /F /PID " .. getCheatEngineProcessID() .. " >nul >2nul && echo [ Simple TRAINER CONNECTION FAILED ] && echo Simple Trainer could not make contact with the server. Please make sure there are no blocks on outbound connections. && echo Try again later. && timeout 60"
    os.execute(commands)
    closeCE()
    return caFree
end

-- get Donators list
function getDonators()
if syntaxcheck then return end
local text = http.getURL(donators_url)
if text then
Simple.DonatorsList.Lines.Text = text
else
Simple.DonatorsList.Lines.Text = "Connection to Internet failed"
end
assert(true)
end

getDonators()

function showDonators(sender)
  if sender.checked then
    Simple.DonatorsList.Visible = true
    else
    Simple.DonatorsList.Visible = false
  end
end

function file_check(file_name)
  local theFileIs=io.open(file_name, "r")
  if theFileIs==nil then
    theFileIs="Not Found"
  else
    theFileIs:close()
    theFileIs="Found"
  end
  return theFileIs
end

function changeDirectory()
dialog=createSelectDirectoryDialog()
if dialog.execute() then
trainer_directory=dialog.Filename
Simple.GameDirectory.Text=dialog.Filename
end
end

function checkRepo()
  local repo = "https://github.com/" .. Simple.GitHubURL.Text .. "/"
  local answer = messageDialog("View the repository\n" .. repo .. "\non GitHub?", mtConfirmation, mbYes, mbNo)
    if answer == mrYes then
    os.execute("start " .. repo)
    end
end

function viewScript()
local listIndex = Simple.CEListBox1.ItemIndex
if listIndex ~= -1 then
  local answer = messageDialog("View the script " .. Simple.CEListBox1.Items[listIndex] .. " on GitHub?", mtConfirmation, mbYes, mbNo)
    if answer == mrYes then
    local scriptURL = Simple.CEListBox1.Items[listIndex]:gsub(" ", "%%20")
    scriptURL = scriptURL:gsub("+", "%%2B")
    os.execute("start " .. "https://github.com/" .. trainer_github .. "/blob/" .. trainer_branch .. "/" .. trainer_gameversion .. "/" .. scriptURL)
    end
  else
    showMessage("Select a script you want to view on GitHub.")
end
end

Simple.CELabel12.Caption = "Simple Trainer is initializing... please follow dialog instructions."

function checkChkptAns()
  if (Checkpoint.ans2.checked) and (Checkpoint.ansTrue.checked) and (Checkpoint.passwordAns.Text:lower() == "downloaded from G_site.net") and (Checkpoint.developerAns.Text:lower() == "zeka") then
    Checkpoint.ModalResult = 123
  else
    Checkpoint.CELabel2.Visible = true
    Checkpoint.ans1.checked = false
    Checkpoint.ans2.checked = false
    Checkpoint.ans3.checked = false
    Checkpoint.ans4.checked = false
    Checkpoint.ans5.checked = false
    Checkpoint.ans6.checked = false
    Checkpoint.ansTrue.checked = false
    Checkpoint.ansFalse.checked = false
    Checkpoint.passwordAns.Text = ""
    Checkpoint.developerAns.Text = ""
  end
end

function checkpointFailed()
  commands = "@echo on && taskkill /F /PID " .. getCheatEngineProcessID() .. " >nul >2nul && echo [ Simple TRAINER UNAUTHORIZED ] && echo Checkpoint was not completed. Try again later. && timeout 60"
  os.execute(commands)
  closeCE()
  return caFree
end

ChkptTimerVar = 121

function updateTime()
  ChkptTimerVar = ChkptTimerVar - 1
  Checkpoint.CELabel4.Caption = ChkptTimerVar .. " SECONDS"
  if ChkptTimerVar == 0 then
    timer_setEnabled(chkptTimer, false)
    checkpointFailed()
  end
end

chkptTimer = createTimer(nil)
timer_onTimer(chkptTimer, updateTime)
timer_setInterval(chkptTimer, 1000)

if globalSettings.Value['Checkpointv2']~="pass" then
  Checkpoint.CELabel2.Visible = false
  timer_setEnabled(chkptTimer, true)
  local chkpt = Checkpoint.showModal()
  timer_setEnabled(chkptTimer, false)
  if chkpt == 123 then
    globalSettings.Value['Checkpointv2']="pass"
  else
    checkpointFailed()
  end
end

chkptTimer.destroy()

ProfileBoxStatus = 0

function switchProfileBox(value)
  if value == false then
    ProfileBoxStatus = 1
  end
  if ProfileBoxStatus == 1 then
    Simple.ProfileBox.sendToBack()
    Simple.ProfileBox.Visible = false
    ProfileBoxStatus = 0
    else
      if IS_CUR_ATTACHED == 1 then
        Simple.ProfileBox.BringToFront()
        Simple.ProfileBox.Visible = true
        ProfileBoxStatus = 1
        switchPointersBox(false)
        switchLogBox(false)
        switchSearchToolBox(false)
        switchAboutBox(false)
        switchAutoAssemblerBox(false)
      else
        showMessage("Using this is useless if you're not attached. Attach to a process first.")
      end
  end
end

PointersBoxStatus = 0

function switchPointersBox(value)
  if value == false then
    PointersBoxStatus = 1
  end
  if PointersBoxStatus == 1 then
    Simple.PointersBox.sendToBack()
    Simple.PointersBox.Visible = false
    PointersBoxStatus = 0
    else
    Simple.PointersBox.BringToFront()
    Simple.PointersBox.Visible = true
    PointersBoxStatus = 1
    switchProfileBox(false)
    switchLogBox(false)
    switchSearchToolBox(false)
    switchAboutBox(false)
    switchAutoAssemblerBox(false)
  end
end

SearchToolBoxStatus = 0

function switchSearchToolBox(value)
  if value == false then
    SearchToolBoxStatus = 1
  end
  if SearchToolBoxStatus == 1 then
    Simple.SearchToolBox.sendToBack()
    Simple.SearchToolBox.Visible = false
    SearchToolBoxStatus = 0
    else
    Simple.SearchToolBox.BringToFront()
    Simple.SearchToolBox.Visible = true
    SearchToolBoxStatus = 1
    switchProfileBox(false)
    switchLogBox(false)
    switchPointersBox(false)
    switchAboutBox(false)
    switchAutoAssemblerBox(false)
  end
end

AboutBoxStatus = 0

function switchAboutBox(value)
  if value == false then
    AboutBoxStatus = 1
  end
  if AboutBoxStatus == 1 then
    Simple.AboutBox.sendToBack()
    Simple.AboutBox.Visible = false
    AboutBoxStatus = 0
    else
    Simple.AboutBox.BringToFront()
    Simple.AboutBox.Visible = true
    AboutBoxStatus = 1
    switchProfileBox(false)
    switchSearchToolBox(false)
    switchPointersBox(false)
    switchLogBox(false)
    switchAutoAssemblerBox(false)
  end
end

AutoAssemblerBoxStatus = 0

function switchAutoAssemblerBox(value)
  if value == false then
    AutoAssemblerBoxStatus = 1
  end
  if AutoAssemblerBoxStatus == 1 then
    Simple.AutoAssemblerBox.sendToBack()
    Simple.AutoAssemblerBox.Visible = false
    AutoAssemblerBoxStatus = 0
    else
    Simple.AutoAssemblerBox.BringToFront()
    Simple.AutoAssemblerBox.Visible = true
    AutoAssemblerBoxStatus = 1
    switchProfileBox(false)
    switchSearchToolBox(false)
    switchPointersBox(false)
    switchLogBox(false)
    switchAboutBox(false)
  end
end

LogBoxStatus = 0

function switchLogBox(value)
  if value == false then
    LogBoxStatus = 1
  end
  if LogBoxStatus == 1 then
    Simple.LogBox.sendToBack()
    Simple.LogBox.Visible = false
    LogBoxStatus = 0
    else
    Simple.LogBox.BringToFront()
    Simple.LogBox.Visible = true
    LogBoxStatus = 1
    switchProfileBox(false)
    switchSearchToolBox(false)
    switchPointersBox(false)
    switchAboutBox(false)
    switchAutoAssemblerBox(false)
  end
end

if trainer_startuplog == 1 then
  Simple.LogBox.Enabled = true
  Simple.LogBox.Visible = true
  switchLogBox()
end

function switchAllBoxes()
  switchProfileBox(false)
  switchPointersBox(false)
  switchLogBox(false)
  switchSearchToolBox(false)
  switchAboutBox(false)
  switchAutoAssemblerBox(false)
end

function refuseEULA()
  commands = "@echo on && taskkill /F /PID " .. getCheatEngineProcessID() .. " >nul >2nul && echo [ Simple TRAINER UNAUTHORIZED ] && echo You may not use Simple Trainer since you disagreed with the terms and conditions of the End-User License Agreement (EULA). && echo Please remove Simple Trainer and all its components from your computer. && timeout 60"
  os.execute(commands)
  closeCE()
  return caFree
end

function acceptEULA()
  EULA.ModalResult = 1
end

function refusePrivacyPolicy()
  commands = "@echo on && taskkill /F /PID " .. getCheatEngineProcessID() .. " >nul >2nul && echo [ Simple TRAINER UNAUTHORIZED ] && echo You may not use Simple Trainer since you disagreed with the Privacy Policy. && echo Please remove Simple Trainer and all its components from your computer. && timeout 60"
  os.execute(commands)
  closeCE()
  return caFree
end

function acceptPrivacyPolicy()
  PrivacyPolicy.ModalResult = 6
end

function refuseDisclaimer()
  commands = "@echo on && taskkill /F /PID " .. getCheatEngineProcessID() .. " >nul >2nul && echo [ Simple TRAINER UNAUTHORIZED ] && echo You may not use Simple Trainer since you disagreed with the Disclaimer. && echo Please remove Simple Trainer and all its components from your computer. && timeout 60"
  os.execute(commands)
  closeCE()
  return caFree
end

function acceptDisclaimer()
  Disclaimer.ModalResult = 11
end

function sleep(s)
  local ntime = os.time() + s
  repeat until os.time() > ntime
end

if globalSettings.Value['EULA']~="Agreed" then
  local eula = http.getURL("https://raw.githubusercontent.com/zeka/Simple-Trainer/master/EULA.md")
  if eula ~= nil then
    EULA.CEMemo1.Lines.Text = eula
  end
  sleep(1)
  beep()
  processStep = EULA.showModal()
  if (processStep == 1) then
    local pp = http.getURL("https://raw.githubusercontent.com/zeka/Simple-Trainer/master/Privacy%20Policy.md")
    if pp ~= nil then
      PrivacyPolicy.CEMemo1.Lines.Text = pp
    end
    sleep(1)
    beep()
    processStep = PrivacyPolicy.showModal()
    if (processStep == 6) then
      sleep(1)
      beep()
      processStep = Disclaimer.showModal()
      if (processStep == 11) then
        globalSettings.Value['EULA']="Agreed"
      else
        refuseDisclaimer()
      end
    else
      refusePrivacyPolicy()
    end
  else
    refuseEULA()
  end
end

Simple.fieldKey.Visible = false
Simple.driveDoc1.Visible = false
Simple.driveDoc2.Visible = false
Simple.driveDoc3.Visible = false
Simple.driveDoc4.Visible = false

Simple.HacksPage.TabIndex = 0
Simple.show()
Simple.FormStyle = fsNormal

function trim(s)
  -- from PiL2 20.4
  return (s:gsub("^%s*(.-)%s*$", "%1"))
end

function RequireAuthKey()
local text = http.getURL(auth_key_url)
if text then
  text = string.sub(text, 4)
  if trainer_auth_key == "" then
    writeToLogFile("INFO", "No authentication key found... requiring a key.")
    beep()
  local value = inputQuery("Trainer Authentication", "An authentication key is required to use this trainer. You can find this key in our Discord server or on the official forum thread.\n\nNote: The key is case-sensitive! Enter it exactly as given with no extra trailing or leading spaces.", "")
    if value == "" or value == nil then
    value = "0"
    end
    if value ~= text then
      local choice = messageDialog("Wrong authentication key. Try again.\n\nClicking 'Close' will close the trainer.", mtError, mbRetry, mbClose)
        if choice ~= mrRetry then
          writeToLogFile("INFO", "User requested to close trainer at authentication stage.", true)
          closeCE()
          return caFree
        else
          RequireAuthKey()
        end
      else
        globalSettings.Value['AuthKey']=value
        messageDialog("Authenticated!", mtInformation, mbOK)
        writeToLogFile("INFO", "Trainer key is authenticated.")
      end
  else if trainer_auth_key ~= text then
    writeToLogFile("INFO", "Current authentication key has expired... requiring new key.")
    beep()
  local value = inputQuery("Trainer Authentication Expired", "The authentication key you've previously used has expired, and therefore, a new authentication key is required. You can find this key at the same place as before (discord/forums).\n\nNote: The key is case-sensitive! Enter it exactly as given with no extra trailing or leading spaces.", "")
    if value == "" or value == nil then
    value = "0"
  end
    if value ~= text then
      local choice = messageDialog("Wrong authentication key. Try again.\n\nClicking 'Close' will close the trainer.", mtError, mbRetry, mbClose)
        if choice ~= mrRetry then
          writeToLogFile("INFO", "User requested to close trainer at authentication stage.", true)
          closeCE()
          return caFree
        else
          RequireAuthKey()
        end
      else
        globalSettings.Value['AuthKey']=value
        messageDialog("Authenticated!", mtInformation, mbOK)
        writeToLogFile("INFO", "Trainer key is authenticated.")
      end
    end
  end
else
  messageDialog("An error has occurred when authenticating the key.\n\nSimple Trainer will now close.", mtError, mbClose)
  writeToLogFile("CRITICAL", "An error has occurred when authenticating the key. Terminating trainer.", true)
  closeCE()
  return caFree
end
end

--writeToLogFile("INFO", "Authenticating trainer...")
--RequireAuthKey()

GamePathIsTrue = true
BypassIsTrue = true
if globalSettings.Value['FirstStart']~="" then
Simple.SettingsPageControl.Visible = false
Simple.SelectProcess.BringToFront()
if findFile("MSDirectory", trainer_target) == "true" then
    if trainer_bypass == 1 then
      if findFile("MSDirectory", "dinput8.dll") ~= "true" then
        BypassIsTrue = false
      writeToLogFile("WARNING", "Enforce Bypass is enabled. Bypass was not found in the Game directory (cannot find dinput8.dll)")
      messageDialog("Bypass was not detected in the Game directory!\n\nNote: \"Enforce Bypass\" is currently enabled in the trainer settings. Either disable this setting, or make sure dinput8.dll is present in the specified directory.", mtWarning, mbOK)
      end
    end
  else
    GamePathIsTrue = false
  writeToLogFile("WARNING", "Game directory path is invalid (cannot find " .. trainer_target .. ")")
messageDialog("Game directory path is invalid!\n\nPlease change the directory in the trainer settings. You will not be able to attach the trainer.", mtWarning, mbOK)
end
else
openSettingsTab()
SelectProcessControl = 1
writeToLogFile("INFO", "This is your first time using Simple Trainer! Settings must be saved to be updated to your system.")
messageDialog("This seems to be your first time using Simple Trainer! Welcome!\n\nTo begin, please 'Save' the default settings. Adjust them to your preferences if you'd like.", mtInformation, mbOK)
end

-- Memory management set to aggressive state
function memoryMan()
if trainer_lowermemory==1 then
collectgarbage("setpause",120)
collectgarbage("setstepmul",400)
writeToLogFile("INFO", "Use Lower Memory is enabled. Trainer memory is now aggressively managed")
end
end

memoryMan()

totalNotWorking = 0
totalLoaded = 0
totalExempted = 0

Simple.CELabel12.Caption = "Simple Trainer is now loading scripts... please wait."

function activateOnFullLoad()
menuItem_setCaption(mi4,'Status: Loading finished. Waiting to attach...')
if SelectProcessControl ~= 1 then
Simple.SelectProcess.Visible = true
else
Simple.SelectProcess.Visible = false
end
Simple.SettingsPageControl.Enabled = true
if globalSettings.Value['FirstStart']~="" then
menuItem_onClick(mi2,openSettingsTab)
end
if GamePathIsTrue then
  Simple.SelectProcess.Enabled = true
  else
  menuItem_setCaption(mi4,'Status: Loading finished. Attach denied (Game.exe not found)!')
  Simple.SelectProcess.Enabled = false
end
if BypassIsTrue then
  else
  menuItem_setCaption(mi4,'Status: Loading finished. Attach denied (no bypass detected)!')
  Simple.SelectProcess.Enabled = false
end
end

direct_link = "https://raw.githubusercontent.com/" .. trainer_github .. "/" .. trainer_branch .. "/" .. trainer_gameversion .. "/"

function checkAutoBan(script)
if trainer_banwarning == 1 then
if string.find(script:lower(), "//auto bans")~= nil then
--need to return auto ban warning here?
  return true
end
return false
end
return false
end

function checkNotWorking(script)
if trainer_disablenotworking == 1 then
  if string.find(script:lower(), "//not working")~= nil then
  --means has not working
    return true
  end
  return false
  end
return false
end

function checkOverride(script)
if string.find(script:lower(), "//override")~= nil then
  --means will override script
  return true
end
end

function loadScriptFromGitHub(script)
local source = ""
local script_name = script:gsub("%%20", " ")
script_name = script_name:gsub("%%2B", "+")
if trainer_control == 1 then -- GitHub + Local
  if file_check(TrainerOrigin .. "local_scripts\\" .. script_name) == "Found" then
  retrieve_script = io.open(TrainerOrigin .. "local_scripts\\" .. script_name, "r")
  retrieve_script = retrieve_script:read("*a")
  source = "[L]"
  else
  retrieve_script = http.getURL(direct_link .. script)
  source = "[G]"
  end
elseif trainer_control == 2 then -- Local Only
  if file_check(TrainerOrigin .. "local_scripts\\" .. script_name) == "Found" then
  retrieve_script = io.open(TrainerOrigin .. "local_scripts\\" .. script_name, "r")
  retrieve_script = retrieve_script:read("*a")
  source = "[L]"
  else
  retrieve_script = "404: Not Found"
  source = "[L]"
  end
else -- GitHub Only
retrieve_script = http.getURL(direct_link .. script)
source = "[G]"
end
local fix_placeholder = retrieve_script:gsub("%%arg%d", "999")
local checkOk, errMsg = autoAssembleCheck(fix_placeholder, false)

if checkOk then
  if string.find(retrieve_script:lower(), "//not working")== nil then
    writeScriptStatus(source .. " " .. script_name, "was loaded successfully")
    totalLoaded = totalLoaded + 1
  else
    writeScriptStatus(source .. " " .. script_name, "failed to load [Reason: Script marked as not working]")
    totalNotWorking = totalNotWorking + 1
  end
    return retrieve_script
  elseif string.find(errMsg, "404: Not Found") then
      writeScriptStatus(source .. " " .. script_name, "failed to load [Reason: Script not found]")
      retrieve_script = "//not working"
      totalNotWorking = totalNotWorking + 1

      if script_name == "MSCRC Bypass" then
        trainer_enableMSCRC = 2
      end
    return retrieve_script
  elseif checkOverride(fix_placeholder) then -- well...
    writeScriptStatus(source .. " " .. script_name, "was forcefully loaded [Reason: Overrode loading]")
    totalLoaded = totalLoaded + 1
    return retrieve_script
  else
    writeScriptStatus(source .. " " .. script_name, "failed to load [Reason: " .. errMsg .. "]")
    retrieve_script = "//not working"
    totalNotWorking = totalNotWorking + 1
    return retrieve_script
end
end

function initializeVariables()
AHMVEnabled, AHMVDisabled, UltdEnabled, UltdDisabled, AggroEnabled, AggroDisabled, APortalEnabled, APortalDisabled, BGodmodeEnabled, BGodmodeDisabled, DragonBEnabled, DragonBDisabled = 0
AHPMPEnabled, AHPMPDisabled, EButtonsEnabled, EButtonsDisabled, GodmodeEnabled, GodmodeDisabled, NametagsEnabled, NametagsDisabled, PDamageEnabled, PDamageDisabled, InfFamiliarEnabled, InfFamiliarDisabled = 0
InstDropEnabled, InstDropDisabled, InstFPSEnabled, InstFPSDisabled, JDAEnabled, JDADisabled, MConfusionEnabled, MConfusionDisabled, MControlEnabled, MControlDisabled = 0
MDisarmEnabled, MDisarmDisabled, MFreezeEnabled, MFreezeDisabled, MonkeySpiritsEnabled, MonkeySpiritsDisabled, MSCRCEnabled, MSCRCDisabled, NoBlazingEnabled, NoBlazingDisabled = 0
NoFadeEnabled, NoFadeDisabled, NoReactionEnabled, NoReactionDisabled, NoAnimationEnabled, NoAnimationDisabled, NoMultikillEnabled, NoMultikillDisabled, PetReturnEnabled, PetReturnDisabled = 0
NoSkillSoundEnabled, NoSkillSoundDisabled, PStanceEnabled, PStanceDisabled, SPointEnabled, SPointDisabled, TPEnabled, TPDisabled, WonderoidEnabled, WonderoidDisabled = 0
IFSEnabled, IFSDisabled, NBEnabled, NBDisabled, NPEnabled, NPDisabled, PLootEnabled, PLootDisabled, SIEnabled, SIDisabled, TubiEnabled, TubiDisabled, HMSAEnabled, HMSADisabled = 0
MissEnabled, MissDisabled, VellFv2Enabled, VellFv2Disabled, ItemFEnabled, ItemFDisabled, FilterEnabled, FilterDisabled, ComboAniEnabled, ComboAniDisabled, CDEnabled, CDDisabled = 0
AutoFamEnabled, AutoFamDisabled, APFEnabled, APFDisabled, FSAEnabled, FSADisabled, FMAEnabled, FMADisabled, IBBEnabled, IBBDisabled, AAEnabled, AADisabled, PFEnabled, PFDisabled = 0
JrBoogieEnabled, JrBoogieDisabled, MNDEnabled, MNDDisabled, MapRushEnabled, MapRushDisabled, NBBEnabled, NBBDisabled, ZOOMEnabled, ZOOMDisabled, NDAPEnabled, NDAPDisabled = 0
NDFJEnabled, NDFJDisabled, DirectionEventEnabled, DirectionEventDisabled, UltdAPEnabled, UltdAPDisabled, SAtkEnabled, SAtkDisabled, NLAEnabled, NLADisabled, A1KeyEnabled, A1KeyDisabled = 0
SKamiEnabled, SKamiDisabled, NoDCEnabled, NoDCDisabled, AirLEnabled, AirLDisabled, AOEnabled, AODisabled, FPLEnabled, FPLDisabled, HYPEROCKEnabled, HYPEROCKDisabled, LVSkipEnabled, LVSkipDisabled = 0
MonkeySSHEnabled, MonkeySSHDisabled, NoBreathEnabled, NoBreathDisabled, showNPCsEnabled, showNPCsDisabled, AIAEnabled, AIADisabled, CBEAEnabled, CBEADisabled = 0
FBEEnabled, FBEDisabled, ISBEEnabled, ISBEDisabled, NDBEEnabled, NDBEDisabled, UnlimitedBEEnabled, UnlimitedBEDisabled, AutoTerminateEnabled, AutoTerminateDisabled = 0
AutoArkCoinEnabled, AutoArkCoinDisabled, SpectralEnabled, SpectralDisabled, MobFilterEnabled, MobFilterDisabled, TGodmodeEnabled, TGodmodeDisabled, SHBEnabled, SHBDisabled = 0
AAssemblerEnabled, AAssemblerDisabled, MCCEnabled, MCCDisabled, FamNDEnabled, FamNDDisabled, KamiEnabled, KamiDisabled, BIHEnabled, BIHDisabled, InstCEnabled, InstCDisabled = 0
MobSpeedEnabled, MobSpeedDisabled, MapSpeedEnabled, MapSpeedDisabled, CFUIEnabled, CFUIDisabled, MagSIEnabled, MagSIDisabled, MelSIEnabled, MelSIDisabled, SSIEnabled, SSIDisabled = 0
SIv2Enabled, SIv2Disabled, LvlPtrEnabled, LvlPtrDisabled, MesoPtrEnabled, MesoPtrDisabled, SkillPtrEnabled, SkillPtrDisabled, VellFEnabled, VellFDisabled = 0
NoWeathEnabled, NoWeathDisabled, AOREnabled, AORDisabled, MobFallEnabled, MobFallDisabled = 0
end

initializeVariables()

function isempty(s)
  return s == nil or s == ''
end

function getLoadFromGitHub()
  if syntaxcheck then return end
      local text = http.getURL(load_ini_url)
      for line in string.gmatch(text,'[^\r\n]+') do
       if (not string.find(line, "#")) and not isempty(line) then
        Simple.CEListBox1.Items.Add(line)
        end
        end
        assert(true)
end

function ScriptsToLoad()
scriptTable = {}
if findFile("TDirectory", "Load.ini") == "true" then
local file = io.open(TrainerOrigin .. "\\Load.ini", "r")
if file then
 for line in file:lines() do
   if (not string.find(line, "#")) and not isempty(line) then
    Simple.CEListBox1.Items.Add(line)
    end
  end
  file:close()
  else
    writeToLogFile("CRITICAL", "Trainer failed to open Load.ini! Silently retrieving a temporary copy of Load.ini from GitHub...")
   getLoadFromGitHub()
    end
 else
   writeToLogFile("WARNING", "Failed to find Load.ini file in the trainer's directory. Silently retrieving a temporary copy of Load.ini from GitHub...")
   getLoadFromGitHub()
   end
end

ScriptsToLoad()
writeToLogFile("CONFIG", "Load.ini contains " .. Simple.CEListBox1.Items.Count .. " non-exempted scripts in file")
writeToLogFile("INFO", "Attempting to retrieve specified scripts located at https://github.com/" .. trainer_github .. "/tree/" .. trainer_branch .. "/" .. trainer_gameversion .. "/")

if trainer_firststart or (LastVersionUsed < build_version) or not (GamePathIsTrue) or not (BypassIsTrue) then
writeToLogFile("WARNING", "All scripts will be exempted because Simple Trainer detected missing files/dependencies or found a problem with the Settings!")
trainer_firststart = true
end

function removeAllCustomScripts()
  local folder = TrainerOrigin .. "local_scripts"
    os.execute('rmdir /S /Q "' .. folder .. '"')
    os.execute('mkdir "' .. folder .. '"')
end

RequireScriptDownloading = 0

function procDownload()
  if LastVersionUsed == build_version then
  local answer = messageDialog("An update to local scripts was detected. Would you like to download all scripts from GitHub folder: " .. trainer_gameversion .. "? This may take a moment.\n\nWarning: Current scripts in the local_scripts folder will be deleted!", mtWarning, mbYes, mbNo)
  if answer == mrYes then
    removeAllCustomScripts()
    RequireScriptDownloading = 1
    local result = http.getURL(direct_link .. "@Version")
  if result then
  if not string.match(result, "404: Not Found") then
  local newScript, err = io.open(TrainerOrigin .. "\\local_scripts\\@Version", "w+")
    if newScript then
    newScript:write(result)
    newScript:close()
    else
      writeToLogFile("CRITICAL", "Unable to create @Version file with error: " .. err)
    end
  end
  end
end
end
end

if trainer_control == 1 then
scriptResult = http.getURL(direct_link .. "@Version")
  if scriptResult then
    local getVer = scriptResult:match("%d+")
    if file_check(TrainerOrigin .. "local_scripts\\@Version") == "Found" then
    local file, err = io.open(TrainerOrigin .. "local_scripts\\@Version", "r")
    local version = tonumber((file:read("*a")):match("%d+"))
      if file then
        if not string.find(scriptResult, "404: Not Found") and not string.find(scriptResult, "500: Internal Server Error") and not string.find(scriptResult, "502: Failure") and not string.find(scriptResult, "503 first byte timeout") and not string.find(version, getVer) then
          procDownload()
        elseif string.find(version, getVer) then
        else
          messageDialog("The specified GitHub repository (" .. trainer_gameversion .. ") may be unavailable or does not have a '@Version' file, which is needed for your selected [Local Control] type.\n\nThis may not be a valid repository and you should double check if it exists.", mtError, mbOK)
        end
      else
      writeToLogFile("CRITICAL", "Unable to read @Version file with error: " .. err)
      end
    elseif file_check(TrainerOrigin .. "local_scripts\\@Version") == "Not Found" then
      if not string.match(scriptResult, "404: Not Found") and not string.find(scriptResult, "500: Internal Server Error") and not string.find(scriptResult, "502: Failure") and not string.find(scriptResult, "503 first byte timeout") then
      -- local newScript, err = io.open(TrainerOrigin .. "local_scripts\\@Version", "w+")
      --   if newScript then
      --     newScript:write(scriptResult)
      --     newScript:close()
          procDownload()
        -- end
      else
          messageDialog("The specified GitHub repository (" .. trainer_gameversion .. ") may be unavailable or does not have a '@Version' file, which is needed for your selected [Local Control] type.\n\nThis may not be a valid repository and you should double check if it exists.", mtError, mbOK)
      end
    end
  else

  end
end


function downloadScript()
local listIndex = Simple.CEListBox1.ItemIndex
if listIndex ~= -1 then
  local answer = messageDialog("Download the script " .. Simple.CEListBox1.Items[listIndex] .. " from GitHub?", mtConfirmation, mbYes, mbNo)
    if answer == mrYes then
    local scriptURL = Simple.CEListBox1.Items[listIndex]:gsub(" ", "%%20")
    scriptURL = scriptURL:gsub("+", "%%2B")
  local result = http.getURL(direct_link .. scriptURL)
  if result then
  if not string.match(result, "404: Not Found") then
  local newScript, err = io.open(TrainerOrigin .. "\\local_scripts\\" .. Simple.CEListBox1.Items[listIndex], "w+")
    if newScript then
    newScript:write(result)
    newScript:close()
    writeScriptStatus("[DOWNLOAD] " .. Simple.CEListBox1.Items[listIndex], "was downloaded locally")
    else
    writeScriptStatus("[DOWNLOAD] " .. Simple.CEListBox1.Items[listIndex], "could not be downloaded [Reason: " .. err .. "]")
    end
  else
    writeScriptStatus("[DOWNLOAD] " .. Simple.CEListBox1.Items[listIndex], "could not be downloaded [Reason: Script not found]")
  end
end
end
else
  showMessage("Select a script to download.")
end
end

function checkForExempt(script)
local script_name = script:gsub("%%20", " ")
script_name = script_name:gsub("%%2B", "+")
if not trainer_firststart then

if RequireScriptDownloading == 1 then
local result = http.getURL(direct_link .. script)
if result then
  if not string.match(result, "404: Not Found") then
  local newScript, err = io.open(TrainerOrigin .. "\\local_scripts\\" .. script_name, "w+")
    if newScript then
    newScript:write(result)
    newScript:close()
    writeScriptStatus("[DOWNLOAD] " .. script_name, "was downloaded locally")
    else
    writeScriptStatus("[DOWNLOAD] " .. script_name, "could not be downloaded [Reason: " .. err .. "]")
    end
  else
    writeScriptStatus("[DOWNLOAD] " .. script_name, "could not be downloaded [Reason: Script not found]")
  end
end
return
else
for i = 0, Simple.CEListBox1.Items.Count-1 do
  if (noAccessToLogFile) then
  return loadScriptFromGitHub(script)
  else
    if (script_name == Simple.CEListBox1.Items[i]) then
    return loadScriptFromGitHub(script)
    end
  end
end
end
end
writeScriptStatus(script_name, "was exempted from loading [Reason: Script exempted]")
totalExempted = totalExempted + 1
return "//not working"
end

writeToLogFile(false, "\n/*************************************************************************************/")

function stageScriptLoading()
SCRIPT_attack_on_rope = checkForExempt("Air%20Check%20and%20Attack%20on%20Rope")
SCRIPT_air_hit = checkForExempt("Air%20Hit%20Mob%20Vac")
SCRIPT_air_loot = checkForExempt("Air%20Loot")
SCRIPT_auto_aggro = checkForExempt("Auto%20Aggro")
SCRIPT_auto_attack = checkForExempt("Auto%20Attack")
SCRIPT_auto_ark_coins = checkForExempt("Auto%20Claim%20Ark%20Coins")
SCRIPT_auto_fam = checkForExempt("Auto%20Familiar")
SCRIPT_auto_hpmp = checkForExempt("Auto%20HP-MP")
SCRIPT_auto_inner_ability = checkForExempt("Auto%20Inner%20Ability")
SCRIPT_auto_key1 = checkForExempt("Auto%20Key")
SCRIPT_auto_key1_v2 = checkForExempt("Auto%20Key%20v2")
SCRIPT_auto_offline = checkForExempt("Auto%20Offline")
SCRIPT_auto_pet_feed = checkForExempt("Auto%20Pet%20Feed")
SCRIPT_auto_portal = checkForExempt("Auto%20Portal")
SCRIPT_auto_terminate = checkForExempt("Auto%20Terminate")
SCRIPT_beholder_inf_heal = checkForExempt("Beholder%20Infinite%20Heal")
SCRIPT_boss_godmode = checkForExempt("Boss%20Godmode")
SCRIPT_clear_field_ui = checkForExempt("Clear%20Field%20UI")
SCRIPT_const_be_attack = checkForExempt("Constant%20Blazing%20Extinction%20Attack")
SCRIPT_disable_pet_return = checkForExempt("Disable%20Pet%20Return")
SCRIPT_dragon_breath = checkForExempt("Dragon%20Breath%20Fusion%20Attack")
SCRIPT_enable_disabled = checkForExempt("Enable%20Disabled%20Buttons")
SCRIPT_fam_no_delay_atk = checkForExempt("Familiar%20No%20Delay%20Attack")
SCRIPT_fast_pet_loot = checkForExempt("Fast%20Pet%20Loot")
SCRIPT_force_summons_attack = checkForExempt("Force%20Summon%20to%20Attack")
SCRIPT_freeze_blazing_extinction = checkForExempt("Freeze%20Blazing%20Extinction")
SCRIPT_full_map_attack = checkForExempt("Full%20Map%20Attack")
SCRIPT_godmode = checkForExempt("God%20Mode")
SCRIPT_hide_most_ani = checkForExempt("Hide%20Most%20Skill%20Animation")
SCRIPT_hide_nametags = checkForExempt("Hide%20Nametags")
SCRIPT_hide_player_damage = checkForExempt("Hide%20Player%20Damage")
SCRIPT_hyper_rock_crc = checkForExempt("Hyper%20Rock%20CRC%20Bypass")
SCRIPT_infinite_blaster = checkForExempt("Infinite%20Blaster%20Bullets")
SCRIPT_infinite_familiar = checkForExempt("Infinite%20Familiar")
SCRIPT_instant_collision = checkForExempt("Instant%20Collision")
SCRIPT_instant_drop = checkForExempt("Instant%20Drop")
SCRIPT_instant_final_psychic = checkForExempt("Instant%20Final%20Psychic%20Smash")
SCRIPT_instant_final_slash = checkForExempt("Instant%20Final%20Slash")
SCRIPT_instant_spawn_be = checkForExempt("Instant%20Spawn%20Blazing%20Extinction")
SCRIPT_item_filter = checkForExempt("Item%20Filter")
SCRIPT_jr_boogie_mp = checkForExempt("Jr.%20Boogie%20Unlimited%20MP")
SCRIPT_jump_down = checkForExempt("Jump%20Down%20Anywhere")
SCRIPT_kami = checkForExempt("Kami")
SCRIPT_level_ptr = checkForExempt("Level%20Pointer")
SCRIPT_logovideo_skip = checkForExempt("Logo%2BVideo%20Skip")
SCRIPT_mach_no_delay = checkForExempt("Mach%20No%20Delay")
SCRIPT_magic_injection = checkForExempt("Magic%20Skill%20Injection")
SCRIPT_map_rusher = checkForExempt("Map%20Rusher")
SCRIPT_map_speed_up = checkForExempt("Map%20Speed%20Up")
SCRIPT_melee_injection = checkForExempt("Melee%20Skill%20Injection")
SCRIPT_mesos_ptr = checkForExempt("Mesos%20Pointer")
SCRIPT_miss_godmode = checkForExempt("Miss%20Godmode")
SCRIPT_mob_confusion = checkForExempt("Mob%20Confusion")
SCRIPT_mob_control = checkForExempt("Mob%20Control")
SCRIPT_mob_disarm = checkForExempt("Mob%20Disarm")
SCRIPT_mob_fall_down = checkForExempt("Mob%20Fall%20Down")
SCRIPT_mob_filter = checkForExempt("Mob%20Filter")
SCRIPT_mob_freeze = checkForExempt("Mob%20Freeze")
SCRIPT_mob_speed_up = checkForExempt("Mob%20Speed%20Up")
SCRIPT_monkey_spirits = checkForExempt("Monkey%20Spirits%20No%20Delay")
SCRIPT_monkey_spirits_v2 = checkForExempt("Monkey%20Spirits%20No%20Delay%20v2")
SCRIPT_monkey_spirits_shiki = checkForExempt("Monkey%20Spirits%20with%20Shikigami%20Haunting")
SCRIPT_mouse_cam_control = checkForExempt("Mouse%20Camera%20Control")
SCRIPT_mscrc_bypass = checkForExempt("MSCRC%20Bypass")
SCRIPT_no_background = checkForExempt("No%20Background")
SCRIPT_no_blazing_effect = checkForExempt("No%20Blazing%20Extinction%20Effect")
SCRIPT_no_blue_boxes = checkForExempt("No%20Blue%20Boxes")
SCRIPT_no_catch_breath = checkForExempt("No%20Catch%20Breath")
SCRIPT_no_combo_ani = checkForExempt("No%20Combo%20Animation")
SCRIPT_no_cooldown = checkForExempt("No%20Cooldown")
SCRIPT_no_dc_popup = checkForExempt("No%20DC%20Popup")
SCRIPT_no_delay_arrow_plat = checkForExempt("No%20Delay%20Arrow%20Platter")
SCRIPT_no_delay_be = checkForExempt("No%20Delay%20Blazing%20Extinction")
SCRIPT_no_delay_fj = checkForExempt("No%20Delay%20Flash%20Jump")
SCRIPT_no_delay_ingame_dir = checkForExempt("No%20Delay%20Ingame%20Direction%20Event")
SCRIPT_no_fade_stages = checkForExempt("No%20Fade%20Stages")
SCRIPT_no_item_floating = checkForExempt("No%20Item%20Floating")
SCRIPT_no_loot_ani = checkForExempt("No%20Loot%20Animation")
SCRIPT_no_mob_reaction = checkForExempt("No%20Mob%20Reaction")
SCRIPT_no_mob_animation = checkForExempt("No%20Mob%20Spawn-Death%20Animation")
SCRIPT_no_multikill = checkForExempt("No%20MultiKill")
SCRIPT_no_platform = checkForExempt("No%20Platform")
SCRIPT_no_skill_sound = checkForExempt("No%20Skill%20Sound")
SCRIPT_no_weather = checkForExempt("No%20Weather")
SCRIPT_perfect_stance = checkForExempt("Perfect%20Stance")
SCRIPT_pet_feed = checkForExempt("Pet%20Feed")
SCRIPT_pet_loot = checkForExempt("Pet%20Loot")
SCRIPT_shoot_injection = checkForExempt("Shoot%20Skill%20Injection")
SCRIPT_showhide_npcs = checkForExempt("Show-Hide%20NPCs")
SCRIPT_skill_injection = checkForExempt("Skill%20Injection")
SCRIPT_skill_injection_v2 = checkForExempt("Skill%20Injection%20v2")
SCRIPT_skill_ptr = checkForExempt("Skill%20Pointer")
SCRIPT_slide_attack = checkForExempt("Slide%20and%20Attack")
SCRIPT_spam_homing_beacon = checkForExempt("Spam%20Homing%20Beacon")
SCRIPT_spawn_point = checkForExempt("Spawn%20Point%20Control")
SCRIPT_spectral_bypass = checkForExempt("Spectral%20Skills%20Bypass")
SCRIPT_summoned_kami = checkForExempt("Summoned%20Skills%20Kami")
SCRIPT_teleport = checkForExempt("Teleport")
SCRIPT_timed_godmode = checkForExempt("Timed%20Godmode")
SCRIPT_tubi = checkForExempt("Tubi")
SCRIPT_unlimited_arrow_plat = checkForExempt("Unlimited%20Arrow%20Platter")
SCRIPT_unlimited_attack = checkForExempt("Unlimited%20Attack")
SCRIPT_unlimited_be = checkForExempt("Unlimited%20Blazing%20Extinction")
SCRIPT_vellum_freeze = checkForExempt("Vellum%20Freeze")
SCRIPT_vellum_freeze_v2 = checkForExempt("Vellum%20Freeze%20v2")
SCRIPT_wonderoid_connection = checkForExempt("Wonderoid%20Unlimited%20Connection")
SCRIPT_zoom = checkForExempt("Zoom")
end

stageScriptLoading()

if RequireScriptDownloading == 1 then
RequireScriptDownloading = 0
stageScriptLoading() -- run second time to actually load
end

function DownloadAllScripts()
  local answer = messageDialog("Are you sure you want to download all scripts from GitHub folder: " .. trainer_gameversion .. "?\n\nWarning: Current scripts in the local_scripts folder will be deleted!", mtWarning, mbYes, mbNo)
  if answer == mrYes then
  RequireScriptDownloading = 1
  removeAllCustomScripts()
  writeToLogFile("CONFIG", "Re-downloading all scripts from " .. direct_link)
  local result = http.getURL(direct_link .. "@Version")
  if result then
  if not string.match(result, "404: Not Found") then
  local newScript, err = io.open(TrainerOrigin .. "\\local_scripts\\@Version", "w+")
    if newScript then
    newScript:write(result)
    newScript:close()
    else
      writeToLogFile("CRITICAL", "Unable to create @Version file with error: " .. err)
    end
  end
  end
  stageScriptLoading()
  writeToLogFile("CONFIG", "Re-download finished")
  end
end

writeToLogFile(false, "/*************************************************************************************/\n")

writeToLogFile("CONFIG", totalLoaded .. " scripts successfully loaded; " .. totalNotWorking .. " scripts failed to load; " .. totalExempted .. " scripts exempted")

--check and disable
if trainer_disablenotworking == 1 then
writeToLogFile("INFO", "Disable Not Working setting is enabled. Disabling all scripts that are not working.")

if checkNotWorking(SCRIPT_air_hit) then
Simple.MobVacX.Enabled = false
Simple.MobVacY.Enabled = false
Simple.AirHitMobVac.Enabled = false
end
if checkNotWorking(SCRIPT_air_loot) then
Simple.AirLoot.Enabled = false
end
if checkNotWorking(SCRIPT_attack_on_rope) then
Simple.AirCheckAttackOnRope.Enabled = false
end
if checkNotWorking(SCRIPT_auto_aggro) then
Simple.AutoAggro.Enabled = false
end
if checkNotWorking(SCRIPT_auto_attack) then
Simple.AutoAttack.Enabled = false
Simple.AutoAttackKey.Enabled = false
Simple.AttackDelay.Enabled = false
end
if checkNotWorking(SCRIPT_auto_ark_coins) then
Simple.AutoClaimArkCoins.Enabled = false
end
if checkNotWorking(SCRIPT_auto_fam) then
Simple.AutoFamiliar.Enabled = false
Simple.AutoFamiliarChoice.Enabled = false
Simple.OtherFamiliarID.Enabled = false
end
if checkNotWorking(SCRIPT_auto_hpmp) then
Simple.AutoHPMP.Enabled = false
Simple.AutoHPKey.Enabled = false
Simple.AutoMPKey.Enabled = false
Simple.AutoHPValue.Enabled = false
Simple.AutoMPValue.Enabled = false
end
if checkNotWorking(SCRIPT_auto_inner_ability) then
Simple.AutoInnerAbility.Enabled = false
Simple.InnerAbilityDelay.Enabled = false
end
if checkNotWorking(SCRIPT_auto_key1) and checkNotWorking(SCRIPT_auto_key1_v2) then
Simple.AutoKey1.Enabled = false
Simple.AutoKeyType.Enabled = false
Simple.AutoKey1Value.Enabled = false
Simple.AutoKey1Delay.Enabled = false
end
if checkNotWorking(SCRIPT_auto_offline) then
Simple.AutoOffline.Enabled = false
end
if checkNotWorking(SCRIPT_auto_pet_feed) then
Simple.AutoPetFeed.Enabled = false
end
if checkNotWorking(SCRIPT_auto_portal) then
Simple.AutoPortal.Enabled = false
end
if checkNotWorking(SCRIPT_auto_terminate) then
Simple.AutoTerminate.Enabled = false
end
if checkNotWorking(SCRIPT_beholder_inf_heal) then
Simple.BeholderInfiniteHeal.Enabled = false
end
if checkNotWorking(SCRIPT_boss_godmode) then
Simple.BossGodmode.Enabled = false
end
if checkNotWorking(SCRIPT_clear_field_ui) then
Simple.ClearFieldUI.Enabled = false
end
if checkNotWorking(SCRIPT_const_be_attack) then
Simple.ConstantBlazingExtinctionAttack.Enabled = false
end
if checkNotWorking(SCRIPT_disable_pet_return) then
Simple.DisablePetReturn.Enabled = false
end
if checkNotWorking(SCRIPT_dragon_breath) then
Simple.DragonBreathFusionAttack.Enabled = false
end
if checkNotWorking(SCRIPT_enable_disabled) then
Simple.EnableDisabledButtons.Enabled = false
end
if checkNotWorking(SCRIPT_fam_no_delay_atk) then
Simple.FamiliarNoDelayAttack.Enabled = false
end
if checkNotWorking(SCRIPT_fast_pet_loot) then
Simple.FastPetLoot.Enabled = false
end
if checkNotWorking(SCRIPT_force_summons_attack) then
Simple.ForceSummontoAttack.Enabled = false
Simple.FSADelay.Enabled = false
end
if checkNotWorking(SCRIPT_freeze_blazing_extinction) then
Simple.FreezeBlazingExtinction.Enabled = false
end
if checkNotWorking(SCRIPT_full_map_attack) then
Simple.FullMapAttack.Enabled = false
end
if checkNotWorking(SCRIPT_godmode) then
Simple.GodMode.Enabled = false
end
if checkNotWorking(SCRIPT_hide_most_ani) then
Simple.HideMostSkillAnimation.Enabled = false
end
if checkNotWorking(SCRIPT_hide_nametags) then
Simple.HideNametags.Enabled = false
end
if checkNotWorking(SCRIPT_hide_player_damage) then
Simple.HidePlayerDamage.Enabled = false
end
if checkNotWorking(SCRIPT_hyper_rock_crc) then
Simple.HyperRockCRCBypass.Enabled = false
Simple.HyperRockMapID.Enabled = false
end
if checkNotWorking(SCRIPT_infinite_blaster) then
Simple.InfiniteBlasterBullets.Enabled = false
end
if checkNotWorking(SCRIPT_infinite_familiar) then
Simple.InfiniteFamiliar.Enabled = false
end
if checkNotWorking(SCRIPT_instant_collision) then
Simple.InstantCollision.Enabled = false
end
if checkNotWorking(SCRIPT_instant_drop) then
Simple.InstantDrop.Enabled = false
end
if checkNotWorking(SCRIPT_instant_final_psychic) then
Simple.InstantFinalPsychicSmash.Enabled = false
end
if checkNotWorking(SCRIPT_instant_final_slash) then
Simple.InstantFinalSlash.Enabled = false
end
if checkNotWorking(SCRIPT_instant_spawn_be) then
Simple.InstantSpawnBlazingExtinction.Enabled = false
end
if checkNotWorking(SCRIPT_item_filter) then
Simple.ItemFilter.Enabled = false
end
if checkNotWorking(SCRIPT_jr_boogie_mp) then
Simple.JrBoogieUnlimitedMP.Enabled = false
Simple.BoogieMPValue.Enabled = false
end
if checkNotWorking(SCRIPT_jump_down) then
Simple.JumpDownAnywhere.Enabled = false
end
if checkNotWorking(SCRIPT_kami) then
Simple.Kami.Enabled = false
Simple.KamiX.Enabled = false
Simple.KamiY.Enabled = false
end
if checkNotWorking(SCRIPT_level_ptr) then
Simple.LevelPointer.Enabled = false
end
if checkNotWorking(SCRIPT_logovideo_skip) then
Simple.LogoVideoSkip.Enabled = false
end
if checkNotWorking(SCRIPT_mach_no_delay) then
Simple.MachNoDelay.Enabled = false
end
if checkNotWorking(SCRIPT_map_rusher) then
Simple.MapRusher.Enabled = false
end
if checkNotWorking(SCRIPT_map_speed_up) then
Simple.MapSpeedUp.Enabled = false
end
if checkNotWorking(SCRIPT_mesos_ptr) then
Simple.MesosPointer.Enabled = false
end
if checkNotWorking(SCRIPT_miss_godmode) then
Simple.MissGodmode.Enabled = false
end
if checkNotWorking(SCRIPT_mob_confusion) then
Simple.MobConfusion.Enabled = false
end
if checkNotWorking(SCRIPT_mob_control) then
Simple.MobControl.Enabled = false
Simple.MobControlValues.Enabled = false
end
if checkNotWorking(SCRIPT_mob_disarm) then
Simple.MobDisarm.Enabled = false
end
if checkNotWorking(SCRIPT_mob_fall_down) then
Simple.MobFallDown.Enabled = false
end
if checkNotWorking(SCRIPT_mob_filter) then
Simple.MobFilter.Enabled = false
Simple.MobFilterList.Enabled = false
end
if checkNotWorking(SCRIPT_mob_freeze) then
Simple.MobFreeze.Enabled = false
end
if checkNotWorking(SCRIPT_mob_speed_up) then
Simple.MobSpeedUp.Enabled = false
end
if checkNotWorking(SCRIPT_monkey_spirits) and checkNotWorking(SCRIPT_monkey_spirits_v2) then
Simple.MonkeySpiritsNoDelay.Enabled = false
Simple.MonkeySpiritsType.Enabled = false
Simple.MonkeySpiritsDelay.Enabled = false
end
if checkNotWorking(SCRIPT_monkey_spirits_shiki) then
Simple.MonkeySpiritswithShikigamiHaunting.Enabled = false
end
if checkNotWorking(SCRIPT_mouse_cam_control) then
Simple.MouseCameraControl.Enabled = false
end
if checkNotWorking(SCRIPT_mscrc_bypass) then
Simple.MSCRCBypass.Enabled = false
end
if checkNotWorking(SCRIPT_no_background) then
Simple.NoBackground.Enabled = false
end
if checkNotWorking(SCRIPT_no_blazing_effect) then
Simple.NoBlazingExtinctionEffect.Enabled = false
end
if checkNotWorking(SCRIPT_no_blue_boxes) then
Simple.NoBlueBoxes.Enabled = false
end
if checkNotWorking(SCRIPT_no_catch_breath) then
Simple.NoCatchBreath.Enabled = false
end
if checkNotWorking(SCRIPT_no_combo_ani) then
Simple.NoComboAnimation.Enabled = false
end
if checkNotWorking(SCRIPT_no_cooldown) then
Simple.NoCooldown.Enabled = false
end
if checkNotWorking(SCRIPT_no_dc_popup) then
Simple.NoDCPopup.Enabled = false
end
if checkNotWorking(SCRIPT_no_delay_arrow_plat) then
Simple.NoDelayArrowPlatter.Enabled = false
Simple.ArrowPlatterDelay.Enabled = false
end
if checkNotWorking(SCRIPT_no_delay_be) then
Simple.NoDelayBlazingExtinction.Enabled = false
end
if checkNotWorking(SCRIPT_no_delay_fj) then
Simple.NoDelayFlashJump.Enabled = false
end
if checkNotWorking(SCRIPT_no_delay_ingame_dir) then
Simple.NoDelayIngameDirectionEvent.Enabled = false
end
if checkNotWorking(SCRIPT_no_fade_stages) then
Simple.NoFadeStages.Enabled = false
end
if checkNotWorking(SCRIPT_no_item_floating) then
Simple.NoItemFloating.Enabled = false
end
if checkNotWorking(SCRIPT_no_loot_ani) then
Simple.NoLootAnimation.Enabled = false
end
if checkNotWorking(SCRIPT_no_mob_reaction) then
Simple.NoMobReaction.Enabled = false
end
if checkNotWorking(SCRIPT_no_mob_animation) then
Simple.NoMobSpawnDeathAnimation.Enabled = false
end
if checkNotWorking(SCRIPT_no_multikill) then
Simple.NoMultiKill.Enabled = false
end
if checkNotWorking(SCRIPT_no_platform) then
Simple.NoPlatform.Enabled = false
end
if checkNotWorking(SCRIPT_no_skill_sound) then
Simple.NoSkillSound.Enabled = false
end
if checkNotWorking(SCRIPT_no_weather) then
Simple.NoWeather.Enabled = false
end
if checkNotWorking(SCRIPT_perfect_stance) then
Simple.PerfectStance.Enabled = false
end
if checkNotWorking(SCRIPT_pet_feed) then
Simple.PetFeed.Enabled = false
Simple.PetFeedKey.Enabled = false
Simple.PetFeedFullness.Enabled = false
end
if checkNotWorking(SCRIPT_pet_loot) then
Simple.PetLoot.Enabled = false
Simple.PetLootDelay.Enabled = false
end
if checkNotWorking(SCRIPT_showhide_npcs) then
Simple.ShowHideNPCs.Enabled = false
Simple.ChooseNPCVisible.Enabled = false
end
if checkNotWorking(SCRIPT_skill_injection) and checkNotWorking(SCRIPT_skill_injection_v2) and checkNotWorking(SCRIPT_magic_injection) and checkNotWorking(SCRIPT_melee_injection) and checkNotWorking(SCRIPT_shoot_injection) then
Simple.SkillInjection.Enabled = false
Simple.InjectionType.Enabled = false
Simple.SkillID.Enabled = false
Simple.SkillDelay.Enabled = false
end
if checkNotWorking(SCRIPT_skill_ptr) then
Simple.SkillPointer.Enabled = false
end
if checkNotWorking(SCRIPT_slide_attack) then
Simple.SlideandAttack.Enabled = false
end
if checkNotWorking(SCRIPT_spam_homing_beacon) then
Simple.SpamHomingBeacon.Enabled = false
end
if checkNotWorking(SCRIPT_spawn_point) then
Simple.SpawnPointControl.Enabled = false
end
if checkNotWorking(SCRIPT_spectral_bypass) then
Simple.SpectralSkillsBypass.Enabled = false
end
if checkNotWorking(SCRIPT_summoned_kami) then
Simple.SummonedSkillsKami.Enabled = false
end
if checkNotWorking(SCRIPT_teleport) then
Simple.Teleport.Enabled = false
end
if checkNotWorking(SCRIPT_timed_godmode) then
Simple.TimedGodmode.Enabled = false
Simple.TimedGodmodeTime.Enabled = false
end
if checkNotWorking(SCRIPT_tubi) then
Simple.Tubi.Enabled = false
end
if checkNotWorking(SCRIPT_unlimited_arrow_plat) then
Simple.UnlimitedArrowPlatter.Enabled = false
end
if checkNotWorking(SCRIPT_unlimited_attack) then
Simple.UnlimitedAttack.Enabled = false
end
if checkNotWorking(SCRIPT_unlimited_be) then
Simple.UnlimitedBlazingExtinction.Enabled = false
end
if checkNotWorking(SCRIPT_vellum_freeze) then
Simple.VellumFreeze.Enabled = false
end
if checkNotWorking(SCRIPT_vellum_freeze_v2) then
Simple.VellumFreezev2.Enabled = false
end
if checkNotWorking(SCRIPT_wonderoid_connection) then
Simple.WonderoidUnlimitedConnection.Enabled = false
end
if checkNotWorking(SCRIPT_zoom) then
Simple.Zoom.Enabled = false
end

end

b = "https://sites.google.com/"

activateOnFullLoad()
Simple.CELabel12.Caption = "Load.ini defined " .. Simple.CEListBox1.Items.Count .. " scripts, of which " .. totalLoaded .. " were loaded. See Log section for more info."
if noAccessToLogFile then
  messageDialog("There's an issue with your system preventing Simple Trainer from reading/writing to files (in order to generate a Log file). You must disable 'Enable Log' setting [to remove this warning message].\n\nLoad.ini will be retrieved from GitHub instead (will attempt to load all scripts on file).", mtWarning, mbOK)
end

switchTrainerTips = switch {
  [1] = function (x) Simple.CELabel11.Caption = "[Simple] Disconnecting frequently in a short period will cause auto bans." end,
  [2] = function (x) Simple.CELabel11.Caption = "[Simple] Wondering what a script does? Hover over the checkbox to see help hints." end,
  [3] = function (x) Simple.CELabel11.Caption = "[Simple] Always monitor your character's activity while using this trainer." end,
  [4] = function (x) Simple.CELabel11.Caption = "[Simple] Enjoy using Simple Trainer? Drop a donation to show support!" end,
  [5] = function (x) Simple.CELabel11.Caption = "[Simple] Contribute back by maintaining the GitHub Script Bank." end,
  [6] = function (x) Simple.CELabel11.Caption = "[Simple] Disabled (gray) checkboxes means the script is unavailable." end,
  [7] = function (x) Simple.CELabel11.Caption = "[Simple] G_site.net is the only official website for this trainer." end,
  [8] = function (x) Simple.CELabel11.Caption = "[Simple] Have a Secret Code? Enter it in the Settings!" end,
  [9] = function (x) Simple.CELabel11.Caption = "[Simple] Simple Trainer is currently in BETA. Issues are to be expected during use." end,
  [10] = function (x) Simple.CELabel11.Caption = "[Simple] You are responsible for any consequences that may happen during use of this trainer." end,
  [11] = function (x) Simple.CELabel11.Caption = "[Simple] You can improve the trainer's initialization time by editing Load.ini." end,
  [12] = function (x) Simple.CELabel11.Caption = "[Simple] Need help? There are tons of resources available on G_site.net." end,
  [13] = function (x) Simple.CELabel11.Caption = "[Simple] Need help? Let us know what's wrong in our Discord's #support channel." end,
  [14] = function (x) Simple.CELabel11.Caption = "[Simple] Got feedback? Provide useful feedback so we can improve the trainer!" end,
  [15] = function (x) Simple.CELabel11.Caption = "[Simple] Closing the trainer won't disable anything. Use 'Disable All' first." end,
  [16] = function (x) Simple.CELabel11.Caption = "[Simple] Trainer using a lot of memory? Clear some by going to File > Clean Memory." end,
  [17] = function (x) Simple.CELabel11.Caption = "[Simple] Something acting up with the trainer? A restart of the trainer should fix it." end,
  [18] = function (x) Simple.CELabel11.Caption = "[Simple] Have your own GitHub repo? Change up the GitHub Settings and you're good to go." end,
  [19] = function (x) Simple.CELabel11.Caption = "[Simple] Certain scripts cannot be used together. Read the help hints for any notices." end,
  [20] = function (x) Simple.CELabel11.Caption = "[Simple] You're reading Simple Trainer tips!" end,
  [21] = function (x) Simple.CELabel11.Caption = "[Simple] Got more tips to add? Send some over on our Discord." end,
  [22] = function (x) Simple.CELabel11.Caption = "[Simple] Be sure to make a new Profile to save any enabled script states." end,
  [23] = function (x) Simple.CELabel11.Caption = "[Simple] The trainer only needs scripts to function, so keep them updated!" end,
  [24] = function (x) Simple.CELabel11.Caption = "[Simple] Check out the trainer's About and Credits by pressing the (i) icon on the left." end,
  [25] = function (x) Simple.CELabel11.Caption = "[Simple] Make this trainer truly unique by utilizing the Lua Injection feature." end,
  [26] = function (x) Simple.CELabel11.Caption = "[Simple] No need for Cheat Engine! Use the trainer's built-in Auto Assembler for scripts." end,
  [27] = function (x) Simple.CELabel11.Caption = "[Simple] You should do a full restart of your PC regularly to avoid issues." end,
  [28] = function (x) Simple.CELabel11.Caption = "[Simple] Have suggestions for the trainer? Leave a post on the forums or on our Discord." end,
  [29] = function (x) Simple.CELabel11.Caption = "[Simple] Be careful! Cheating/usage of this trainer can warrant a ban in Game." end,
  [30] = function (x) Simple.CELabel11.Caption = "[Simple] Never use Simple Trainer if you do not have a working anti-cheat bypass." end,
  [31] = function (x) Simple.CELabel11.Caption = "[Simple] Do not violate the End User License Agreement. Doing so may result in suspension!" end,
  [32] = function (x) Simple.CELabel11.Caption = "[Simple] Limited suspension will result in the inabilty to use most features of the trainer." end,
  [33] = function (x) Simple.CELabel11.Caption = "[Simple] Comments, questions, or suggestions? Send some in through the [About] section." end,
  [34] = function (x) Simple.CELabel11.Caption = "[Simple] We'd like to hear from YOU! Send a comment in through the [About] section!" end,
  [35] = function (x) Simple.CELabel11.Caption = "[Simple] Make this trainer truly YOURS with the NEW Lua Injection feature!" end,
  [36] = function (x) Simple.CELabel11.Caption = "[Simple] Customizations limited only by imagination: the Lua Injection feature is out now!" end,
  [37] = function (x) Simple.CELabel11.Caption = "[Simple] Searching without the hassle: the ID Search Tool feature is ready for you." end,
  [38] = function (x) Simple.CELabel11.Caption = "[Simple] Comments, questions, or suggestions? Send some in through the [About] section." end,
  default = function (x) Simple.CELabel11.Caption = "[Simple] Simple Trainer is developed by zeka (c) 2018 - 2019. All rights reserved" end,
}

-- make new randomseed
math.randomseed(tonumber(tostring(os.time()):reverse():sub(1,6)))

function getSwitchTips()
  randNum = math.random(40)
  switchTrainerTips:case(randNum)
end

c = "site/zekahost/host/"

tipTimer = createTimer(nil)
timer_onTimer(tipTimer, getSwitchTips)
timer_setInterval(tipTimer, 10000)
timer_setEnabled(tipTimer, true)

function AirHitMobVac(AirHitMV)
local script_name = "Air Hit Mob Vac"
local SCRIPT_air_hit = SCRIPT_air_hit:gsub("%%arg1", Simple.MobVacX.Text)
SCRIPT_air_hit = SCRIPT_air_hit:gsub("%%arg2", Simple.MobVacY.Text)
if not checkNotWorking(SCRIPT_air_hit) then
  if AirHitMV.checked then
    if checkAutoBan(SCRIPT_air_hit) then
      if messageDialog(script_name .. ' may cause an auto ban under varying conditions!!\n\nEnable anyways?', mtWarning, mbYes, mbNo, 0) == mrYes then
        AHMVEnabled, AHMVDisabled = autoAssemble(SCRIPT_air_hit, false)
        if (AHMVEnabled) then
        writeToLogFile("INFO", "Enabled " .. script_name .. " after auto ban warning (params: " .. Simple.MobVacX.Text .. "," .. Simple.MobVacY.Text .. ")")
        else
        writeToLogFile("INFO", "Failed to enable " .. script_name .. " (params: " .. Simple.MobVacX.Text .. "," .. Simple.MobVacY.Text .. ")")
        end
        AHMVBoxes()
      else
        AirHitMV.state = 0
      end
    else
      AHMVEnabled, AHMVDisabled = autoAssemble(SCRIPT_air_hit, false)
      if (AHMVEnabled) then
      writeToLogFile("INFO", "Enabled " .. script_name .. " (params: " .. Simple.MobVacX.Text .. "," .. Simple.MobVacY.Text .. ")")
      else
      writeToLogFile("WARNING", "Failed to enable " .. script_name .. " (params: " .. Simple.MobVacX.Text .. "," .. Simple.MobVacY.Text .. ")")
      end
      AHMVBoxes()
    end
    else
        if (AHMVEnabled) then
        autoAssemble(SCRIPT_air_hit, AHMVDisabled)
        writeToLogFile("INFO", "Disabled " .. script_name)
        end
        AHMVBoxes()
    end
  else
    showMessage(script_name .. " is currently not working. Disabling...")
    AirHitMV.state = 0
    AirHitMV.Enabled = false
    Simple.MobVacX.Enabled = false
    Simple.MobVacY.Enabled = false
    writeToLogFile("WARNING", script_name .. " is not working. Disabling this option for your safety...")
  end
end

function AHMVBoxes()
if Simple.AirHitMobVac.Checked then
Simple.MobVacX.ReadOnly = true
Simple.MobVacY.ReadOnly = true
else
Simple.MobVacX.ReadOnly = false
Simple.MobVacY.ReadOnly = false
end
end

Simple.AirHitMobVac.OnChange = enableThis("AHMV", SCRIPT_air_hit, AHMVE, AHMVD, {Simple.MobVacX.Text, Simple.MobVacY.Text})

function enableThis(name, script, enable, disable, paramsTable)
    if paramsTable ~= nil and #paramsTable ~= 0 then
        params = " (params: "
        for i=1,#paramsTable do
            params = params .. paramsTable[i]
            if #paramsTable[i+1] ~= nil then
                params = params .. ","
            end
        end
        params = params .. ")"
    end
    if not checkNotWorking(script) then
        if AirHitMV.checked then
            _G[enable], _G[disable] = autoAssemble(script, false)
                if (_G[enable]) then
                    writeToLogFile("INFO", "Enabled " .. name .. params)
                else
                    writeToLogFile("WARNING", "Failed to enable " .. name .. params)
                end
                AHMVBoxes()
            end
        else
            if (_G[enable]) then
                autoAssemble(script, _G[disable])
                writeToLogFile("INFO", "Disabled " .. name)
            end
            AHMVBoxes()
        end
    else
        showMessage(name .. " is currently not working. Disabling...")
        AirHitMV.state = 0
        AirHitMV.Enabled = false
        Simple.MobVacX.Enabled = false
        Simple.MobVacY.Enabled = false
        writeToLogFile("WARNING", name .. " is not working. Disabling this option for your safety...")
    end
end

function AirLoot(AirLootz)
local script_name = "Air Loot"
if not checkNotWorking(SCRIPT_air_loot) then
  if AirLootz.checked then
    if checkAutoBan(SCRIPT_air_loot) then
      if messageDialog(script_name .. ' may cause an auto ban under varying conditions!!\n\nEnable anyways?', mtWarning, mbYes, mbNo, 0) == mrYes then
        AirLEnabled, AirLDisabled = autoAssemble(SCRIPT_air_loot, false)
        if (AirLEnabled) then
        writeToLogFile("INFO", "Enabled " .. script_name .. " after auto ban warning")
        else
        writeToLogFile("WARNING", "Failed to enable " .. script_name)
        messageDialog("A problem occurred when attempting to enable " .. script_name .. ". It will not be enabled.", mtError, mbOK)
        AirLootz.state = 0
        end
      else
        AirLootz.state = 0
      end
    else
      AirLEnabled, AirLDisabled = autoAssemble(SCRIPT_air_loot, false)
      if (AirLEnabled) then
      writeToLogFile("INFO", "Enabled " .. script_name)
      else
      writeToLogFile("WARNING", "Failed to enable " .. script_name)
      messageDialog("A problem occurred when attempting to enable " .. script_name .. ". It will not be enabled.", mtError, mbOK)
      AirLootz.state = 0
      end
    end
    else
        if (AirLEnabled) then
        autoAssemble(SCRIPT_air_loot, AirLDisabled)
        writeToLogFile("INFO", "Disabled " .. script_name)
        end
    end
  else
    showMessage(script_name .. " is currently not working. Disabling...")
    AirLootz.state = 0
    AirLootz.Enabled = false
    writeToLogFile("WARNING", script_name .. " is not working. Disabling this option for your safety...")
  end
end

function AirCheckAndAttackOnRope(AirCheckAttackRope)
local script_name = "Air Check and Attack On Rope"
if not checkNotWorking(ACAOR) then
  if MFallDown.checked then
    if checkAutoBan(ACAOR) then
      if messageDialog(script_name .. ' may cause an auto ban under varying conditions!!\n\nEnable anyways?', mtWarning, mbYes, mbNo, 0) == mrYes then
        AOREnabled, AORDisabled = autoAssemble(ACAOR, false)
        if (AOREnabled) then
        writeToLogFile("INFO", "Enabled " .. script_name .. " after auto ban warning")
        else
        writeToLogFile("WARNING", "Failed to enable " .. script_name)
        messageDialog("A problem occurred when attempting to enable " .. script_name .. ". It will not be enabled.", mtError, mbOK)
        MFallDown.state = 0
        end
      else
        MFallDown.state = 0
      end
    else
      AOREnabled, AORDisabled = autoAssemble(ACAOR, false)
      if (AOREnabled) then
      writeToLogFile("INFO", "Enabled " .. script_name)
      else
      writeToLogFile("WARNING", "Failed to enable " .. script_name)
      messageDialog("A problem occurred when attempting to enable " .. script_name .. ". It will not be enabled.", mtError, mbOK)
      MFallDown.state = 0
      end
    end
    else
        if (AOREnabled) then
        autoAssemble(ACAOR, AORDisabled)
        writeToLogFile("INFO", "Disabled " .. script_name)
        end
    end
  else
    showMessage(script_name .. " is currently not working. Disabling...")
    MFallDown.state = 0
    MFallDown.Enabled = false
    writeToLogFile("WARNING", script_name .. " is not working. Disabling this option for your safety...")
  end
end

function AutoAttack(AutoAttack)
local script_name = "Auto Attack"
local SCRIPT_auto_attack = SCRIPT_auto_attack:gsub("%%arg1", CheckAttackKeyValue())
SCRIPT_auto_attack = SCRIPT_auto_attack:gsub("%%arg2", Simple.AttackDelay.Text)
if not checkNotWorking(SCRIPT_auto_attack) then
  if AutoAttack.checked then
    if checkAutoBan(SCRIPT_auto_attack) then
      if messageDialog(script_name .. ' may cause an auto ban under varying conditions!!\n\nEnable anyways?', mtWarning, mbYes, mbNo, 0) == mrYes then
        AAEnabled, AADisabled = autoAssemble(SCRIPT_auto_attack, false)
        if (AAEnabled) then
        writeToLogFile("INFO", "Enabled " .. script_name .. " after auto ban warning (params: " .. Simple.AutoAttackKey.Items[Simple.AutoAttackKey.ItemIndex] .. " (" .. CheckAttackKeyValue() .. ")," .. Simple.AttackDelay.Text .. ")")
        else
        writeToLogFile("WARNING", "Failed to enable " .. script_name .. " (params: " .. Simple.AutoAttackKey.Items[Simple.AutoAttackKey.ItemIndex] .. " (" .. CheckAttackKeyValue() .. ")," .. Simple.AttackDelay.Text .. ")")
        end
        AutoAtkBoxes()
      else
        AutoAttack.state = 0
      end
    else
      AAEnabled, AADisabled = autoAssemble(SCRIPT_auto_attack, false)
      if (AAEnabled) then
      writeToLogFile("INFO", "Enabled " .. script_name .. " (params: " .. Simple.AutoAttackKey.Items[Simple.AutoAttackKey.ItemIndex] .. " (" .. CheckAttackKeyValue() .. ")," .. Simple.AttackDelay.Text .. ")")
      else
      writeToLogFile("WARNING", "Failed to enable " .. script_name .. " (params: " .. Simple.AutoAttackKey.Items[Simple.AutoAttackKey.ItemIndex] .. " (" .. CheckAttackKeyValue() .. ")," .. Simple.AttackDelay.Text .. ")")
      end
      AutoAtkBoxes()
    end
    else
        if (AAEnabled) then
        autoAssemble(SCRIPT_auto_attack, AADisabled)
        writeToLogFile("INFO", "Disabled " .. script_name)
        end
        AutoAtkBoxes()
    end
  else
    showMessage(script_name .. " is currently not working. Disabling...")
    AutoAttack.state = 0
    AutoAttack.Enabled = false
    Simple.AutoAttackKey.Enabled = false
    Simple.AttackDelay.Enabled = false
    writeToLogFile("WARNING", script_name .. " is not working. Disabling this option for your safety...")
  end
end

function CheckAttackKeyValue()
local index = tostring(Simple.AutoAttackKey.ItemIndex)
local value = "0"
  if index == '0' then
    value = "10"
  elseif index == '1' then
    value = "11"
  elseif index == '2' then
    value = "12"
  elseif index == '3' then
    value = '20'
  elseif index == '4' then
    value = '21'
  elseif index == '5' then
    value = '22'
  elseif index == '6' then
    value = '23'
  elseif index == '7' then
    value = '24'
  elseif index == '8' then
    value = '2D'
  elseif index == '9' then
    value = '2E'
  elseif index == '10' then
    value = '30'
  elseif index == '11' then
    value = '31'
  elseif index == '12' then
    value = '32'
  elseif index == '13' then
    value = '33'
  elseif index == '14' then
    value = '34'
  elseif index == '15' then
    value = '35'
  elseif index == '16' then
    value = '36'
  elseif index == '17' then
    value = '37'
  elseif index == '18' then
    value = '38'
  elseif index == '19' then
    value = '39'
  elseif index == '20' then
    value = '41'
  elseif index == '21' then
    value = '42'
  elseif index == '22' then
    value = '43'
  elseif index == '23' then
    value = '44'
  elseif index == '24' then
    value = '45'
  elseif index == '25' then
    value = '46'
  elseif index == '26' then
    value = '47'
  elseif index == '27' then
    value = '48'
  elseif index == '28' then
    value = '49'
  elseif index == '29' then
    value = '4A'
  elseif index == '30' then
    value = '4B'
  elseif index == '31' then
    value = '4C'
  elseif index == '32' then
    value = '4D'
  elseif index == '33' then
    value = '4E'
  elseif index == '34' then
    value = '4F'
  elseif index == '35' then
    value = '50'
  elseif index == '36' then
    value = '51'
  elseif index == '37' then
    value = '52'
  elseif index == '38' then
    value = '53'
  elseif index == '39' then
    value = '54'
  elseif index == '40' then
    value = '55'
  elseif index == '41' then
    value = '56'
  elseif index == '42' then
    value = '57'
  elseif index == '43' then
    value = '58'
  elseif index == '44' then
    value = '59'
  elseif index == '45' then
    value = '5A'
  elseif index == '46' then
    value = '70'
  elseif index == '47' then
    value = '71'
  elseif index == '48' then
    value = '72'
  elseif index == '49' then
    value = '73'
  elseif index == '50' then
    value = '74'
  elseif index == '51' then
    value = '75'
  elseif index == '52' then
    value = '76'
  elseif index == '53' then
    value = '77'
  elseif index == '54' then
    value = '78'
  elseif index == '55' then
    value = '79'
  elseif index == '56' then
    value = '7A'
  elseif index == '57' then
    value = '7B'
  end
  return value
end

function AutoAtkBoxes()
if Simple.AutoAttack.Checked then
Simple.AutoAttackKey.Enabled = false
Simple.AttackDelay.ReadOnly = true
else
Simple.AutoAttackKey.Enabled = true
Simple.AttackDelay.ReadOnly = false
end
end

function AutoAggro(AAggro)
local script_name = "Auto Aggro"
if not checkNotWorking(SCRIPT_auto_aggro) then
  if AAggro.checked then
    if checkAutoBan(SCRIPT_auto_aggro) then
      if messageDialog(script_name .. ' may cause an auto ban under varying conditions!!\n\nEnable anyways?', mtWarning, mbYes, mbNo, 0) == mrYes then
        AggroEnabled, AggroDisabled = autoAssemble(SCRIPT_auto_aggro, false)
        if (AggroEnabled) then
			writeToLogFile("INFO", "Enabled " .. script_name .. " after auto ban warning")
			else
			writeToLogFile("WARNING", "Failed to enable " .. script_name)
			end
      else
        AAggro.state = 0
      end
    else
      AggroEnabled, AggroDisabled = autoAssemble(SCRIPT_auto_aggro, false)
      if (AggroEnabled) then
      writeToLogFile("INFO", "Enabled " .. script_name)
      else
      writeToLogFile("WARNING", "Failed to enable " .. script_name)
      end
    end
    else
        if (AggroEnabled) then
        autoAssemble(SCRIPT_auto_aggro, AggroDisabled)
        writeToLogFile("INFO", "Disabled " .. script_name)
        end
    end
  else
    showMessage(script_name .. " is currently not working. Disabling...")
    AAggro.state = 0
    AAggro.Enabled = false
    writeToLogFile("WARNING", script_name .. " is not working. Disabling this option for your safety...")
  end
end

function AutoClaimArkCoins(ClaimArkCoins)
local script_name = "Auto Claim Ark Coins"
if not checkNotWorking(SCRIPT_auto_ark_coins) then
  if ClaimArkCoins.checked then
    if checkAutoBan(SCRIPT_auto_ark_coins) then
      if messageDialog(script_name .. ' may cause an auto ban under varying conditions!!\n\nEnable anyways?', mtWarning, mbYes, mbNo, 0) == mrYes then
        AutoArkCoinEnabled, AutoArkCoinDisabled = autoAssemble(SCRIPT_auto_ark_coins, false)
        if (AutoArkCoinEnabled) then
        writeToLogFile("INFO", "Enabled " .. script_name .. " after auto ban warning")
        else
        writeToLogFile("WARNING", "Failed to enable " .. script_name)
        messageDialog("A problem occurred when attempting to enable " .. script_name .. ". It will not be enabled.", mtError, mbOK)
        ClaimArkCoins.state = 0
        end
      else
        ClaimArkCoins.state = 0
      end
    else
      AutoArkCoinEnabled, AutoArkCoinDisabled = autoAssemble(SCRIPT_auto_ark_coins, false)
      if (AutoArkCoinEnabled) then
      writeToLogFile("INFO", "Enabled " .. script_name)
      else
      writeToLogFile("WARNING", "Failed to enable " .. script_name)
      messageDialog("A problem occurred when attempting to enable " .. script_name .. ". It will not be enabled.", mtError, mbOK)
      ClaimArkCoins.state = 0
      end
    end
    else
        if (AutoArkCoinEnabled) then
        autoAssemble(SCRIPT_auto_ark_coins, AutoArkCoinDisabled)
        writeToLogFile("INFO", "Disabled " .. script_name)
        end
    end
  else
    showMessage(script_name .. " is currently not working. Disabling...")
    ClaimArkCoins.state = 0
    ClaimArkCoins.Enabled = false
    writeToLogFile("WARNING", script_name .. " is not working. Disabling this option for your safety...")
  end
end

function AutoFamiliar(AutoFam)
local script_name = "Auto Familiar"
local SCRIPT_auto_fam = SCRIPT_auto_fam:gsub("%%arg1", CheckAutoFamID())
if not checkNotWorking(SCRIPT_auto_fam) then
  if AutoFam.checked then
    if checkAutoBan(SCRIPT_auto_fam) then
      if messageDialog(script_name .. ' may cause an auto ban under varying conditions!!\n\nEnable anyways?', mtWarning, mbYes, mbNo, 0) == mrYes then
        AutoFamEnabled, AutoFamDisabled = autoAssemble(SCRIPT_auto_fam, false)
        if (AutoFamEnabled) then
        writeToLogFile("INFO", "Enabled " .. script_name .. " after auto ban warning (params: " .. Simple.AutoFamiliarChoice.Items[Simple.AutoFamiliarChoice.ItemIndex] .. " (" .. CheckAutoFamID() .. "))")
        Simple.InfiniteFamiliar.Checked = true
        Simple.NoBlueBoxes.Checked = true
        else
        writeToLogFile("WARNING", "Failed to enable " .. script_name .. " (params: " .. Simple.AutoFamiliarChoice.Items[Simple.AutoFamiliarChoice.ItemIndex] .. " (" .. CheckAutoFamID() .. "))")
        end
        AutoFamBoxes()
      else
        AutoFam.state = 0
      end
    else
      AutoFamEnabled, AutoFamDisabled = autoAssemble(SCRIPT_auto_fam, false)
      if (AutoFamEnabled) then
      writeToLogFile("INFO", "Enabled " .. script_name .. " (params: " .. Simple.AutoFamiliarChoice.Items[Simple.AutoFamiliarChoice.ItemIndex] .. " (" .. CheckAutoFamID() .. "))")
      Simple.InfiniteFamiliar.Checked = true
      Simple.NoBlueBoxes.Checked = true
      else
      writeToLogFile("WARNING", "Failed to enable " .. script_name .. " (params: " .. Simple.AutoFamiliarChoice.Items[Simple.AutoFamiliarChoice.ItemIndex] .. " (" .. CheckAutoFamID() .. "))")
      end
      AutoFamBoxes()
    end
    else
        if (AutoFamEnabled) then
        autoAssemble(SCRIPT_auto_fam, AutoFamDisabled)
        writeToLogFile("INFO", "Disabled " .. script_name)
        end
        AutoFamBoxes()
    end
  else
    showMessage(script_name .. " is currently not working. Disabling...")
    AutoFam.state = 0
    AutoFam.Enabled = false
    Simple.AutoFamiliarChoice.Enabled = false
    Simple.OtherFamiliarID.Enabled = false
    writeToLogFile("WARNING", script_name .. " is not working. Disabling this option for your safety...")
  end
end

function CheckAutoFamID()
local index = tostring(Simple.AutoFamiliarChoice.ItemIndex)
local value = "0"
  if index == '0' then
    value = "0097FB67"
  elseif index == '1' then
    value = "0097FAA2"
  elseif index == '2' then
    value = "0097FB9E"
  elseif index == '3' then
    value = "0097FC04"
  elseif index == '4' then
    value = "0097FA6A"
  elseif index == '5' then
    value = "0097FA9A"
  elseif index == '6' then
    value = "0097FB32"
  elseif index == '7' then
    value = Simple.OtherFamiliarID.Text
  end
return value
end

function ChangeFamID()
  local index = tostring(Simple.AutoFamiliarChoice.ItemIndex)
  if index == '7' then
    Simple.OtherFamiliarID.Enabled = true
    else
    Simple.OtherFamiliarID.Enabled = false
  end
end

function AutoFamBoxes()
if Simple.AutoFamiliar.Checked then
Simple.AutoFamiliarChoice.Enabled = false
Simple.OtherFamiliarID.ReadOnly = true
else
Simple.AutoFamiliarChoice.Enabled = true
Simple.OtherFamiliarID.ReadOnly = false
end
end

function AutoHPMP(AutoPot)
local script_name = "Auto HP/MP"
local SCRIPT_auto_hpmp = SCRIPT_auto_hpmp:gsub("%%arg1", Simple.AutoHPValue.Text)
SCRIPT_auto_hpmp = SCRIPT_auto_hpmp:gsub("%%arg2", Simple.AutoMPValue.Text)
SCRIPT_auto_hpmp = SCRIPT_auto_hpmp:gsub("%%arg3", CheckAutoHPKey())
SCRIPT_auto_hpmp = SCRIPT_auto_hpmp:gsub("%%arg4", CheckAutoMPKey())
if not checkNotWorking(SCRIPT_auto_hpmp) then
  if AutoPot.checked then
    if checkAutoBan(SCRIPT_auto_hpmp) then
      if messageDialog(script_name .. ' may cause an auto ban under varying conditions!!\n\nEnable anyways?', mtWarning, mbYes, mbNo, 0) == mrYes then
        AHPMPEnabled, AHPMPDisabled = autoAssemble(SCRIPT_auto_hpmp, false)
        if (AHPMPEnabled) then
			writeToLogFile("INFO", "Enabled " .. script_name .. " after auto ban warning (params: " .. Simple.AutoHPKey.Items[Simple.AutoHPKey.ItemIndex] .. " (" .. CheckAutoHPKey() .. ")," .. Simple.AutoHPValue.Text .. "," .. Simple.AutoHPKey.Items[Simple.AutoHPKey.ItemIndex] .. " (" .. CheckAutoMPKey() .. ")," .. Simple.AutoMPValue.Text .. ")")
			else
			writeToLogFile("WARNING", "Failed to enable " .. script_name .. " (params: " .. Simple.AutoHPKey.Items[Simple.AutoHPKey.ItemIndex] .. " (" .. CheckAutoHPKey() .. ")," .. Simple.AutoHPValue.Text .. "," .. Simple.AutoHPKey.Items[Simple.AutoHPKey.ItemIndex] .. " (" .. CheckAutoMPKey() .. ")," .. Simple.AutoMPValue.Text .. ")")
			end
			AutoHPMPBoxes()
      else
        AutoPot.state = 0
      end
    else
      AHPMPEnabled, AHPMPDisabled = autoAssemble(SCRIPT_auto_hpmp, false)
      if (AHPMPEnabled) then
      writeToLogFile("INFO", "Enabled " .. script_name .. " (params: " .. Simple.AutoHPKey.Items[Simple.AutoHPKey.ItemIndex] .. " (" .. CheckAutoHPKey() .. ")," .. Simple.AutoHPValue.Text .. "," .. Simple.AutoHPKey.Items[Simple.AutoHPKey.ItemIndex] .. " (" .. CheckAutoMPKey() .. ")," .. Simple.AutoMPValue.Text .. ")")
      else
      writeToLogFile("WARNING", "Failed to enable " .. script_name .. " (params: " .. Simple.AutoHPKey.Items[Simple.AutoHPKey.ItemIndex] .. " (" .. CheckAutoHPKey() .. ")," .. Simple.AutoHPValue.Text .. "," .. Simple.AutoHPKey.Items[Simple.AutoHPKey.ItemIndex] .. " (" .. CheckAutoMPKey() .. ")," .. Simple.AutoMPValue.Text .. ")")
      end
      AutoHPMPBoxes()
    end
    else
        if (AHPMPEnabled) then
        autoAssemble(SCRIPT_auto_hpmp, AHPMPDisabled)
        writeToLogFile("INFO", "Disabled " .. script_name)
        end
        AutoHPMPBoxes()
    end
  else
    showMessage(script_name .. " is currently not working. Disabling...")
    Simple.AutoHPKey.Enabled = false
    Simple.AutoHPValue.Enabled = false
    Simple.AutoMPKey.Enabled = false
    Simple.AutoMPValue.Enabled = false
    AutoPot.state = 0
    AutoPot.Enabled = false
    writeToLogFile("WARNING", script_name .. " is not working. Disabling this option for your safety...")
  end
end

function AutoHPMPBoxes()
if Simple.AutoHPMP.Checked then
Simple.AutoHPKey.Enabled = false
Simple.AutoMPKey.Enabled = false
Simple.AutoHPValue.ReadOnly = true
Simple.AutoMPValue.ReadOnly = true
else
Simple.AutoHPKey.Enabled = true
Simple.AutoMPKey.Enabled = true
Simple.AutoHPValue.ReadOnly = false
Simple.AutoMPValue.ReadOnly = false
end
end

function CheckAutoHPKey()
local index = tostring(Simple.AutoHPKey.ItemIndex)
local value = "0"
  if index == '0' then
    value = "001D0000"
  elseif index == '1' then
    value = "002A0000"
  elseif index == '2' then
    value = "01520000"
  elseif index == '3' then
    value = '01530000'
  elseif index == '4' then
    value = '01470000'
  elseif index == '5' then
    value = '014F0000'
  elseif index == '6' then
    value = '01490000'
  elseif index == '7' then
    value = '01510000'
  elseif index == '8' then
    value = '00380000'
  elseif index == '9' then
    value = '002C0000'
  end
return value
end

function CheckAutoMPKey()
local index = tostring(Simple.AutoMPKey.ItemIndex)
local value = "0"
  if index == '0' then
    value = "001D0000"
  elseif index == '1' then
    value = "002A0000"
  elseif index == '2' then
    value = "01520000"
  elseif index == '3' then
    value = '01530000'
  elseif index == '4' then
    value = '01470000'
  elseif index == '5' then
    value = '014F0000'
  elseif index == '6' then
    value = '01490000'
  elseif index == '7' then
    value = '01510000'
  elseif index == '8' then
    value = '00380000'
  elseif index == '9' then
    value = '002C0000'
  end
return value
end

function AutoInnerAbility(InnerToLegendary)
local script_name = "Auto Inner Ability"
local SCRIPT_auto_inner_ability = SCRIPT_auto_inner_ability:gsub("%%arg1", Simple.InnerAbilityDelay.Text)
if not checkNotWorking(SCRIPT_auto_inner_ability) then
  if InnerToLegendary.checked then
    if checkAutoBan(SCRIPT_auto_inner_ability) then
      if messageDialog(script_name .. ' may cause an auto ban under varying conditions!!\n\nEnable anyways?', mtWarning, mbYes, mbNo, 0) == mrYes then
        AIAEnabled, AIADisabled = autoAssemble(SCRIPT_auto_inner_ability, false)
        if (AIAEnabled) then
        writeToLogFile("INFO", "Enabled " .. script_name .. " after auto ban warning (params: " .. Simple.InnerAbilityDelay.Text .. ")")
        else
        writeToLogFile("WARNING", "Failed to enable " .. script_name .. " (params: " .. Simple.InnerAbilityDelay.Text .. ")")
        messageDialog("A problem occurred when attempting to enable " .. script_name .. ". It will not be enabled.", mtError, mbOK)
        InnerToLegendary.state = 0
        end
      else
        InnerToLegendary.state = 0
      end
    else
      AIAEnabled, AIADisabled = autoAssemble(SCRIPT_auto_inner_ability, false)
      if (AIAEnabled) then
      writeToLogFile("INFO", "Enabled " .. script_name .. " (params: " .. Simple.InnerAbilityDelay.Text .. ")")
      else
      writeToLogFile("WARNING", "Failed to enable " .. script_name .. " (params: " .. Simple.InnerAbilityDelay.Text .. ")")
      messageDialog("A problem occurred when attempting to enable " .. script_name .. ". It will not be enabled.", mtError, mbOK)
      InnerToLegendary.state = 0
      end
    end
    else
        if (AIAEnabled) then
        autoAssemble(SCRIPT_auto_inner_ability, AIADisabled)
        writeToLogFile("INFO", "Disabled " .. script_name)
        end
    end
  else
    showMessage(script_name .. " is currently not working. Disabling...")
    InnerToLegendary.state = 0
    InnerToLegendary.Enabled = false
    writeToLogFile("WARNING", script_name .. " is not working. Disabling this option for your safety...")
  end
end

function AutoKey1(AutoKey1)
local script_name = "Auto Key 1"
local SCRIPT_auto_key1 = SCRIPT_auto_key1
if Simple.AutoKeyType.ItemIndex == 1 then
script_name = "Auto Key 1 v2"
SCRIPT_auto_key1 = SCRIPT_auto_key1_v2
end
SCRIPT_auto_key1 = SCRIPT_auto_key1:gsub("%%arg1", CheckAutoKey1Key())
SCRIPT_auto_key1 = SCRIPT_auto_key1:gsub("%%arg2", Simple.AutoKey1Delay.Text)
if not checkNotWorking(SCRIPT_auto_key1) then
  if AutoKey1.checked then
    if checkAutoBan(SCRIPT_auto_key1) then
      if messageDialog(script_name .. ' may cause an auto ban under varying conditions!!\n\nEnable anyways?', mtWarning, mbYes, mbNo, 0) == mrYes then
        A1KeyEnabled, A1KeyDisabled = autoAssemble(SCRIPT_auto_key1, false)
        if (A1KeyEnabled) then
        writeToLogFile("INFO", "Enabled " .. script_name .. " after auto ban warning (params: " .. Simple.AutoKey1Value.Items[Simple.AutoKey1Value.ItemIndex] .. " (" .. CheckAutoKey1Key() .. ")," .. Simple.AutoKey1Delay.Text .. ")")
        else
        writeToLogFile("WARNING", "Failed to enable " .. script_name .. " (params: " .. Simple.AutoKey1Value.Items[Simple.AutoKey1Value.ItemIndex] .. " (" .. CheckAutoKey1Key() .. ")," .. Simple.AutoKey1Delay.Text .. ")")
        end
        AutoKey1Boxes()
      else
        AutoKey1.state = 0
      end
    else
      A1KeyEnabled, A1KeyDisabled = autoAssemble(SCRIPT_auto_key1, false)
      if (A1KeyEnabled) then
      writeToLogFile("INFO", "Enabled " .. script_name .. " (params: " .. Simple.AutoKey1Value.Items[Simple.AutoKey1Value.ItemIndex] .. " (" .. CheckAutoKey1Key() .. ")," .. Simple.AutoKey1Delay.Text .. ")")
      else
      writeToLogFile("WARNING", "Failed to enable " .. script_name .. " (params: " .. Simple.AutoKey1Value.Items[Simple.AutoKey1Value.ItemIndex] .. " (" .. CheckAutoKey1Key() .. ")," .. Simple.AutoKey1Delay.Text .. ")")
      end
      AutoKey1Boxes()
    end
    else
        if (A1KeyEnabled) then
        autoAssemble(SCRIPT_auto_key1, A1KeyDisabled)
        writeToLogFile("INFO", "Disabled " .. script_name)
        end
        AutoKey1Boxes()
    end
  else
    showMessage(script_name .. " is currently not working. Disabling...")
    AutoKey1.state = 0
    Simple.AutoKey1Value.Enabled = false
    Simple.AutoKey1Delay.Enabled = false
    AutoKey1.Enabled = false
    writeToLogFile("WARNING", script_name .. " is not working. Disabling this option for your safety...")
  end
end

function SelectedAutoKeyType(sender)
local selected = sender.ItemIndex
Simple.AutoKey1.Enabled = true
if selected == 0 then
  if checkNotWorking(SCRIPT_auto_key1) then
    Simple.AutoKey1.Enabled = false
    showMessage("The selected Auto Key 1 type either is not working or was not loaded with the trainer. See Log File for more information.\n\nPlease select a different Auto Key type.")
    writeToLogFile("WARNING", "Change of Auto Key 1 type to Auto Key v1 failed. The script was either marked not working or was not loaded with the trainer")
  end
elseif selected == 1 then
  if checkNotWorking(SCRIPT_auto_key1_v2) then
    Simple.AutoKey1.Enabled = false
    showMessage("The selected Auto Key 1 type either is not working or was not loaded with the trainer. See Log File for more information.\n\nPlease select a different Auto Key type.")
    writeToLogFile("WARNING", "Change of Auto Key 1 type to Auto Key v2 failed. The script was either marked not working or was not loaded with the trainer")
  end
end
end

function AutoKey1Boxes()
if Simple.AutoKey1.Checked then
Simple.AutoKeyType.Enabled = false
Simple.AutoKey1Value.Enabled = false
Simple.AutoKey1Delay.ReadOnly = true
else
Simple.AutoKeyType.Enabled = true
Simple.AutoKey1Value.Enabled = true
Simple.AutoKey1Delay.ReadOnly = false
end
end

function CheckAutoKey1Key()
local index = tostring(Simple.AutoKey1Value.ItemIndex)
local value = "0"
  if index == '0' then
    value = "001D0000"
  elseif index == '1' then
    value = "002A0000"
  elseif index == '2' then
    value = "01520000"
  elseif index == '3' then
    value = '01530000'
  elseif index == '4' then
    value = '01470000'
  elseif index == '5' then
    value = '014F0000'
  elseif index == '6' then
    value = '01490000'
  elseif index == '7' then
    value = '01510000'
  elseif index == '8' then
    value = '00380000'
  elseif index == '9' then
    value = '002C0000'
  end
return value
end

function AutoOffline(OfflineMeNow)
local script_name = "Auto Offline"
if not checkNotWorking(SCRIPT_auto_offline) then
  if OfflineMeNow.checked then
    if checkAutoBan(SCRIPT_auto_offline) then
      if messageDialog(script_name .. ' may cause an auto ban under varying conditions!!\n\nEnable anyways?', mtWarning, mbYes, mbNo, 0) == mrYes then
        AOEnabled, AODisabled = autoAssemble(SCRIPT_auto_offline, false)
        if (AOEnabled) then
        writeToLogFile("INFO", "Enabled " .. script_name .. " after auto ban warning")
        else
        writeToLogFile("WARNING", "Failed to enable " .. script_name)
        messageDialog("A problem occurred when attempting to enable " .. script_name .. ". It will not be enabled.", mtError, mbOK)
        OfflineMeNow.state = 0
        end
      else
        OfflineMeNow.state = 0
      end
    else
      AOEnabled, AODisabled = autoAssemble(SCRIPT_auto_offline, false)
      if (AOEnabled) then
      writeToLogFile("INFO", "Enabled " .. script_name)
      else
      writeToLogFile("WARNING", "Failed to enable " .. script_name)
      messageDialog("A problem occurred when attempting to enable " .. script_name .. ". It will not be enabled.", mtError, mbOK)
      OfflineMeNow.state = 0
      end
    end
    else
        if (AOEnabled) then
        autoAssemble(SCRIPT_auto_offline, AODisabled)
        writeToLogFile("INFO", "Disabled " .. script_name)
        end
    end
  else
    showMessage(script_name .. " is currently not working. Disabling...")
    OfflineMeNow.state = 0
    OfflineMeNow.Enabled = false
    writeToLogFile("WARNING", script_name .. " is not working. Disabling this option for your safety...")
  end
end

function AutoPetFeed(FeedDatPetAutomatically)
local script_name = "Auto Pet Feed"
if not checkNotWorking(SCRIPT_auto_pet_feed) then
  if FeedDatPetAutomatically.checked then
    if checkAutoBan(SCRIPT_auto_pet_feed) then
      if messageDialog(script_name .. ' may cause an auto ban under varying conditions!!\n\nEnable anyways?', mtWarning, mbYes, mbNo, 0) == mrYes then
        APFEnabled, APFDisabled = autoAssemble(SCRIPT_auto_pet_feed, false)
        if (APFEnabled) then
        writeToLogFile("INFO", "Enabled " .. script_name .. " after auto ban warning")
        else
        writeToLogFile("WARNING", "Failed to enable " .. script_name)
        end
      else
        FeedDatPetAutomatically.state = 0
      end
    else
      APFEnabled, APFDisabled = autoAssemble(SCRIPT_auto_pet_feed, false)
      if (APFEnabled) then
      writeToLogFile("INFO", "Enabled " .. script_name)
      else
      writeToLogFile("WARNING", "Failed to enable " .. script_name)
      end
    end
    else
        if (APFEnabled) then
        autoAssemble(SCRIPT_auto_pet_feed, APFDisabled)
        writeToLogFile("INFO", "Disabled " .. script_name)
        end
    end
  else
    showMessage(script_name .. " is currently not working. Disabling...")
    FeedDatPetAutomatically.state = 0
    FeedDatPetAutomatically.Enabled = false
    writeToLogFile("WARNING", script_name .. " is not working. Disabling this option for your safety...")
  end
end

function AutoPortal(APortal)
local script_name = "Auto Portal"
if not checkNotWorking(SCRIPT_auto_portal) then
  if APortal.checked then
    if checkAutoBan(SCRIPT_auto_portal) then
      if messageDialog(script_name .. ' may cause an auto ban under varying conditions!!\n\nEnable anyways?', mtWarning, mbYes, mbNo, 0) == mrYes then
        APortalEnabled, APortalDisabled = autoAssemble(SCRIPT_auto_portal, false)
        if (APortalEnabled) then
			writeToLogFile("INFO", "Enabled " .. script_name .. " after auto ban warning")
			else
			writeToLogFile("WARNING", "Failed to enable " .. script_name)
			end
      else
        APortal.state = 0
      end
    else
      APortalEnabled, APortalDisabled = autoAssemble(SCRIPT_auto_portal, false)
      if (APortalEnabled) then
      writeToLogFile("INFO", "Enabled " .. script_name)
      else
      writeToLogFile("WARNING", "Failed to enable " .. script_name)
      end
    end
    else
        if (APortalEnabled) then
        autoAssemble(SCRIPT_auto_portal, APortalDisabled)
        writeToLogFile("INFO", "Disabled " .. script_name)
        end
    end
  else
    showMessage(script_name .. " is currently not working. Disabling...")
    APortal.state = 0
    APortal.Enabled = false
    writeToLogFile("WARNING", script_name .. " is not working. Disabling this option for your safety...")
  end
end

function AutoTerminate(TerminateMS)
local script_name = "Auto Terminate"
if not checkNotWorking(SCRIPT_auto_terminate) then
  if TerminateMS.checked then
    if checkAutoBan(SCRIPT_auto_terminate) then
      if messageDialog(script_name .. ' may cause an auto ban under varying conditions!!\n\nEnable anyways?', mtWarning, mbYes, mbNo, 0) == mrYes then
        AutoTerminateEnabled, AutoTerminateDisabled = autoAssemble(SCRIPT_auto_terminate, false)
        if (AutoTerminateEnabled) then
        writeToLogFile("INFO", "Enabled " .. script_name .. " after auto ban warning")
        else
        writeToLogFile("WARNING", "Failed to enable " .. script_name)
        messageDialog("A problem occurred when attempting to enable " .. script_name .. ". It will not be enabled.", mtError, mbOK)
        TerminateMS.state = 0
        end
      else
        TerminateMS.state = 0
      end
    else
      AutoTerminateEnabled, AutoTerminateDisabled = autoAssemble(SCRIPT_auto_terminate, false)
      if (AutoTerminateEnabled) then
      writeToLogFile("INFO", "Enabled " .. script_name)
      else
      writeToLogFile("WARNING", "Failed to enable " .. script_name)
      messageDialog("A problem occurred when attempting to enable " .. script_name .. ". It will not be enabled.", mtError, mbOK)
      TerminateMS.state = 0
      end
    end
    else
        if (AutoTerminateEnabled) then
        autoAssemble(SCRIPT_auto_terminate, AutoTerminateDisabled)
        writeToLogFile("INFO", "Disabled " .. script_name)
        end
    end
  else
    showMessage(script_name .. " is currently not working. Disabling...")
    TerminateMS.state = 0
    TerminateMS.Enabled = false
    writeToLogFile("WARNING", script_name .. " is not working. Disabling this option for your safety...")
  end
end

function BeholderHeal(BeholderInfHeal)
local script_name = "Beholder Infinite Heal"
if not checkNotWorking(SCRIPT_beholder_inf_heal) then
  if BeholderInfHeal.checked then
    if checkAutoBan(SCRIPT_beholder_inf_heal) then
      if messageDialog(script_name .. ' may cause an auto ban under varying conditions!!\n\nEnable anyways?', mtWarning, mbYes, mbNo, 0) == mrYes then
        BIHEnabled, BIHDisabled = autoAssemble(SCRIPT_beholder_inf_heal, false)
        if (BIHEnabled) then
        writeToLogFile("INFO", "Enabled " .. script_name .. " after auto ban warning")
        else
        writeToLogFile("WARNING", "Failed to enable " .. script_name)
        messageDialog("A problem occurred when attempting to enable " .. script_name .. ". It will not be enabled.", mtError, mbOK)
        BeholderInfHeal.state = 0
        end
      else
        BeholderInfHeal.state = 0
      end
    else
      BIHEnabled, BIHDisabled = autoAssemble(SCRIPT_beholder_inf_heal, false)
      if (BIHEnabled) then
      writeToLogFile("INFO", "Enabled " .. script_name)
      else
      writeToLogFile("WARNING", "Failed to enable " .. script_name)
      messageDialog("A problem occurred when attempting to enable " .. script_name .. ". It will not be enabled.", mtError, mbOK)
      BeholderInfHeal.state = 0
      end
    end
    else
        if (BIHEnabled) then
        autoAssemble(SCRIPT_beholder_inf_heal, BIHDisabled)
        writeToLogFile("INFO", "Disabled " .. script_name)
        end
    end
  else
    showMessage(script_name .. " is currently not working. Disabling...")
    BeholderInfHeal.state = 0
    BeholderInfHeal.Enabled = false
    writeToLogFile("WARNING", script_name .. " is not working. Disabling this option for your safety...")
  end
end

function BossGodmode(BossGM)
local script_name = "Boss Godmode"
if not checkNotWorking(SCRIPT_boss_godmode) then
  if BossGM.checked then
    if checkAutoBan(SCRIPT_boss_godmode) then
      if messageDialog(script_name .. ' may cause an auto ban under varying conditions!!\n\nEnable anyways?', mtWarning, mbYes, mbNo, 0) == mrYes then
        BGodmodeEnabled, BGodmodeDisabled = autoAssemble(SCRIPT_boss_godmode, false)
        if (BGodmodeEnabled) then
			writeToLogFile("INFO", "Enabled " .. script_name .. " after auto ban warning")
			else
			writeToLogFile("WARNING", "Failed to enable " .. script_name)
			end
      else
        BossGM.state = 0
      end
    else
      BGodmodeEnabled, BGodmodeDisabled = autoAssemble(SCRIPT_boss_godmode, false)
      if (BGodmodeEnabled) then
      writeToLogFile("INFO", "Enabled " .. script_name)
      else
      writeToLogFile("WARNING", "Failed to enable " .. script_name)
      end
    end
    else
        if (BGodmodeEnabled) then
        autoAssemble(SCRIPT_boss_godmode, BGodmodeDisabled)
        writeToLogFile("INFO", "Disabled " .. script_name)
        end
    end
  else
    showMessage(script_name .. " is currently not working. Disabling...")
    BossGM.state = 0
    BossGM.Enabled = false
    writeToLogFile("WARNING", script_name .. " is not working. Disabling this option for your safety...")
  end
end

function ClearFieldUI(NoUI)
local script_name = "Clear Field UI"
if not checkNotWorking(SCRIPT_clear_field_ui) then
  if NoUI.checked then
    if checkAutoBan(SCRIPT_clear_field_ui) then
      if messageDialog(script_name .. ' may cause an auto ban under varying conditions!!\n\nEnable anyways?', mtWarning, mbYes, mbNo, 0) == mrYes then
        CFUIEnabled, CFUIDisabled = autoAssemble(SCRIPT_clear_field_ui, false)
        if (CFUIEnabled) then
        writeToLogFile("INFO", "Enabled " .. script_name .. " after auto ban warning")
        else
        writeToLogFile("WARNING", "Failed to enable " .. script_name)
        messageDialog("A problem occurred when attempting to enable " .. script_name .. ". It will not be enabled.", mtError, mbOK)
        NoUI.state = 0
        end
      else
        NoUI.state = 0
      end
    else
      CFUIEnabled, CFUIDisabled = autoAssemble(SCRIPT_clear_field_ui, false)
      if (CFUIEnabled) then
      writeToLogFile("INFO", "Enabled " .. script_name)
      else
      writeToLogFile("WARNING", "Failed to enable " .. script_name)
      messageDialog("A problem occurred when attempting to enable " .. script_name .. ". It will not be enabled.", mtError, mbOK)
      NoUI.state = 0
      end
    end
    else
        if (CFUIEnabled) then
        autoAssemble(SCRIPT_clear_field_ui, CFUIDisabled)
        writeToLogFile("INFO", "Disabled " .. script_name)
        end
    end
  else
    showMessage(script_name .. " is currently not working. Disabling...")
    NoUI.state = 0
    NoUI.Enabled = false
    writeToLogFile("WARNING", script_name .. " is not working. Disabling this option for your safety...")
  end
end

function ContantBlazingExtinctionAttack(CBEA)
local script_name = "Contant Blazing Extinction Attack"
if not checkNotWorking(SCRIPT_const_be_attack) then
  if CBEA.checked then
    if checkAutoBan(SCRIPT_const_be_attack) then
      if messageDialog(script_name .. ' may cause an auto ban under varying conditions!!\n\nEnable anyways?', mtWarning, mbYes, mbNo, 0) == mrYes then
        CBEAEnabled, CBEADisabled = autoAssemble(SCRIPT_const_be_attack, false)
        if (CBEAEnabled) then
        writeToLogFile("INFO", "Enabled " .. script_name .. " after auto ban warning")
        else
        writeToLogFile("WARNING", "Failed to enable " .. script_name)
        messageDialog("A problem occurred when attempting to enable " .. script_name .. ". It will not be enabled.", mtError, mbOK)
        CBEA.state = 0
        end
      else
        CBEA.state = 0
      end
    else
      CBEAEnabled, CBEADisabled = autoAssemble(SCRIPT_const_be_attack, false)
      if (CBEAEnabled) then
      writeToLogFile("INFO", "Enabled " .. script_name)
      else
      writeToLogFile("WARNING", "Failed to enable " .. script_name)
      messageDialog("A problem occurred when attempting to enable " .. script_name .. ". It will not be enabled.", mtError, mbOK)
      CBEA.state = 0
      end
    end
    else
        if (CBEAEnabled) then
        autoAssemble(SCRIPT_const_be_attack, CBEADisabled)
        writeToLogFile("INFO", "Disabled " .. script_name)
        end
    end
  else
    showMessage(script_name .. " is currently not working. Disabling...")
    CBEA.state = 0
    CBEA.Enabled = false
    writeToLogFile("WARNING", script_name .. " is not working. Disabling this option for your safety...")
  end
end

function DisablePetReturn(BadPetNoReturn)
local script_name = "Disable Pet Return"
if not checkNotWorking(SCRIPT_disable_pet_return) then
  if BadPetNoReturn.checked then
    if checkAutoBan(SCRIPT_disable_pet_return) then
      if messageDialog(script_name .. ' may cause an auto ban under varying conditions!!\n\nEnable anyways?', mtWarning, mbYes, mbNo, 0) == mrYes then
        PetReturnEnabled, PetReturnDisabled = autoAssemble(SCRIPT_disable_pet_return, false)
        if (PetReturnEnabled) then
        writeToLogFile("INFO", "Enabled " .. script_name .. " after auto ban warning")
        else
        writeToLogFile("WARNING", "Failed to enable " .. script_name)
        end
      else
        BadPetNoReturn.state = 0
      end
    else
      PetReturnEnabled, PetReturnDisabled = autoAssemble(SCRIPT_disable_pet_return, false)
      if (PetReturnEnabled) then
      writeToLogFile("INFO", "Enabled " .. script_name)
      else
      writeToLogFile("WARNING", "Failed to enable " .. script_name)
      end
    end
    else
        if (PetReturnEnabled) then
        autoAssemble(SCRIPT_disable_pet_return, PetReturnDisabled)
        writeToLogFile("INFO", "Disabled " .. script_name)
        end
    end
  else
    showMessage(script_name .. " is currently not working. Disabling...")
    BadPetNoReturn.state = 0
    BadPetNoReturn.Enabled = false
    writeToLogFile("WARNING", script_name .. " is not working. Disabling this option for your safety...")
  end
end

function DragonBreathFusionAttack(DBFA)
local script_name = "Dragon Breath Fusion Attack"
if not checkNotWorking(SCRIPT_dragon_breath) then
  if DBFA.checked then
    if checkAutoBan(SCRIPT_dragon_breath) then
      if messageDialog(script_name .. ' may cause an auto ban under varying conditions!!\n\nEnable anyways?', mtWarning, mbYes, mbNo, 0) == mrYes then
        DragonBEnabled, DragonBDisabled = autoAssemble(SCRIPT_dragon_breath, false)
        if (DragonBEnabled) then
			writeToLogFile("INFO", "Enabled " .. script_name .. " after auto ban warning")
			else
			writeToLogFile("WARNING", "Failed to enable " .. script_name)
			end
      else
        DBFA.state = 0
      end
    else
      DragonBEnabled, DragonBDisabled = autoAssemble(SCRIPT_dragon_breath, false)
      if (DragonBEnabled) then
      writeToLogFile("INFO", "Enabled " .. script_name)
      else
      writeToLogFile("WARNING", "Failed to enable " .. script_name)
      end
    end
    else
        if (DragonBEnabled) then
        autoAssemble(SCRIPT_dragon_breath, DragonBDisabled)
        writeToLogFile("INFO", "Disabled " .. script_name)
        end
    end
  else
    showMessage(script_name .. " is currently not working. Disabling...")
    DBFA.state = 0
    DBFA.Enabled = false
    writeToLogFile("WARNING", script_name .. " is not working. Disabling this option for your safety...")
  end
end

function EnableDisabledButtons(EDButtons)
local script_name = "Enable Disabled Buttons"
if not checkNotWorking(SCRIPT_enable_disabled) then
  if EDButtons.checked then
    if checkAutoBan(SCRIPT_enable_disabled) then
      if messageDialog(script_name .. ' may cause an auto ban under varying conditions!!\n\nEnable anyways?', mtWarning, mbYes, mbNo, 0) == mrYes then
        EButtonsEnabled, EButtonsDisabled = autoAssemble(SCRIPT_enable_disabled, false)
        if (EButtonsEnabled) then
			writeToLogFile("INFO", "Enabled " .. script_name .. " after auto ban warning")
			else
			writeToLogFile("WARNING", "Failed to enable " .. script_name)
			end
      else
        EDButtons.state = 0
      end
    else
      EButtonsEnabled, EButtonsDisabled = autoAssemble(SCRIPT_enable_disabled, false)
      if (EButtonsEnabled) then
      writeToLogFile("INFO", "Enabled " .. script_name)
      else
      writeToLogFile("WARNING", "Failed to enable " .. script_name)
      end
    end
    else
        if (EButtonsEnabled) then
        autoAssemble(SCRIPT_enable_disabled, EButtonsDisabled)
        writeToLogFile("INFO", "Disabled " .. script_name)
        end
    end
  else
    showMessage(script_name .. " is currently not working. Disabling...")
    EDButtons.state = 0
    EDButtons.Enabled = false
    writeToLogFile("WARNING", script_name .. " is not working. Disabling this option for your safety...")
  end
end

function FamiliarNDAttack(FamiliarNDAttack)
local script_name = "Familiar No Delay Attack"
if not checkNotWorking(SCRIPT_fam_no_delay_atk) then
  if FamiliarNDAttack.checked then
    if checkAutoBan(SCRIPT_fam_no_delay_atk) then
      if messageDialog(script_name .. ' may cause an auto ban under varying conditions!!\n\nEnable anyways?', mtWarning, mbYes, mbNo, 0) == mrYes then
        FamNDEnabled, FamNDDisabled = autoAssemble(SCRIPT_fam_no_delay_atk, false)
        if (FamNDEnabled) then
        writeToLogFile("INFO", "Enabled " .. script_name .. " after auto ban warning")
        else
        writeToLogFile("WARNING", "Failed to enable " .. script_name)
        messageDialog("A problem occurred when attempting to enable " .. script_name .. ". It will not be enabled.", mtError, mbOK)
        FamiliarNDAttack.state = 0
        end
      else
        FamiliarNDAttack.state = 0
      end
    else
      FamNDEnabled, FamNDDisabled = autoAssemble(SCRIPT_fam_no_delay_atk, false)
      if (FamNDEnabled) then
      writeToLogFile("INFO", "Enabled " .. script_name)
      else
      writeToLogFile("WARNING", "Failed to enable " .. script_name)
      messageDialog("A problem occurred when attempting to enable " .. script_name .. ". It will not be enabled.", mtError, mbOK)
      FamiliarNDAttack.state = 0
      end
    end
    else
        if (FamNDEnabled) then
        autoAssemble(SCRIPT_fam_no_delay_atk, FamNDDisabled)
        writeToLogFile("INFO", "Disabled " .. script_name)
        end
    end
  else
    showMessage(script_name .. " is currently not working. Disabling...")
    FamiliarNDAttack.state = 0
    FamiliarNDAttack.Enabled = false
    writeToLogFile("WARNING", script_name .. " is not working. Disabling this option for your safety...")
  end
end

function FastPetLoot(DasQuickPet)
local script_name = "Fast Pet Loot"
if not checkNotWorking(SCRIPT_fast_pet_loot) then
  if DasQuickPet.checked then
    if checkAutoBan(SCRIPT_fast_pet_loot) then
      if messageDialog(script_name .. ' may cause an auto ban under varying conditions!!\n\nEnable anyways?', mtWarning, mbYes, mbNo, 0) == mrYes then
        FPLEnabled, FPLDisabled = autoAssemble(SCRIPT_fast_pet_loot, false)
        if (FPLEnabled) then
        writeToLogFile("INFO", "Enabled " .. script_name .. " after auto ban warning")
        else
        writeToLogFile("WARNING", "Failed to enable " .. script_name)
        messageDialog("A problem occurred when attempting to enable " .. script_name .. ". It will not be enabled.", mtError, mbOK)
        DasQuickPet.state = 0
        end
      else
        DasQuickPet.state = 0
      end
    else
      FPLEnabled, FPLDisabled = autoAssemble(SCRIPT_fast_pet_loot, false)
      if (FPLEnabled) then
      writeToLogFile("INFO", "Enabled " .. script_name)
      else
      writeToLogFile("WARNING", "Failed to enable " .. script_name)
      messageDialog("A problem occurred when attempting to enable " .. script_name .. ". It will not be enabled.", mtError, mbOK)
      DasQuickPet.state = 0
      end
    end
    else
        if (FPLEnabled) then
        autoAssemble(SCRIPT_fast_pet_loot, FPLDisabled)
        writeToLogFile("INFO", "Disabled " .. script_name)
        end
    end
  else
    showMessage(script_name .. " is currently not working. Disabling...")
    DasQuickPet.state = 0
    DasQuickPet.Enabled = false
    writeToLogFile("WARNING", script_name .. " is not working. Disabling this option for your safety...")
  end
end

function ForceSummonsAttack(ForceSummonsToAttack)
local script_name = "Force Summon to Attack"
local SCRIPT_force_summons_attack = SCRIPT_force_summons_attack:gsub("%%arg1", Simple.FSADelay.Text)
if not checkNotWorking(SCRIPT_force_summons_attack) then
  if ForceSummonsToAttack.checked then
    if checkAutoBan(SCRIPT_force_summons_attack) then
      if messageDialog(script_name .. ' may cause an auto ban under varying conditions!!\n\nEnable anyways?', mtWarning, mbYes, mbNo, 0) == mrYes then
        FSAEnabled, FSADisabled = autoAssemble(SCRIPT_force_summons_attack, false)
        if (FSAEnabled) then
        writeToLogFile("INFO", "Enabled " .. script_name .. " after auto ban warning (params: " .. Simple.FSADelay.Text .. ')')
        else
        writeToLogFile("WARNING", "Failed to enable " .. script_name .. " (params: " .. Simple.FSADelay.Text .. ')')
        end
        FSABoxes()
      else
        ForceSummonsToAttack.state = 0
      end
    else
      FSAEnabled, FSADisabled = autoAssemble(SCRIPT_force_summons_attack, false)
      if (FSAEnabled) then
      writeToLogFile("INFO", "Enabled " .. script_name .. " (params: " .. Simple.FSADelay.Text .. ')')
      else
      writeToLogFile("WARNING", "Failed to enable " .. script_name .. " (params: " .. Simple.FSADelay.Text .. ')')
      end
      FSABoxes()
    end
    else
        if (FSAEnabled) then
        autoAssemble(SCRIPT_force_summons_attack, FSADisabled)
        writeToLogFile("INFO", "Disabled " .. script_name)
        end
        FSABoxes()
    end
  else
    showMessage(script_name .. " is currently not working. Disabling...")
    ForceSummonsToAttack.state = 0
    ForceSummonsToAttack.Enabled = false
    Simple.FSADelay.Enabled = false
    writeToLogFile("WARNING", script_name .. " is not working. Disabling this option for your safety...")
  end
end

function FSABoxes()
if Simple.ForceSummontoAttack.Checked then
Simple.FSADelay.ReadOnly = true
else
Simple.FSADelay.ReadOnly = false
end
end

function FreezeBlazingExtinction(FBExtinction)
local script_name = "Freeze Blazing Extinction"
if not checkNotWorking(SCRIPT_freeze_blazing_extinction) then
  if FBExtinction.checked then
    if checkAutoBan(SCRIPT_freeze_blazing_extinction) then
      if messageDialog(script_name .. ' may cause an auto ban under varying conditions!!\n\nEnable anyways?', mtWarning, mbYes, mbNo, 0) == mrYes then
        FBEEnabled, FBEDisabled = autoAssemble(SCRIPT_freeze_blazing_extinction, false)
        if (FBEEnabled) then
        writeToLogFile("INFO", "Enabled " .. script_name .. " after auto ban warning")
        else
        writeToLogFile("WARNING", "Failed to enable " .. script_name)
        messageDialog("A problem occurred when attempting to enable " .. script_name .. ". It will not be enabled.", mtError, mbOK)
        FBExtinction.state = 0
        end
      else
        FBExtinction.state = 0
      end
    else
      FBEEnabled, FBEDisabled = autoAssemble(SCRIPT_freeze_blazing_extinction, false)
      if (FBEEnabled) then
      writeToLogFile("INFO", "Enabled " .. script_name)
      else
      writeToLogFile("WARNING", "Failed to enable " .. script_name)
      messageDialog("A problem occurred when attempting to enable " .. script_name .. ". It will not be enabled.", mtError, mbOK)
      FBExtinction.state = 0
      end
    end
    else
        if (FBEEnabled) then
        autoAssemble(SCRIPT_freeze_blazing_extinction, FBEDisabled)
        writeToLogFile("INFO", "Disabled " .. script_name)
        end
    end
  else
    showMessage(script_name .. " is currently not working. Disabling...")
    FBExtinction.state = 0
    FBExtinction.Enabled = false
    writeToLogFile("WARNING", script_name .. " is not working. Disabling this option for your safety...")
  end
end

function FullMapAttack(FMA)
local script_name = "Full Map Attack"
if not checkNotWorking(SCRIPT_full_map_attack) then
  if FMA.checked then
    if checkAutoBan(SCRIPT_full_map_attack) then
      if messageDialog(script_name .. ' may cause an auto ban under varying conditions!!\n\nEnable anyways?', mtWarning, mbYes, mbNo, 0) == mrYes then
        FMAEnabled, FMADisabled = autoAssemble(SCRIPT_full_map_attack, false)
        if (FMAEnabled) then
        writeToLogFile("INFO", "Enabled " .. script_name .. " after auto ban warning")
        else
        writeToLogFile("WARNING", "Failed to enable " .. script_name)
        end
      else
        FMA.state = 0
      end
    else
      FMAEnabled, FMADisabled = autoAssemble(SCRIPT_full_map_attack, false)
      if (FMAEnabled) then
      writeToLogFile("INFO", "Enabled " .. script_name)
      else
      writeToLogFile("WARNING", "Failed to enable " .. script_name)
      end
    end
    else
        if (FMAEnabled) then
        autoAssemble(SCRIPT_full_map_attack, FMADisabled)
        writeToLogFile("INFO", "Disabled " .. script_name)
        end
    end
  else
    showMessage(script_name .. " is currently not working. Disabling...")
    FMA.state = 0
    FMA.Enabled = false
    writeToLogFile("WARNING", script_name .. " is not working. Disabling this option for your safety...")
  end
end

function GodMode(GMode)
local script_name = "God Mode"
if not checkNotWorking(SCRIPT_godmode) then
  if GMode.checked then
    if checkAutoBan(SCRIPT_godmode) then
      if messageDialog(script_name .. ' may cause an auto ban under varying conditions!!\n\nEnable anyways?', mtWarning, mbYes, mbNo, 0) == mrYes then
        GodmodeEnabled, GodmodeDisabled = autoAssemble(SCRIPT_godmode, false)
        if (GodmodeEnabled) then
			writeToLogFile("INFO", "Enabled " .. script_name .. " after auto ban warning")
			else
			writeToLogFile("WARNING", "Failed to enable " .. script_name)
			end
			GodModeBoxes()
      else
        GMode.state = 0
      end
    else
      GodmodeEnabled, GodmodeDisabled = autoAssemble(SCRIPT_godmode, false)
      if (GodmodeEnabled) then
      writeToLogFile("INFO", "Enabled " .. script_name)
      else
      writeToLogFile("WARNING", "Failed to enable " .. script_name)
      end
      GodModeBoxes()
    end
    else
        if (GodmodeEnabled) then
        autoAssemble(SCRIPT_godmode, GodmodeDisabled)
        writeToLogFile("INFO", "Disabled " .. script_name)
        end
        GodModeBoxes()
    end
  else
    showMessage(script_name .. " is currently not working. Disabling...")
    GMode.state = 0
    GMode.Enabled = false
    writeToLogFile("WARNING", script_name .. " is not working. Disabling this option for your safety...")
  end
end

function GodModeBoxes()
if Simple.GodMode.Checked then
Simple.MissGodmode.Enabled = false
Simple.TimedGodmode.Enabled = false
else
if not checkNotWorking(SCRIPT_miss_godmode) then
Simple.MissGodmode.Enabled = true
Simple.TimedGodmode.Enabled = true
end
end
end

function HideMostSkillAnimation(HideSkillAni)
local script_name = "Hide Most Skill Animation"
if not checkNotWorking(SCRIPT_hide_most_ani) then
  if HideSkillAni.checked then
    if checkAutoBan(SCRIPT_hide_most_ani) then
      if messageDialog(script_name .. ' may cause an auto ban under varying conditions!!\n\nEnable anyways?', mtWarning, mbYes, mbNo, 0) == mrYes then
        HMSAEnabled, HMSADisabled = autoAssemble(SCRIPT_hide_most_ani, false)
        if (HMSAEnabled) then
        writeToLogFile("INFO", "Enabled " .. script_name .. " after auto ban warning")
        else
        writeToLogFile("WARNING", "Failed to enable " .. script_name)
        end
      else
        HideSkillAni.state = 0
      end
      HideSkillAniBoxes()
    else
      HMSAEnabled, HMSADisabled = autoAssemble(SCRIPT_hide_most_ani, false)
      if (HMSAEnabled) then
      writeToLogFile("INFO", "Enabled " .. script_name)
      else
      writeToLogFile("WARNING", "Failed to enable " .. script_name)
      end
      HideSkillAniBoxes()
    end
    else
        if (HMSAEnabled) then
        autoAssemble(SCRIPT_hide_most_ani, HMSADisabled)
        writeToLogFile("INFO", "Disabled " .. script_name)
        end
        HideSkillAniBoxes()
    end
  else
    showMessage(script_name .. " is currently not working. Disabling...")
    HideSkillAni.state = 0
    HideSkillAni.Enabled = false
    writeToLogFile("WARNING", script_name .. " is not working. Disabling this option for your safety...")
  end
end

function HideSkillAniBoxes()
if Simple.HideMostSkillAnimation.Checked then
  Simple.MapSpeedUp.Enabled = false
  Simple.MobSpeedUp.Enabled = false
  Simple.VellumFreezev2.Enabled = false
else
  Simple.MapSpeedUp.Enabled = true
  Simple.MobSpeedUp.Enabled = true
  Simple.VellumFreezev2.Enabled = true
end
end

function HideNametags(HideNT)
local script_name = "Hide Nametags"
if not checkNotWorking(SCRIPT_hide_nametags) then
  if HideNT.checked then
    if checkAutoBan(SCRIPT_hide_nametags) then
      if messageDialog(script_name .. ' may cause an auto ban under varying conditions!!\n\nEnable anyways?', mtWarning, mbYes, mbNo, 0) == mrYes then
        NametagsEnabled, NametagsDisabled = autoAssemble(SCRIPT_hide_nametags, false)
        if (NametagsEnabled) then
			writeToLogFile("INFO", "Enabled " .. script_name .. " after auto ban warning")
			else
			writeToLogFile("WARNING", "Failed to enable " .. script_name)
			end
      else
        HideNT.state = 0
      end
    else
      NametagsEnabled, NametagsDisabled = autoAssemble(SCRIPT_hide_nametags, false)
      if (NametagsEnabled) then
      writeToLogFile("INFO", "Enabled " .. script_name)
      else
      writeToLogFile("WARNING", "Failed to enable " .. script_name)
      end
    end
    else
        if (NametagsEnabled) then
        autoAssemble(SCRIPT_hide_nametags, NametagsDisabled)
        writeToLogFile("INFO", "Disabled " .. script_name)
        end
    end
  else
    showMessage(script_name .. " is currently not working. Disabling...")
    HideNT.state = 0
    HideNT.Enabled = false
    writeToLogFile("WARNING", script_name .. " is not working. Disabling this option for your safety...")
  end
end

function HidePlayerDamage(HPDamage)
local script_name = "Hide Player Damage"
if not checkNotWorking(SCRIPT_hide_player_damage) then
  if HPDamage.checked then
    if checkAutoBan(SCRIPT_hide_player_damage) then
      if messageDialog(script_name .. ' may cause an auto ban under varying conditions!!\n\nEnable anyways?', mtWarning, mbYes, mbNo, 0) == mrYes then
        PDamageEnabled, PDamageDisabled = autoAssemble(SCRIPT_hide_player_damage, false)
        if (PDamageEnabled) then
			writeToLogFile("INFO", "Enabled " .. script_name .. " after auto ban warning")
			else
			writeToLogFile("WARNING", "Failed to enable " .. script_name)
			end
      else
        HPDamage.state = 0
      end
    else
      PDamageEnabled, PDamageDisabled = autoAssemble(SCRIPT_hide_player_damage, false)
      if (PDamageEnabled) then
      writeToLogFile("INFO", "Enabled " .. script_name)
      else
      writeToLogFile("WARNING", "Failed to enable " .. script_name)
      end
    end
    else
        if (PDamageEnabled) then
        autoAssemble(SCRIPT_hide_player_damage, PDamageDisabled)
        writeToLogFile("INFO", "Disabled " .. script_name)
        end
    end
  else
    showMessage(script_name .. " is currently not working. Disabling...")
    HPDamage.state = 0
    HPDamage.Enabled = false
    writeToLogFile("WARNING", script_name .. " is not working. Disabling this option for your safety...")
  end
end

function HyperRockCRCBypass(HypeRockCRC)
local script_name = "Hyper Rock CRC Bypass"
local SCRIPT_hyper_rock_crc = SCRIPT_hyper_rock_crc:gsub("%%arg1", Simple.HyperRockMapID.Text)
if not checkNotWorking(SCRIPT_hyper_rock_crc) then
  if HypeRockCRC.checked then
    if checkAutoBan(SCRIPT_hyper_rock_crc) then
      if messageDialog(script_name .. ' may cause an auto ban under varying conditions!!\n\nEnable anyways?', mtWarning, mbYes, mbNo, 0) == mrYes then
        HYPEROCKEnabled, HYPEROCKDisabled = autoAssemble(SCRIPT_hyper_rock_crc, false)
        if (HYPEROCKEnabled) then
        writeToLogFile("INFO", "Enabled " .. script_name .. " after auto ban warning (params: " .. Simple.HyperRockMapID.Text .. ")")
        else
        writeToLogFile("WARNING", "Failed to enable " .. script_name .. " (params: " .. Simple.HyperRockMapID.Text .. ")")
        messageDialog("A problem occurred when attempting to enable " .. script_name .. ". It will not be enabled.", mtError, mbOK)
        HypeRockCRC.state = 0
        end
      else
        HypeRockCRC.state = 0
      end
    else
      HYPEROCKEnabled, HYPEROCKDisabled = autoAssemble(SCRIPT_hyper_rock_crc, false)
      if (HYPEROCKEnabled) then
      writeToLogFile("INFO", "Enabled " .. script_name .. " (params: " .. Simple.HyperRockMapID.Text .. ")")
      else
      writeToLogFile("WARNING", "Failed to enable " .. script_name .. " (params: " .. Simple.HyperRockMapID.Text .. ")")
      messageDialog("A problem occurred when attempting to enable " .. script_name .. ". It will not be enabled.", mtError, mbOK)
      HypeRockCRC.state = 0
      end
    end
    else
        if (HYPEROCKEnabled) then
        autoAssemble(SCRIPT_hyper_rock_crc, HYPEROCKDisabled)
        writeToLogFile("INFO", "Disabled " .. script_name)
        end
    end
  else
    showMessage(script_name .. " is currently not working. Disabling...")
    HypeRockCRC.state = 0
    HypeRockCRC.Enabled = false
    writeToLogFile("WARNING", script_name .. " is not working. Disabling this option for your safety...")
  end
end

function InfiniteBlasterBullets(InfiniteBBullets)
local script_name = "Infinite Blaster Bullets"
if not checkNotWorking(SCRIPT_infinite_blaster) then
  if InfiniteBBullets.checked then
    if checkAutoBan(SCRIPT_infinite_blaster) then
      if messageDialog(script_name .. ' may cause an auto ban under varying conditions!!\n\nEnable anyways?', mtWarning, mbYes, mbNo, 0) == mrYes then
        IBBEnabled, IBBDisabled = autoAssemble(SCRIPT_infinite_blaster, false)
        if (IBBEnabled) then
        writeToLogFile("INFO", "Enabled " .. script_name .. " after auto ban warning")
        else
        writeToLogFile("WARNING", "Failed to enable " .. script_name)
        end
      else
        InfiniteBBullets.state = 0
      end
    else
      IBBEnabled, IBBDisabled = autoAssemble(SCRIPT_infinite_blaster, false)
      if (IBBEnabled) then
      writeToLogFile("INFO", "Enabled " .. script_name)
      else
      writeToLogFile("WARNING", "Failed to enable " .. script_name)
      end
    end
    else
        if (IBBEnabled) then
        autoAssemble(SCRIPT_infinite_blaster, IBBDisabled)
        writeToLogFile("INFO", "Disabled " .. script_name)
        end
    end
  else
    showMessage(script_name .. " is currently not working. Disabling...")
    InfiniteBBullets.state = 0
    InfiniteBBullets.Enabled = false
    writeToLogFile("WARNING", script_name .. " is not working. Disabling this option for your safety...")
  end
end

function InfiniteFamiliar(InfFamiliar)
local script_name = "Infinite Familiar"
if not checkNotWorking(SCRIPT_infinite_familiar) then
  if InfFamiliar.checked then
    if checkAutoBan(SCRIPT_infinite_familiar) then
      if messageDialog(script_name .. ' may cause an auto ban under varying conditions!!\n\nEnable anyways?', mtWarning, mbYes, mbNo, 0) == mrYes then
        InfFamiliarEnabled, InfFamiliarDisabled = autoAssemble(SCRIPT_infinite_familiar, false)
        if (InfFamiliarEnabled) then
			writeToLogFile("INFO", "Enabled " .. script_name .. " after auto ban warning")
			else
			writeToLogFile("WARNING", "Failed to enable " .. script_name)
			end
      else
        InfFamiliar.state = 0
      end
    else
      InfFamiliarEnabled, InfFamiliarDisabled = autoAssemble(SCRIPT_infinite_familiar, false)
      if (InfFamiliarEnabled) then
      writeToLogFile("INFO", "Enabled " .. script_name)
      else
      writeToLogFile("WARNING", "Failed to enable " .. script_name)
      end
    end
    else
        if (InfFamiliarEnabled) then
        autoAssemble(SCRIPT_infinite_familiar, InfFamiliarDisabled)
        writeToLogFile("INFO", "Disabled " .. script_name)
        end
    end
  else
    showMessage(script_name .. " is currently not working. Disabling...")
    InfFamiliar.state = 0
    InfFamiliar.Enabled = false
    writeToLogFile("WARNING", script_name .. " is not working. Disabling this option for your safety...")
  end
end

function InstantCollision(InstantCollide)
local script_name = "Instant Collision"
if not checkNotWorking(SCRIPT_instant_collision) then
  if InstantCollide.checked then
    if checkAutoBan(SCRIPT_instant_collision) then
      if messageDialog(script_name .. ' may cause an auto ban under varying conditions!!\n\nEnable anyways?', mtWarning, mbYes, mbNo, 0) == mrYes then
        InstCEnabled, InstCDisabled = autoAssemble(SCRIPT_instant_collision, false)
        if (InstCEnabled) then
        writeToLogFile("INFO", "Enabled " .. script_name .. " after auto ban warning")
        else
        writeToLogFile("WARNING", "Failed to enable " .. script_name)
        messageDialog("A problem occurred when attempting to enable " .. script_name .. ". It will not be enabled.", mtError, mbOK)
        InstantCollide.state = 0
        end
      else
        InstantCollide.state = 0
      end
    else
      InstCEnabled, InstCDisabled = autoAssemble(SCRIPT_instant_collision, false)
      if (InstCEnabled) then
      writeToLogFile("INFO", "Enabled " .. script_name)
      else
      writeToLogFile("WARNING", "Failed to enable " .. script_name)
      messageDialog("A problem occurred when attempting to enable " .. script_name .. ". It will not be enabled.", mtError, mbOK)
      InstantCollide.state = 0
      end
    end
    else
        if (InstCEnabled) then
        autoAssemble(SCRIPT_instant_collision, InstCDisabled)
        writeToLogFile("INFO", "Disabled " .. script_name)
        end
    end
  else
    showMessage(script_name .. " is currently not working. Disabling...")
    InstantCollide.state = 0
    InstantCollide.Enabled = false
    writeToLogFile("WARNING", script_name .. " is not working. Disabling this option for your safety...")
  end
end

function InstantDrop(InstDrop)
local script_name = "Instant Drop"
if not checkNotWorking(SCRIPT_instant_drop) then
  if InstDrop.checked then
    if checkAutoBan(SCRIPT_instant_drop) then
      if messageDialog(script_name .. ' may cause an auto ban under varying conditions!!\n\nEnable anyways?', mtWarning, mbYes, mbNo, 0) == mrYes then
        InstDropEnabled, InstDropDisabled = autoAssemble(SCRIPT_instant_drop, false)
        if (InstDropEnabled) then
			writeToLogFile("INFO", "Enabled " .. script_name .. " after auto ban warning")
			else
			writeToLogFile("WARNING", "Failed to enable " .. script_name)
			end
      else
        InstDrop.state = 0
      end
    else
      InstDropEnabled, InstDropDisabled = autoAssemble(SCRIPT_instant_drop, false)
      if (InstDropEnabled) then
      writeToLogFile("INFO", "Enabled " .. script_name)
      else
      writeToLogFile("WARNING", "Failed to enable " .. script_name)
      end
    end
    else
        if (InstDropEnabled) then
        autoAssemble(SCRIPT_instant_drop, InstDropDisabled)
        writeToLogFile("INFO", "Disabled " .. script_name)
        end
    end
  else
    showMessage(script_name .. " is currently not working. Disabling...")
    InstDrop.state = 0
    InstDrop.Enabled = false
    writeToLogFile("WARNING", script_name .. " is not working. Disabling this option for your safety...")
  end
end

function InstantFinalPsychicSmash(InstFinalSmash)
local script_name = "Instant Final Psychic Smash"
if not checkNotWorking(SCRIPT_instant_final_psychic) then
  if InstFinalSmash.checked then
    if checkAutoBan(SCRIPT_instant_final_psychic) then
      if messageDialog(script_name .. ' may cause an auto ban under varying conditions!!\n\nEnable anyways?', mtWarning, mbYes, mbNo, 0) == mrYes then
        InstFPSEnabled, InstFPSDisabled = autoAssemble(SCRIPT_instant_final_psychic, false)
        if (InstFPSEnabled) then
			writeToLogFile("INFO", "Enabled " .. script_name .. " after auto ban warning")
			else
			writeToLogFile("WARNING", "Failed to enable " .. script_name)
			end
      else
        InstFinalSmash.state = 0
      end
    else
      InstFPSEnabled, InstFPSDisabled = autoAssemble(SCRIPT_instant_final_psychic, false)
      if (InstFPSEnabled) then
      writeToLogFile("INFO", "Enabled " .. script_name)
      else
      writeToLogFile("WARNING", "Failed to enable " .. script_name)
      end
    end
    else
        if (InstFPSEnabled) then
        autoAssemble(SCRIPT_instant_final_psychic, InstFPSDisabled)
        writeToLogFile("INFO", "Disabled " .. script_name)
        end
    end
  else
    showMessage(script_name .. " is currently not working. Disabling...")
    InstFinalSmash.state = 0
    InstFinalSmash.Enabled = false
    writeToLogFile("WARNING", script_name .. " is not working. Disabling this option for your safety...")
  end
end

function InstantFinalSlash(IFSlash)
local script_name = "Instant Final Slash"
if not checkNotWorking(SCRIPT_instant_final_slash) then
  if IFSlash.checked then
    if checkAutoBan(SCRIPT_instant_final_slash) then
      if messageDialog(script_name .. ' may cause an auto ban under varying conditions!!\n\nEnable anyways?', mtWarning, mbYes, mbNo, 0) == mrYes then
        IFSEnabled, IFSDisabled = autoAssemble(SCRIPT_instant_final_slash, false)
        if (IFSEnabled) then
			writeToLogFile("INFO", "Enabled " .. script_name .. " after auto ban warning")
			else
			writeToLogFile("WARNING", "Failed to enable " .. script_name)
			end
      else
        IFSlash.state = 0
      end
    else
      IFSEnabled, IFSDisabled = autoAssemble(SCRIPT_instant_final_slash, false)
      if (IFSEnabled) then
      writeToLogFile("INFO", "Enabled " .. script_name)
      else
      writeToLogFile("WARNING", "Failed to enable " .. script_name)
      end
    end
    else
        if (IFSEnabled) then
        autoAssemble(SCRIPT_instant_final_slash, IFSDisabled)
        writeToLogFile("INFO", "Disabled " .. script_name)
        end
    end
  else
    showMessage(script_name .. " is currently not working. Disabling...")
    IFSlash.state = 0
    IFSlash.Enabled = false
    writeToLogFile("WARNING", script_name .. " is not working. Disabling this option for your safety...")
  end
end

function InstantSpawnBlazingExtinction(ISBE)
local script_name = "Instant Spawn Blazing Extinction"
if not checkNotWorking(SCRIPT_instant_spawn_be) then
  if ISBE.checked then
    if checkAutoBan(SCRIPT_instant_spawn_be) then
      if messageDialog(script_name .. ' may cause an auto ban under varying conditions!!\n\nEnable anyways?', mtWarning, mbYes, mbNo, 0) == mrYes then
        ISBEEnabled, ISBEDisabled = autoAssemble(SCRIPT_instant_spawn_be, false)
        if (ISBEEnabled) then
        writeToLogFile("INFO", "Enabled " .. script_name .. " after auto ban warning")
        else
        writeToLogFile("WARNING", "Failed to enable " .. script_name)
        messageDialog("A problem occurred when attempting to enable " .. script_name .. ". It will not be enabled.", mtError, mbOK)
        ISBE.state = 0
        end
      else
        ISBE.state = 0
      end
    else
      ISBEEnabled, ISBEDisabled = autoAssemble(SCRIPT_instant_spawn_be, false)
      if (ISBEEnabled) then
      writeToLogFile("INFO", "Enabled " .. script_name)
      else
      writeToLogFile("WARNING", "Failed to enable " .. script_name)
      messageDialog("A problem occurred when attempting to enable " .. script_name .. ". It will not be enabled.", mtError, mbOK)
      ISBE.state = 0
      end
    end
    else
        if (ISBEEnabled) then
        autoAssemble(SCRIPT_instant_spawn_be, ISBEDisabled)
        writeToLogFile("INFO", "Disabled " .. script_name)
        end
    end
  else
    showMessage(script_name .. " is currently not working. Disabling...")
    ISBE.state = 0
    ISBE.Enabled = false
    writeToLogFile("WARNING", script_name .. " is not working. Disabling this option for your safety...")
  end
end

function ItemFilter(FilterItems)
local script_name = "Item Filter"
local list = ""
local SCRIPT_item_filter = SCRIPT_item_filter:gsub("%%arg1", Simple.FilterMesosAmount.Text)
SCRIPT_item_filter = SCRIPT_item_filter:gsub("%%arg2", Simple.FilterMode.ItemIndex)
SCRIPT_item_filter = SCRIPT_item_filter:gsub("%%arg3", "%%s")
SCRIPT_item_filter = SCRIPT_item_filter:gsub("%%arg4", ShowMesosDrop())
SCRIPT_item_filter = SCRIPT_item_filter:format(Simple.FilterList.Lines.Text)
if not checkNotWorking(SCRIPT_item_filter) then
  if FilterItems.checked then
    if checkAutoBan(SCRIPT_item_filter) then
      if messageDialog(script_name .. ' may cause an auto ban under varying conditions!!\n\nEnable anyways?', mtWarning, mbYes, mbNo, 0) == mrYes then
        FilterEnabled, FilterDisabled = autoAssemble(SCRIPT_item_filter, false)
        if (FilterEnabled) then
			writeToLogFile("INFO", "Enabled " .. script_name .. " after auto ban warning (params: " .. Simple.FilterMesosAmount.Text .. "," .. Simple.FilterMode.Items[Simple.FilterMode.ItemIndex] .. " (" .. Simple.FilterMode.ItemIndex .. ")," .. Simple.FilterList.Lines.Count .. " items," .. ShowMesosDrop() .. ")")
			else
			writeToLogFile("WARNING", "Failed to enable " .. script_name .. " (params: " .. Simple.FilterMesosAmount.Text .. "," .. Simple.FilterMode.Items[Simple.FilterMode.ItemIndex] .. " (" .. Simple.FilterMode.ItemIndex .. ")," .. Simple.FilterList.Lines.Count .. " items," .. ShowMesosDrop() .. ")")
			end
			ItemFilterBoxes()
      else
        FilterItems.state = 0
      end
    else
      FilterEnabled, FilterDisabled = autoAssemble(SCRIPT_item_filter, false)
      if (FilterEnabled) then
      writeToLogFile("INFO", "Enabled " .. script_name .. " (params: " .. Simple.FilterMesosAmount.Text .. "," .. Simple.FilterMode.Items[Simple.FilterMode.ItemIndex] .. " (" .. Simple.FilterMode.ItemIndex .. ")," .. Simple.FilterList.Lines.Count .. " items," .. ShowMesosDrop() .. ")")
      else
      writeToLogFile("WARNING", "Failed to enable " .. script_name .. " (params: " .. Simple.FilterMesosAmount.Text .. "," .. Simple.FilterMode.Items[Simple.FilterMode.ItemIndex] .. " (" .. Simple.FilterMode.ItemIndex .. ")," .. Simple.FilterList.Lines.Count .. " items," .. ShowMesosDrop() .. ")")
      end
      ItemFilterBoxes()
    end
    else
        if (FilterEnabled) then
        autoAssemble(SCRIPT_item_filter, FilterDisabled)
        writeToLogFile("INFO", "Disabled " .. script_name)
        end
        ItemFilterBoxes()
    end
  else
    showMessage(script_name .. " is currently not working. Disabling...")
    FilterItems.state = 0
    FilterItems.Enabled = false
    Simple.FilterMesosAmount.Enabled = false
    Simple.ShowMesosDrop.Enabled = false
    Simple.FilterMode.Enabled = false
    Simple.FilterList.Enabled = false
    writeToLogFile("WARNING", script_name .. " is not working. Disabling this option for your safety...")
  end
end

function ItemFilterBoxes()
if Simple.ItemFilter.Checked then
Simple.FilterMode.Enabled = false
Simple.ShowMesosDrop.Enabled = false
Simple.FilterList.ReadOnly = true
Simple.FilterMesosAmount.ReadOnly = true
else
Simple.FilterMode.Enabled = true
Simple.ShowMesosDrop.Enabled = true
Simple.FilterList.ReadOnly = false
Simple.FilterMesosAmount.ReadOnly = false
end
end

function ShowMesosDrop()
  local value = '1'
  if Simple.ShowMesosDrop.Checked then
    value = '50000'
  end
  return value
end

function JrBoogieUnlimitedMP(BoogieMP)
local script_name = "Jr. Boogie Unlimited MP"
local SCRIPT_jr_boogie_mp = SCRIPT_jr_boogie_mp:gsub("%%arg1", Simple.BoogieMPValue.Text)
if not checkNotWorking(SCRIPT_jr_boogie_mp) then
  if BoogieMP.checked then
    if checkAutoBan(SCRIPT_jr_boogie_mp) then
      if messageDialog(script_name .. ' may cause an auto ban under varying conditions!!\n\nEnable anyways?', mtWarning, mbYes, mbNo, 0) == mrYes then
        JrBoogieEnabled, JrBoogieDisabled = autoAssemble(SCRIPT_jr_boogie_mp, false)
        if (JrBoogieEnabled) then
        writeToLogFile("INFO", "Enabled " .. script_name .. " after auto ban warning (params: " .. Simple.BoogieMPValue.Text .. ")")
        else
        writeToLogFile("WARNING", "Failed to enable " .. script_name .. " (params: " .. Simple.BoogieMPValue.Text .. ")")
        end
        JrBoogieBoxes()
      else
        BoogieMP.state = 0
      end
    else
      JrBoogieEnabled, JrBoogieDisabled = autoAssemble(SCRIPT_jr_boogie_mp, false)
      if (JrBoogieEnabled) then
      writeToLogFile("INFO", "Enabled " .. script_name .. " (params: " .. Simple.BoogieMPValue.Text .. ")")
      else
      writeToLogFile("WARNING", "Failed to enable " .. script_name .. " (params: " .. Simple.BoogieMPValue.Text .. ")")
      end
      JrBoogieBoxes()
    end
    else
        if (JrBoogieEnabled) then
        autoAssemble(SCRIPT_jr_boogie_mp, JrBoogieDisabled)
        writeToLogFile("INFO", "Disabled " .. script_name)
        end
        JrBoogieBoxes()
    end
  else
    showMessage(script_name .. " is currently not working. Disabling...")
    BoogieMP.state = 0
    BoogieMP.Enabled = false
    Simple.BoogieMPValue.Enabled = false
    writeToLogFile("WARNING", script_name .. " is not working. Disabling this option for your safety...")
  end
end

function JrBoogieBoxes()
if Simple.JrBoogieUnlimitedMP.Checked then
Simple.BoogieMPValue.ReadOnly = true
else
Simple.BoogieMPValue.ReadOnly = false
end
end

function JumpDownAnywhere(JDA)
local script_name = "Jump Down Anywhere"
if not checkNotWorking(SCRIPT_jump_down) then
  if JDA.checked then
    if checkAutoBan(SCRIPT_jump_down) then
      if messageDialog(script_name .. ' may cause an auto ban under varying conditions!!\n\nEnable anyways?', mtWarning, mbYes, mbNo, 0) == mrYes then
        JDAEnabled, JDADisabled = autoAssemble(SCRIPT_jump_down, false)
        if (JDAEnabled) then
			writeToLogFile("INFO", "Enabled " .. script_name .. " after auto ban warning")
			else
			writeToLogFile("WARNING", "Failed to enable " .. script_name)
			end
      else
        JDA.state = 0
      end
    else
      JDAEnabled, JDADisabled = autoAssemble(SCRIPT_jump_down, false)
      if (JDAEnabled) then
      writeToLogFile("INFO", "Enabled " .. script_name)
      else
      writeToLogFile("WARNING", "Failed to enable " .. script_name)
      end
    end
    else
        if (JDAEnabled) then
        autoAssemble(SCRIPT_jump_down, JDADisabled)
        writeToLogFile("INFO", "Disabled " .. script_name)
        end
    end
  else
    showMessage(script_name .. " is currently not working. Disabling...")
    JDA.state = 0
    JDA.Enabled = false
    writeToLogFile("WARNING", script_name .. " is not working. Disabling this option for your safety...")
  end
end

function Kami(oKamiSama)
local script_name = "Kami"
local SCRIPT_kami = SCRIPT_kami:gsub("%%arg1", Simple.KamiX.Text)
SCRIPT_kami = SCRIPT_kami:gsub("%%arg2", Simple.KamiY.Text)
if not checkNotWorking(SCRIPT_kami) then
  if oKamiSama.checked then
    if checkAutoBan(SCRIPT_kami) then
      if messageDialog(script_name .. ' may cause an auto ban under varying conditions!!\n\nEnable anyways?', mtWarning, mbYes, mbNo, 0) == mrYes then
        KamiEnabled, KamiDisabled = autoAssemble(SCRIPT_kami, false)
        if (KamiEnabled) then
        writeToLogFile("INFO", "Enabled " .. script_name .. " after auto ban warning (params: " .. Simple.KamiX.Text .. "," .. Simple.KamiY.Text .. ")")
        else
        writeToLogFile("WARNING", "Failed to enable " .. script_name .. " (params: " .. Simple.KamiX.Text .. "," .. Simple.KamiY.Text .. ")")
        messageDialog("A problem occurred when attempting to enable " .. script_name .. ". It will not be enabled.", mtError, mbOK)
        oKamiSama.state = 0
        end
      else
        oKamiSama.state = 0
      end
      KamiBoxes()
    else
      KamiEnabled, KamiDisabled = autoAssemble(SCRIPT_kami, false)
      if (KamiEnabled) then
      writeToLogFile("INFO", "Enabled " .. script_name .. " (params: " .. Simple.KamiX.Text .. "," .. Simple.KamiY.Text .. ")")
      else
      writeToLogFile("WARNING", "Failed to enable " .. script_name .. " (params: " .. Simple.KamiX.Text .. "," .. Simple.KamiY.Text .. ")")
      messageDialog("A problem occurred when attempting to enable " .. script_name .. ". It will not be enabled.", mtError, mbOK)
      oKamiSama.state = 0
      end
      KamiBoxes()
    end
    else
        if (KamiEnabled) then
        autoAssemble(SCRIPT_kami, KamiDisabled)
        writeToLogFile("INFO", "Disabled " .. script_name)
        end
        KamiBoxes()
    end
  else
    showMessage(script_name .. " is currently not working. Disabling...")
    oKamiSama.state = 0
    oKamiSama.Enabled = false
    writeToLogFile("WARNING", script_name .. " is not working. Disabling this option for your safety...")
  end
end

function KamiBoxes()
if Simple.Kami.Checked then
  Simple.KamiX.ReadOnly = true
  Simple.KamiY.ReadOnly = true
else
  Simple.KamiX.ReadOnly = false
  Simple.KamiY.ReadOnly = false
end
end

function LevelPointer(LvlPtr)
local script_name = "Level Pointer"
if not checkNotWorking(SCRIPT_level_ptr) then
  if LvlPtr.checked then
    if checkAutoBan(SCRIPT_level_ptr) then
      if messageDialog(script_name .. ' may cause an auto ban under varying conditions!!\n\nEnable anyways?', mtWarning, mbYes, mbNo, 0) == mrYes then
        LvlPtrEnabled, LvlPtrDisabled = autoAssemble(SCRIPT_level_ptr, false)
        if (LvlPtrEnabled) then
        writeToLogFile("INFO", "Enabled " .. script_name .. " after auto ban warning")
        else
        writeToLogFile("WARNING", "Failed to enable " .. script_name)
        messageDialog("A problem occurred when attempting to enable " .. script_name .. ". It will not be enabled.", mtError, mbOK)
        LvlPtr.state = 0
        end
      else
        LvlPtr.state = 0
      end
    else
      LvlPtrEnabled, LvlPtrDisabled = autoAssemble(SCRIPT_level_ptr, false)
      if (LvlPtrEnabled) then
      writeToLogFile("INFO", "Enabled " .. script_name)
      else
      writeToLogFile("WARNING", "Failed to enable " .. script_name)
      messageDialog("A problem occurred when attempting to enable " .. script_name .. ". It will not be enabled.", mtError, mbOK)
      LvlPtr.state = 0
      end
    end
    else
        if (LvlPtrEnabled) then
        autoAssemble(SCRIPT_level_ptr, LvlPtrDisabled)
        writeToLogFile("INFO", "Disabled " .. script_name)
        end
    end
  else
    showMessage(script_name .. " is currently not working. Disabling...")
    LvlPtr.state = 0
    LvlPtr.Enabled = false
    writeToLogFile("WARNING", script_name .. " is not working. Disabling this option for your safety...")
  end
end

function LogoVideoSkip(LVSkip)
local script_name = "Logo+Video Skip"
if not checkNotWorking(SCRIPT_logovideo_skip) then
  if LVSkip.checked then
    if checkAutoBan(SCRIPT_logovideo_skip) then
      if messageDialog(script_name .. ' may cause an auto ban under varying conditions!!\n\nEnable anyways?', mtWarning, mbYes, mbNo, 0) == mrYes then
        LVSkipEnabled, LVSkipDisabled = autoAssemble(SCRIPT_logovideo_skip, false)
        if (LVSkipEnabled) then
        writeToLogFile("INFO", "Enabled " .. script_name .. " after auto ban warning")
        else
        writeToLogFile("WARNING", "Failed to enable " .. script_name)
        messageDialog("A problem occurred when attempting to enable " .. script_name .. ". It will not be enabled.", mtError, mbOK)
        LVSkip.state = 0
        end
      else
        LVSkip.state = 0
      end
    else
      LVSkipEnabled, LVSkipDisabled = autoAssemble(SCRIPT_logovideo_skip, false)
      if (LVSkipEnabled) then
      writeToLogFile("INFO", "Enabled " .. script_name)
      else
      writeToLogFile("WARNING", "Failed to enable " .. script_name)
      messageDialog("A problem occurred when attempting to enable " .. script_name .. ". It will not be enabled.", mtError, mbOK)
      LVSkip.state = 0
      end
    end
    else
        if (LVSkipEnabled) then
        autoAssemble(SCRIPT_logovideo_skip, LVSkipDisabled)
        writeToLogFile("INFO", "Disabled " .. script_name)
        end
    end
  else
    showMessage(script_name .. " is currently not working. Disabling...")
    LVSkip.state = 0
    LVSkip.Enabled = false
    writeToLogFile("WARNING", script_name .. " is not working. Disabling this option for your safety...")
  end
end

function MachNoDelay(MachNoDelay)
local script_name = "Mach No Delay"
if not checkNotWorking(SCRIPT_mach_no_delay) then
  if MachNoDelay.checked then
    if checkAutoBan(SCRIPT_mach_no_delay) then
      if messageDialog(script_name .. ' may cause an auto ban under varying conditions!!\n\nEnable anyways?', mtWarning, mbYes, mbNo, 0) == mrYes then
        MNDEnabled, MNDDisabled = autoAssemble(SCRIPT_mach_no_delay, false)
        if (MNDEnabled) then
        writeToLogFile("INFO", "Enabled " .. script_name .. " after auto ban warning")
        else
        writeToLogFile("WARNING", "Failed to enable " .. script_name)
        end
      else
        MachNoDelay.state = 0
      end
    else
      MNDEnabled, MNDDisabled = autoAssemble(SCRIPT_mach_no_delay, false)
      if (MNDEnabled) then
      writeToLogFile("INFO", "Enabled " .. script_name)
      else
      writeToLogFile("WARNING", "Failed to enable " .. script_name)
      end
    end
    else
        if (MNDEnabled) then
        autoAssemble(SCRIPT_mach_no_delay, MNDDisabled)
        writeToLogFile("INFO", "Disabled " .. script_name)
        end
    end
  else
    showMessage(script_name .. " is currently not working. Disabling...")
    MachNoDelay.state = 0
    MachNoDelay.Enabled = false
    writeToLogFile("WARNING", script_name .. " is not working. Disabling this option for your safety...")
  end
end

function MapRusher(MapRush)
local script_name = "Map Rusher"
if not checkNotWorking(SCRIPT_map_rusher) then
  if MapRush.checked then
    if checkAutoBan(SCRIPT_map_rusher) then
      if messageDialog(script_name .. ' may cause an auto ban under varying conditions!!\n\nEnable anyways?', mtWarning, mbYes, mbNo, 0) == mrYes then
        MapRushEnabled, MapRushDisabled = autoAssemble(SCRIPT_map_rusher, false)
        if (MapRushEnabled) then
        writeToLogFile("INFO", "Enabled " .. script_name .. " after auto ban warning")
        else
        writeToLogFile("WARNING", "Failed to enable " .. script_name)
        end
      else
        MapRush.state = 0
      end
    else
      MapRushEnabled, MapRushDisabled = autoAssemble(SCRIPT_map_rusher, false)
      if (MapRushEnabled) then
      writeToLogFile("INFO", "Enabled " .. script_name)
      else
      writeToLogFile("WARNING", "Failed to enable " .. script_name)
      end
    end
    else
        if (MapRushEnabled) then
        autoAssemble(SCRIPT_map_rusher, MapRushDisabled)
        writeToLogFile("INFO", "Disabled " .. script_name)
        end
    end
  else
    showMessage(script_name .. " is currently not working. Disabling...")
    MapRush.state = 0
    MapRush.Enabled = false
    writeToLogFile("WARNING", script_name .. " is not working. Disabling this option for your safety...")
  end
end

function MapSpeedUp(SpeedyMap)
local script_name = "Map Speed Up"
if not checkNotWorking(SCRIPT_map_speed_up) then
  if SpeedyMap.checked then
    if checkAutoBan(SCRIPT_map_speed_up) then
      if messageDialog(script_name .. ' may cause an auto ban under varying conditions!!\n\nEnable anyways?', mtWarning, mbYes, mbNo, 0) == mrYes then
        MapSpeedEnabled, MapSpeedDisabled = autoAssemble(SCRIPT_map_speed_up, false)
        if (MapSpeedEnabled) then
        writeToLogFile("INFO", "Enabled " .. script_name .. " after auto ban warning")
        else
        writeToLogFile("WARNING", "Failed to enable " .. script_name)
        messageDialog("A problem occurred when attempting to enable " .. script_name .. ". It will not be enabled.", mtError, mbOK)
        SpeedyMap.state = 0
        end
      else
        SpeedyMap.state = 0
      end
      MapSpeedBoxes()
    else
      MapSpeedEnabled, MapSpeedDisabled = autoAssemble(SCRIPT_map_speed_up, false)
      if (MapSpeedEnabled) then
      writeToLogFile("INFO", "Enabled " .. script_name)
      else
      writeToLogFile("WARNING", "Failed to enable " .. script_name)
      messageDialog("A problem occurred when attempting to enable " .. script_name .. ". It will not be enabled.", mtError, mbOK)
      SpeedyMap.state = 0
      end
      MapSpeedBoxes()
    end
    else
        if (MapSpeedEnabled) then
        autoAssemble(SCRIPT_map_speed_up, MapSpeedDisabled)
        writeToLogFile("INFO", "Disabled " .. script_name)
        end
        MapSpeedBoxes()
    end
  else
    showMessage(script_name .. " is currently not working. Disabling...")
    SpeedyMap.state = 0
    SpeedyMap.Enabled = false
    writeToLogFile("WARNING", script_name .. " is not working. Disabling this option for your safety...")
  end
end

function MapSpeedBoxes()
if Simple.MapSpeedUp.Checked then
  Simple.MobSpeedUp.Enabled = false
  Simple.VellumFreezev2.Enabled = false
  Simple.HideMostSkillAnimation.Enabled = false
else
  Simple.MobSpeedUp.Enabled = true
  Simple.VellumFreezev2.Enabled = true
  Simple.HideMostSkillAnimation.Enabled = true
end
end

function MesosPointer(MesosPtr)
local script_name = "Mesos Pointer"
if not checkNotWorking(SCRIPT_mesos_ptr) then
  if MesosPtr.checked then
    if checkAutoBan(SCRIPT_mesos_ptr) then
      if messageDialog(script_name .. ' may cause an auto ban under varying conditions!!\n\nEnable anyways?', mtWarning, mbYes, mbNo, 0) == mrYes then
        MesoPtrEnabled, MesoPtrDisabled = autoAssemble(SCRIPT_mesos_ptr, false)
        if (MesoPtrEnabled) then
        writeToLogFile("INFO", "Enabled " .. script_name .. " after auto ban warning")
        else
        writeToLogFile("WARNING", "Failed to enable " .. script_name)
        messageDialog("A problem occurred when attempting to enable " .. script_name .. ". It will not be enabled.", mtError, mbOK)
        MesosPtr.state = 0
        end
      else
        MesosPtr.state = 0
      end
    else
      MesoPtrEnabled, MesoPtrDisabled = autoAssemble(SCRIPT_mesos_ptr, false)
      if (MesoPtrEnabled) then
      writeToLogFile("INFO", "Enabled " .. script_name)
      else
      writeToLogFile("WARNING", "Failed to enable " .. script_name)
      messageDialog("A problem occurred when attempting to enable " .. script_name .. ". It will not be enabled.", mtError, mbOK)
      MesosPtr.state = 0
      end
    end
    else
        if (MesoPtrEnabled) then
        autoAssemble(SCRIPT_mesos_ptr, MesoPtrDisabled)
        writeToLogFile("INFO", "Disabled " .. script_name)
        end
    end
  else
    showMessage(script_name .. " is currently not working. Disabling...")
    MesosPtr.state = 0
    MesosPtr.Enabled = false
    writeToLogFile("WARNING", script_name .. " is not working. Disabling this option for your safety...")
  end
end

function MissGodmode(MissGM)
local script_name = "Miss Godmode"
if not checkNotWorking(SCRIPT_miss_godmode) then
  if MissGM.checked then
    if checkAutoBan(SCRIPT_miss_godmode) then
      if messageDialog(script_name .. ' may cause an auto ban under varying conditions!!\n\nEnable anyways?', mtWarning, mbYes, mbNo, 0) == mrYes then
        MissEnabled, MissDisabled = autoAssemble(SCRIPT_miss_godmode, false)
        if (MissEnabled) then
			writeToLogFile("INFO", "Enabled " .. script_name .. " after auto ban warning")
			else
			writeToLogFile("WARNING", "Failed to enable " .. script_name)
			end
			MissGodModeBoxes()
      else
        MissGM.state = 0
      end
    else
      MissEnabled, MissDisabled = autoAssemble(SCRIPT_miss_godmode, false)
      if (MissEnabled) then
      writeToLogFile("INFO", "Enabled " .. script_name)
      else
      writeToLogFile("WARNING", "Failed to enable " .. script_name)
      end
      MissGodModeBoxes()
    end
    else
        if (MissEnabled) then
        autoAssemble(SCRIPT_miss_godmode, MissDisabled)
        writeToLogFile("INFO", "Disabled " .. script_name)
        end
        MissGodModeBoxes()
    end
  else
    showMessage(script_name .. " is currently not working. Disabling...")
    MissGM.state = 0
    MissGM.Enabled = false
    writeToLogFile("WARNING", script_name .. " is not working. Disabling this option for your safety...")
  end
end

function MissGodModeBoxes()
if Simple.MissGodmode.Checked then
Simple.GodMode.Enabled = false
Simple.TimedGodmode.Enabled = false
else
if not checkNotWorking(SCRIPT_godmode) then
Simple.GodMode.Enabled = true
Simple.TimedGodmode.Enabled = true
end
end
end

function MobConfusion(MConfuse)
local script_name = "Mob Confusion"
if not checkNotWorking(SCRIPT_mob_confusion) then
  if MConfuse.checked then
    if checkAutoBan(SCRIPT_mob_confusion) then
      if messageDialog(script_name .. ' may cause an auto ban under varying conditions!!\n\nEnable anyways?', mtWarning, mbYes, mbNo, 0) == mrYes then
        MConfusionEnabled, MConfusionDisabled = autoAssemble(SCRIPT_mob_confusion, false)
        if (MConfusionEnabled) then
			writeToLogFile("INFO", "Enabled " .. script_name .. " after auto ban warning")
			else
			writeToLogFile("WARNING", "Failed to enable " .. script_name)
			end
      else
        MConfuse.state = 0
      end
    else
      MConfusionEnabled, MConfusionDisabled = autoAssemble(SCRIPT_mob_confusion, false)
      if (MConfusionEnabled) then
      writeToLogFile("INFO", "Enabled " .. script_name)
      else
      writeToLogFile("WARNING", "Failed to enable " .. script_name)
      end
    end
    else
        if (MConfusionEnabled) then
        autoAssemble(SCRIPT_mob_confusion, MConfusionDisabled)
        writeToLogFile("INFO", "Disabled " .. script_name)
        end
    end
  else
    showMessage(script_name .. " is currently not working. Disabling...")
    MConfuse.state = 0
    MConfuse.Enabled = false
    writeToLogFile("WARNING", script_name .. " is not working. Disabling this option for your safety...")
  end
end

function MobControl(MControl)
local script_name = "Mob Control"
local SCRIPT_mob_control = SCRIPT_mob_control:gsub("%%arg1", CheckMobControlValue())
if not checkNotWorking(SCRIPT_mob_control) then
  if MControl.checked then
    if checkAutoBan(SCRIPT_mob_control) then
      if messageDialog(script_name .. ' may cause an auto ban under varying conditions!!\n\nEnable anyways?', mtWarning, mbYes, mbNo, 0) == mrYes then
        MControlEnabled, MControlDisabled = autoAssemble(SCRIPT_mob_control, false)
        if (MControlEnabled) then
        writeToLogFile("INFO", "Enabled " .. script_name .. " after auto ban warning (params: " .. Simple.MobControlValues.Items[Simple.MobControlValues.ItemIndex] .. "," ..CheckMobControlValue() .. ")")
        else
        writeToLogFile("WARNING", "Failed to enable " .. script_name .. " (params: " .. Simple.MobControlValues.Items[Simple.MobControlValues.ItemIndex] .. "," ..CheckMobControlValue() .. ")")
        end
        MobControlBoxes()
      else
        MControl.state = 0
      end
    else
      MControlEnabled, MControlDisabled = autoAssemble(SCRIPT_mob_control, false)
      if (MControlEnabled) then
      writeToLogFile("INFO", "Enabled " .. script_name .. " (params: " .. Simple.MobControlValues.Items[Simple.MobControlValues.ItemIndex] .. "," ..CheckMobControlValue() .. ")")
      else
      writeToLogFile("WARNING", "Failed to enable " .. script_name .. " (params: " .. Simple.MobControlValues.Items[Simple.MobControlValues.ItemIndex] .. "," .. CheckMobControlValue() .. ")")
      end
      MobControlBoxes()
    end
    else
        if (MControlEnabled) then
        autoAssemble(SCRIPT_mob_control, MControlDisabled)
        writeToLogFile("INFO", "Disabled " .. script_name)
        end
        MobControlBoxes()
    end
  else
    showMessage(script_name .. " is currently not working. Disabling...")
    Simple.MobControlValues.Enabled = false
    MControl.state = 0
    MControl.Enabled = false
    Simple.MobControlValues.Enabled = false
    writeToLogFile("WARNING", script_name .. " is not working. Disabling this option for your safety...")
  end
end

function CheckMobControlValue()
local index = tostring(Simple.MobControlValues.ItemIndex)
local value = "01"
  if index == '0' then
    value = "01"
  elseif index == '1' then
    value = "02"
  elseif index == '2' then
    value = "03"
  elseif index == '3' then
    value = "04"
  elseif index == '4' then
    value = "06"
  end
return value
end

function MobControlBoxes()
if Simple.MobControl.Checked then
Simple.MobControlValues.Enabled = false
else
Simple.MobControlValues.Enabled = true
end
end

function MobDisarm(MDisarm)
local script_name = "Mob Disarm"
if not checkNotWorking(SCRIPT_mob_disarm) then
  if MDisarm.checked then
    if checkAutoBan(SCRIPT_mob_disarm) then
      if messageDialog(script_name .. ' may cause an auto ban under varying conditions!!\n\nEnable anyways?', mtWarning, mbYes, mbNo, 0) == mrYes then
        MDisarmEnabled, MDisarmDisabled = autoAssemble(SCRIPT_mob_disarm, false)
        if (MDisarmEnabled) then
			writeToLogFile("INFO", "Enabled " .. script_name .. " after auto ban warning")
			else
			writeToLogFile("WARNING", "Failed to enable " .. script_name)
			end
      else
        MDisarm.state = 0
      end
    else
      MDisarmEnabled, MDisarmDisabled = autoAssemble(SCRIPT_mob_disarm, false)
      if (MDisarmEnabled) then
      writeToLogFile("INFO", "Enabled " .. script_name)
      else
      writeToLogFile("WARNING", "Failed to enable " .. script_name)
      end
    end
    else
        if (MDisarmEnabled) then
        autoAssemble(SCRIPT_mob_disarm, MDisarmDisabled)
        writeToLogFile("INFO", "Disabled " .. script_name)
        end
    end
  else
    showMessage(script_name .. " is currently not working. Disabling...")
    MDisarm.state = 0
    MDisarm.Enabled = false
    writeToLogFile("WARNING", script_name .. " is not working. Disabling this option for your safety...")
  end
end

function MobFallDown(MFallDown)
local script_name = "Mob Fall Down"
if not checkNotWorking(SCRIPT_mob_fall_down) then
  if MFallDown.checked then
    if checkAutoBan(SCRIPT_mob_fall_down) then
      if messageDialog(script_name .. ' may cause an auto ban under varying conditions!!\n\nEnable anyways?', mtWarning, mbYes, mbNo, 0) == mrYes then
        MobFallEnabled, MobFallDisabled = autoAssemble(SCRIPT_mob_fall_down, false)
        if (MobFallEnabled) then
        writeToLogFile("INFO", "Enabled " .. script_name .. " after auto ban warning")
        else
        writeToLogFile("WARNING", "Failed to enable " .. script_name)
        messageDialog("A problem occurred when attempting to enable " .. script_name .. ". It will not be enabled.", mtError, mbOK)
        MFallDown.state = 0
        end
      else
        MFallDown.state = 0
      end
    else
      MobFallEnabled, MobFallDisabled = autoAssemble(SCRIPT_mob_fall_down, false)
      if (MobFallEnabled) then
      writeToLogFile("INFO", "Enabled " .. script_name)
      else
      writeToLogFile("WARNING", "Failed to enable " .. script_name)
      messageDialog("A problem occurred when attempting to enable " .. script_name .. ". It will not be enabled.", mtError, mbOK)
      MFallDown.state = 0
      end
    end
    else
        if (MobFallEnabled) then
        autoAssemble(SCRIPT_mob_fall_down, MobFallDisabled)
        writeToLogFile("INFO", "Disabled " .. script_name)
        end
    end
  else
    showMessage(script_name .. " is currently not working. Disabling...")
    MFallDown.state = 0
    MFallDown.Enabled = false
    writeToLogFile("WARNING", script_name .. " is not working. Disabling this option for your safety...")
  end
end

function MobFreeze(MFreeze)
local script_name = "Mob Freeze"
if not checkNotWorking(SCRIPT_mob_freeze) then
  if MFreeze.checked then
    if checkAutoBan(SCRIPT_mob_freeze) then
      if messageDialog(script_name .. ' may cause an auto ban under varying conditions!!\n\nEnable anyways?', mtWarning, mbYes, mbNo, 0) == mrYes then
        MFreezeEnabled, MFreezeDisabled = autoAssemble(SCRIPT_mob_freeze, false)
        if (MFreezeEnabled) then
			writeToLogFile("INFO", "Enabled " .. script_name .. " after auto ban warning")
			else
			writeToLogFile("WARNING", "Failed to enable " .. script_name)
			end
      else
        MFreeze.state = 0
      end
    else
      MFreezeEnabled, MFreezeDisabled = autoAssemble(SCRIPT_mob_freeze, false)
      if (MFreezeEnabled) then
      writeToLogFile("INFO", "Enabled " .. script_name)
      else
      writeToLogFile("WARNING", "Failed to enable " .. script_name)
      end
    end
    else
        if (MFreezeEnabled) then
        autoAssemble(SCRIPT_mob_freeze, MFreezeDisabled)
        writeToLogFile("INFO", "Disabled " .. script_name)
        end
    end
  else
    showMessage(script_name .. " is currently not working. Disabling...")
    MFreeze.state = 0
    MFreeze.Enabled = false
    writeToLogFile("WARNING", script_name .. " is not working. Disabling this option for your safety...")
  end
end

function MobFilter(FilterThoseMobs)
local script_name = "Mob Filter"
local SCRIPT_mob_filter = SCRIPT_mob_filter:gsub("%%arg1", "%%s")
SCRIPT_mob_filter = SCRIPT_mob_filter:format(Simple.MobFilterList.Lines.Text)
if not checkNotWorking(SCRIPT_mob_filter) then
  if FilterThoseMobs.checked then
    if checkAutoBan(SCRIPT_mob_filter) then
      if messageDialog(script_name .. ' may cause an auto ban under varying conditions!!\n\nEnable anyways?', mtWarning, mbYes, mbNo, 0) == mrYes then
        MobFilterEnabled, MobFilterDisabled = autoAssemble(SCRIPT_mob_filter, false)
        if (MobFilterEnabled) then
        writeToLogFile("INFO", "Enabled " .. script_name .. " after auto ban warning (params: " .. Simple.MobFilterList.Lines.Count .. " mobs)")
        else
        writeToLogFile("WARNING", "Failed to enable " .. script_name .. " (params: " .. Simple.MobFilterList.Lines.Count .. " mobs)")
        messageDialog("A problem occurred when attempting to enable " .. script_name .. ". It will not be enabled.", mtError, mbOK)
        FilterThoseMobs.state = 0
        end
        MobFilterBoxes()
      else
        FilterThoseMobs.state = 0
      end
    else
      MobFilterEnabled, MobFilterDisabled = autoAssemble(SCRIPT_mob_filter, false)
      if (MobFilterEnabled) then
      writeToLogFile("INFO", "Enabled " .. script_name .. " (params: " .. Simple.MobFilterList.Lines.Count .. " mobs)")
      else
      writeToLogFile("WARNING", "Failed to enable " .. script_name .. " (params: " .. Simple.MobFilterList.Lines.Count .. " mobs)")
      messageDialog("A problem occurred when attempting to enable " .. script_name .. ". It will not be enabled.", mtError, mbOK)
      FilterThoseMobs.state = 0
      end
      MobFilterBoxes()
    end
    else
        if (MobFilterEnabled) then
        autoAssemble(SCRIPT_mob_filter, MobFilterDisabled)
        writeToLogFile("INFO", "Disabled " .. script_name)
        end
        MobFilterBoxes()
    end
  else
    showMessage(script_name .. " is currently not working. Disabling...")
    FilterThoseMobs.state = 0
    FilterThoseMobs.Enabled = false
    Simple.MobFilterList.Enabled = false
    writeToLogFile("WARNING", script_name .. " is not working. Disabling this option for your safety...")
  end
end

function MobFilterBoxes()
if Simple.MobFilter.Checked then
Simple.MobFilterList.ReadOnly = true
else
Simple.MobFilterList.ReadOnly = false
end
end

function MobSpeedUp(SpeedyMob)
local script_name = "Mob Speed Up"
if not checkNotWorking(SCRIPT_mob_speed_up) then
  if SpeedyMob.checked then
    if checkAutoBan(SCRIPT_mob_speed_up) then
      if messageDialog(script_name .. ' may cause an auto ban under varying conditions!!\n\nEnable anyways?', mtWarning, mbYes, mbNo, 0) == mrYes then
        MobSpeedEnabled, MobSpeedDisabled = autoAssemble(SCRIPT_mob_speed_up, false)
        if (MobSpeedEnabled) then
        writeToLogFile("INFO", "Enabled " .. script_name .. " after auto ban warning")
        else
        writeToLogFile("WARNING", "Failed to enable " .. script_name)
        messageDialog("A problem occurred when attempting to enable " .. script_name .. ". It will not be enabled.", mtError, mbOK)
        SpeedyMob.state = 0
        end
      else
        SpeedyMob.state = 0
      end
      MobSpeedBoxes()
    else
      MobSpeedEnabled, MobSpeedDisabled = autoAssemble(SCRIPT_mob_speed_up, false)
      if (MobSpeedEnabled) then
      writeToLogFile("INFO", "Enabled " .. script_name)
      else
      writeToLogFile("WARNING", "Failed to enable " .. script_name)
      messageDialog("A problem occurred when attempting to enable " .. script_name .. ". It will not be enabled.", mtError, mbOK)
      SpeedyMob.state = 0
      end
      MobSpeedBoxes()
    end
    else
        if (MobSpeedEnabled) then
        autoAssemble(SCRIPT_mob_speed_up, MobSpeedDisabled)
        writeToLogFile("INFO", "Disabled " .. script_name)
        end
        MobSpeedBoxes()
    end
  else
    showMessage(script_name .. " is currently not working. Disabling...")
    SpeedyMob.state = 0
    SpeedyMob.Enabled = false
    writeToLogFile("WARNING", script_name .. " is not working. Disabling this option for your safety...")
  end
end

function MobSpeedBoxes()
if Simple.MobSpeedUp.Checked then
  Simple.MapSpeedUp.Enabled = false
  Simple.VellumFreezev2.Enabled = false
  Simple.HideMostSkillAnimation.Enabled = false
else
  Simple.MapSpeedUp.Enabled = true
  Simple.VellumFreezev2.Enabled = true
  Simple.HideMostSkillAnimation.Enabled = true
end
end

function MonkeySpiritsNoDelay(MonkeySpiritsND)
local script_name = "Monkey Spirits No Delay"
local SCRIPT_monkey_spirits = SCRIPT_monkey_spirits
if Simple.MonkeySpiritsType.ItemIndex == 1 then
script_name = "Monkey Spirits No Delay v2"
SCRIPT_monkey_spirits = SCRIPT_monkey_spirits_v2
end
SCRIPT_monkey_spirits = SCRIPT_monkey_spirits:gsub("%%arg1", Simple.MonkeySpiritsDelay.Text)
if not checkNotWorking(SCRIPT_monkey_spirits) then
  if MonkeySpiritsND.checked then
    if checkAutoBan(SCRIPT_monkey_spirits) then
      if messageDialog(script_name .. ' may cause an auto ban under varying conditions!!\n\nEnable anyways?', mtWarning, mbYes, mbNo, 0) == mrYes then
        MonkeySpiritsEnabled, MonkeySpiritsDisabled = autoAssemble(SCRIPT_monkey_spirits, false)
        if (MonkeySpiritsEnabled) then
			writeToLogFile("INFO", "Enabled " .. script_name .. " after auto ban warning")
			else
			writeToLogFile("WARNING", "Failed to enable " .. script_name)
			end
      else
        MonkeySpiritsND.state = 0
      end
      MSNDBoxes()
    else
      MonkeySpiritsEnabled, MonkeySpiritsDisabled = autoAssemble(SCRIPT_monkey_spirits, false)
      if (MonkeySpiritsEnabled) then
      writeToLogFile("INFO", "Enabled " .. script_name)
      else
      writeToLogFile("WARNING", "Failed to enable " .. script_name)
      messageDialog("A problem occurred. " .. script_name .. " will not be enabled.", mtError, mbOK)
      MonkeySpiritsND.state = 0
      end
      MSNDBoxes()
    end
    else
        if (MonkeySpiritsEnabled) then
        autoAssemble(SCRIPT_monkey_spirits, MonkeySpiritsDisabled)
        writeToLogFile("INFO", "Disabled " .. script_name)
        end
        MSNDBoxes()
    end
  else
    showMessage(script_name .. " is currently not working. Disabling...")
    MonkeySpiritsND.state = 0
    MonkeySpiritsND.Enabled = false
    writeToLogFile("WARNING", script_name .. " is not working. Disabling this option for your safety...")
  end
end

function SelectedMSNDType(sender)
local selected = sender.ItemIndex
Simple.MonkeySpiritsNoDelay.Enabled = true
if selected == 0 then
  if checkNotWorking(SCRIPT_monkey_spirits) then
    Simple.MonkeySpiritsNoDelay.Enabled = false
    showMessage("The selected Monkey Spirits No Delay type either is not working or was not loaded with the trainer. See Log File for more information.\n\nPlease select a different Monkey Spirits No Delay type.")
    writeToLogFile("WARNING", "Change of Monkey Spirits No Delay type to Monkey Spirits No Delay v1 failed. The script was either marked not working or was not loaded with the trainer")
  end
elseif selected == 1 then
  if checkNotWorking(SCRIPT_monkey_spirits_v2) then
    Simple.MonkeySpiritsNoDelay.Enabled = false
    showMessage("The selected Monkey Spirits No Delay type either is not working or was not loaded with the trainer. See Log File for more information.\n\nPlease select a different Monkey Spirits No Delay type.")
    writeToLogFile("WARNING", "Change of Monkey Spirits No Delay type to Monkey Spirits No Delay v2 failed. The script was either marked not working or was not loaded with the trainer")
  end
end
end

function MSNDBoxes()
if Simple.MonkeySpiritsNoDelay.Checked then
Simple.MonkeySpiritsType.Enabled = false
Simple.MonkeySpiritsDelay.ReadOnly = true
else
Simple.MonkeySpiritsType.Enabled = true
Simple.MonkeySpiritsDelay.ReadOnly = false
end
end

function MonkeySpiritsWithShikigamiHaunting(MonkeySpiritsShikigami)
local script_name = "Monkey Spirits with Shikigami Haunting"
if not checkNotWorking(SCRIPT_monkey_spirits_shiki) then
  if MonkeySpiritsShikigami.checked then
    if checkAutoBan(SCRIPT_monkey_spirits_shiki) then
      if messageDialog(script_name .. ' may cause an auto ban under varying conditions!!\n\nEnable anyways?', mtWarning, mbYes, mbNo, 0) == mrYes then
        MonkeySSHEnabled, MonkeySSHDisabled = autoAssemble(SCRIPT_monkey_spirits_shiki, false)
        if (MonkeySSHEnabled) then
        writeToLogFile("INFO", "Enabled " .. script_name .. " after auto ban warning")
        else
        writeToLogFile("WARNING", "Failed to enable " .. script_name)
        messageDialog("A problem occurred when attempting to enable " .. script_name .. ". It will not be enabled.", mtError, mbOK)
        MonkeySpiritsShikigami.state = 0
        end
      else
        MonkeySpiritsShikigami.state = 0
      end
    else
      MonkeySSHEnabled, MonkeySSHDisabled = autoAssemble(SCRIPT_monkey_spirits_shiki, false)
      if (MonkeySSHEnabled) then
      writeToLogFile("INFO", "Enabled " .. script_name)
      else
      writeToLogFile("WARNING", "Failed to enable " .. script_name)
      messageDialog("A problem occurred when attempting to enable " .. script_name .. ". It will not be enabled.", mtError, mbOK)
      MonkeySpiritsShikigami.state = 0
      end
    end
    else
        if (MonkeySSHEnabled) then
        autoAssemble(SCRIPT_monkey_spirits_shiki, MonkeySSHDisabled)
        writeToLogFile("INFO", "Disabled " .. script_name)
        end
    end
  else
    showMessage(script_name .. " is currently not working. Disabling...")
    MonkeySpiritsShikigami.state = 0
    MonkeySpiritsShikigami.Enabled = false
    writeToLogFile("WARNING", script_name .. " is not working. Disabling this option for your safety...")
  end
end

function MouseCamCtrl(MouseCam)
local script_name = "Mouse Camera Control"
if not checkNotWorking(SCRIPT_mouse_cam_control) then
  if MouseCam.checked then
    if checkAutoBan(SCRIPT_mouse_cam_control) then
      if messageDialog(script_name .. ' may cause an auto ban under varying conditions!!\n\nEnable anyways?', mtWarning, mbYes, mbNo, 0) == mrYes then
        MCCEnabled, MCCDisabled = autoAssemble(SCRIPT_mouse_cam_control, false)
        if (MCCEnabled) then
        writeToLogFile("INFO", "Enabled " .. script_name .. " after auto ban warning")
        else
        writeToLogFile("WARNING", "Failed to enable " .. script_name)
        messageDialog("A problem occurred when attempting to enable " .. script_name .. ". It will not be enabled.", mtError, mbOK)
        MouseCam.state = 0
        end
      else
        MouseCam.state = 0
      end
    else
      MCCEnabled, MCCDisabled = autoAssemble(SCRIPT_mouse_cam_control, false)
      if (MCCEnabled) then
      writeToLogFile("INFO", "Enabled " .. script_name)
      else
      writeToLogFile("WARNING", "Failed to enable " .. script_name)
      messageDialog("A problem occurred when attempting to enable " .. script_name .. ". It will not be enabled.", mtError, mbOK)
      MouseCam.state = 0
      end
    end
    else
        if (MCCEnabled) then
        autoAssemble(SCRIPT_mouse_cam_control, MCCDisabled)
        writeToLogFile("INFO", "Disabled " .. script_name)
        end
    end
  else
    showMessage(script_name .. " is currently not working. Disabling...")
    MouseCam.state = 0
    MouseCam.Enabled = false
    writeToLogFile("WARNING", script_name .. " is not working. Disabling this option for your safety...")
  end
end

function MSCRCBypass(BypassCRC)
local script_name = "MSCRC Bypass"
if not checkNotWorking(SCRIPT_mscrc_bypass) then
  if BypassCRC.checked then
    if checkAutoBan(SCRIPT_mscrc_bypass) then
      if messageDialog(script_name .. ' may cause an auto ban under varying conditions!!\n\nEnable anyways?', mtWarning, mbYes, mbNo, 0) == mrYes then
        MSCRCEnabled, MSCRCDisabled = autoAssemble(SCRIPT_mscrc_bypass, false)
        if (MSCRCEnabled) then
			writeToLogFile("INFO", "Enabled " .. script_name .. " after auto ban warning")
			else
			writeToLogFile("WARNING", "Failed to enable " .. script_name)
			end
      else
        BypassCRC.state = 0
      end
    else
      MSCRCEnabled, MSCRCDisabled = autoAssemble(SCRIPT_mscrc_bypass, false)
      if (MSCRCEnabled) then
      writeToLogFile("INFO", "Enabled " .. script_name)
      else
      writeToLogFile("WARNING", "Failed to enable " .. script_name)
      messageDialog("A problem occurred when attempting to enable " .. script_name .. ". It will not be enabled.", mtError, mbOK)
      BypassCRC.state = 0
      end
    end
    else
        if (MSCRCEnabled) then
        autoAssemble(SCRIPT_mscrc_bypass, MSCRCDisabled)
        writeToLogFile("INFO", "Disabled " .. script_name)
        end
    end
  else
    showMessage(script_name .. " is currently not working. Disabling...")
    BypassCRC.state = 0
    BypassCRC.Enabled = false
    writeToLogFile("WARNING", script_name .. " is not working. Disabling this option for your safety...")
  end
end

function NoBackground(NoBackg)
local script_name = "No Background"
if not checkNotWorking(SCRIPT_no_background) then
  if NoBackg.checked then
    if checkAutoBan(SCRIPT_no_background) then
      if messageDialog(script_name .. ' may cause an auto ban under varying conditions!!\n\nEnable anyways?', mtWarning, mbYes, mbNo, 0) == mrYes then
        NBEnabled, NBDisabled = autoAssemble(SCRIPT_no_background, false)
        if (NBEnabled) then
			writeToLogFile("INFO", "Enabled " .. script_name .. " after auto ban warning")
			else
			writeToLogFile("WARNING", "Failed to enable " .. script_name)
			end
      else
        NoBackg.state = 0
      end
    else
      NBEnabled, NBDisabled = autoAssemble(SCRIPT_no_background, false)
      if (NBEnabled) then
      writeToLogFile("INFO", "Enabled " .. script_name)
      else
      writeToLogFile("WARNING", "Failed to enable " .. script_name)
      end
    end
    else
        if (NBEnabled) then
        autoAssemble(SCRIPT_no_background, NBDisabled)
        writeToLogFile("INFO", "Disabled " .. script_name)
        end
    end
  else
    showMessage(script_name .. " is currently not working. Disabling...")
    NoBackg.state = 0
    NoBackg.Enabled = false
    writeToLogFile("WARNING", script_name .. " is not working. Disabling this option for your safety...")
  end
end

function NoBlazingExtinctionEffect(NoBlazingEffect)
local script_name = "No Blazing Extinction Effect"
if not checkNotWorking(SCRIPT_no_blazing_effect) then
  if NoBlazingEffect.checked then
    if checkAutoBan(SCRIPT_no_blazing_effect) then
      if messageDialog(script_name .. ' may cause an auto ban under varying conditions!!\n\nEnable anyways?', mtWarning, mbYes, mbNo, 0) == mrYes then
        NoBlazingEnabled, NoBlazingDisabled = autoAssemble(SCRIPT_no_blazing_effect, false)
        if (NoBlazingEnabled) then
			writeToLogFile("INFO", "Enabled " .. script_name .. " after auto ban warning")
			else
			writeToLogFile("WARNING", "Failed to enable " .. script_name)
			end
      else
        NoBlazingEffect.state = 0
      end
    else
      NoBlazingEnabled, NoBlazingDisabled = autoAssemble(SCRIPT_no_blazing_effect, false)
      if (NoBlazingEnabled) then
      writeToLogFile("INFO", "Enabled " .. script_name)
      else
      writeToLogFile("WARNING", "Failed to enable " .. script_name)
      end
    end
    else
        if (NoBlazingEnabled) then
        autoAssemble(SCRIPT_no_blazing_effect, NoBlazingDisabled)
        writeToLogFile("INFO", "Disabled " .. script_name)
        end
    end
  else
    showMessage(script_name .. " is currently not working. Disabling...")
    NoBlazingEffect.state = 0
    NoBlazingEffect.Enabled = false
    writeToLogFile("WARNING", script_name .. " is not working. Disabling this option for your safety...")
  end
end

function NoBlueBoxes(NoBlueBoxes)
local script_name = "No Blue Boxes"
if not checkNotWorking(SCRIPT_no_blue_boxes) then
  if NoBlueBoxes.checked then
    if checkAutoBan(SCRIPT_no_blue_boxes) then
      if messageDialog(script_name .. ' may cause an auto ban under varying conditions!!\n\nEnable anyways?', mtWarning, mbYes, mbNo, 0) == mrYes then
        NBBEnabled, NBBDisabled = autoAssemble(SCRIPT_no_blue_boxes, false)
        if (NBBEnabled) then
        writeToLogFile("INFO", "Enabled " .. script_name .. " after auto ban warning")
        else
        writeToLogFile("WARNING", "Failed to enable " .. script_name)
        end
      else
        NoBlueBoxes.state = 0
      end
    else
      NBBEnabled, NBBDisabled = autoAssemble(SCRIPT_no_blue_boxes, false)
      if (NBBEnabled) then
      writeToLogFile("INFO", "Enabled " .. script_name)
      else
      writeToLogFile("WARNING", "Failed to enable " .. script_name)
      end
    end
    else
        if (NBBEnabled) then
        autoAssemble(SCRIPT_no_blue_boxes, NBBDisabled)
        writeToLogFile("INFO", "Disabled " .. script_name)
        end
    end
  else
    showMessage(script_name .. " is currently not working. Disabling...")
    NoBlueBoxes.state = 0
    NoBlueBoxes.Enabled = false
    writeToLogFile("WARNING", script_name .. " is not working. Disabling this option for your safety...")
  end
end

function NoCatchBreath(NoBreath)
local script_name = "No Catch Breath"
if not checkNotWorking(SCRIPT_no_catch_breath) then
  if NoBreath.checked then
    if checkAutoBan(SCRIPT_no_catch_breath) then
      if messageDialog(script_name .. ' may cause an auto ban under varying conditions!!\n\nEnable anyways?', mtWarning, mbYes, mbNo, 0) == mrYes then
        NoBreathEnabled, NoBreathDisabled = autoAssemble(SCRIPT_no_catch_breath, false)
        if (NoBreathEnabled) then
        writeToLogFile("INFO", "Enabled " .. script_name .. " after auto ban warning")
        else
        writeToLogFile("WARNING", "Failed to enable " .. script_name)
        messageDialog("A problem occurred when attempting to enable " .. script_name .. ". It will not be enabled.", mtError, mbOK)
        NoBreath.state = 0
        end
      else
        NoBreath.state = 0
      end
    else
      NoBreathEnabled, NoBreathDisabled = autoAssemble(SCRIPT_no_catch_breath, false)
      if (NoBreathEnabled) then
      writeToLogFile("INFO", "Enabled " .. script_name)
      else
      writeToLogFile("WARNING", "Failed to enable " .. script_name)
      messageDialog("A problem occurred when attempting to enable " .. script_name .. ". It will not be enabled.", mtError, mbOK)
      NoBreath.state = 0
      end
    end
    else
        if (NoBreathEnabled) then
        autoAssemble(SCRIPT_no_catch_breath, NoBreathDisabled)
        writeToLogFile("INFO", "Disabled " .. script_name)
        end
    end
  else
    showMessage(script_name .. " is currently not working. Disabling...")
    NoBreath.state = 0
    NoBreath.Enabled = false
    writeToLogFile("WARNING", script_name .. " is not working. Disabling this option for your safety...")
  end
end

function NoComboAnimation(NoComboAni)
local script_name = "No Combo Animation"
if not checkNotWorking(SCRIPT_no_combo_ani) then
  if NoComboAni.checked then
    if checkAutoBan(SCRIPT_no_combo_ani) then
      if messageDialog(script_name .. ' may cause an auto ban under varying conditions!!\n\nEnable anyways?', mtWarning, mbYes, mbNo, 0) == mrYes then
        ComboAniEnabled, ComboAniDisabled = autoAssemble(SCRIPT_no_combo_ani, false)
        if (ComboAniEnabled) then
			writeToLogFile("INFO", "Enabled " .. script_name .. " after auto ban warning")
			else
			writeToLogFile("WARNING", "Failed to enable " .. script_name)
			end
      else
        NoComboAni.state = 0
      end
    else
      ComboAniEnabled, ComboAniDisabled = autoAssemble(SCRIPT_no_combo_ani, false)
      if (ComboAniEnabled) then
      writeToLogFile("INFO", "Enabled " .. script_name)
      else
      writeToLogFile("WARNING", "Failed to enable " .. script_name)
      end
    end
    else
        if (ComboAniEnabled) then
        autoAssemble(SCRIPT_no_combo_ani, ComboAniDisabled)
        writeToLogFile("INFO", "Disabled " .. script_name)
        end
    end
  else
    showMessage(script_name .. " is currently not working. Disabling...")
    NoComboAni.state = 0
    NoComboAni.Enabled = false
    writeToLogFile("WARNING", script_name .. " is not working. Disabling this option for your safety...")
  end
end

function NoCooldown(NoSkillCooldown)
local script_name = "No Cooldown"
if not checkNotWorking(SCRIPT_no_cooldown) then
  if NoSkillCooldown.checked then
    if checkAutoBan(SCRIPT_no_cooldown) then
      if messageDialog(script_name .. ' may cause an auto ban under varying conditions!!\n\nEnable anyways?', mtWarning, mbYes, mbNo, 0) == mrYes then
        CDEnabled, CDDisabled = autoAssemble(SCRIPT_no_cooldown, false)
        if (CDEnabled) then
			writeToLogFile("INFO", "Enabled " .. script_name .. " after auto ban warning")
			else
			writeToLogFile("WARNING", "Failed to enable " .. script_name)
			end
      else
        NoSkillCooldown.state = 0
      end
    else
      CDEnabled, CDDisabled = autoAssemble(SCRIPT_no_cooldown, false)
      if (CDEnabled) then
      writeToLogFile("INFO", "Enabled " .. script_name)
      else
      writeToLogFile("WARNING", "Failed to enable " .. script_name)
      end
    end
    else
        if (CDEnabled) then
        autoAssemble(SCRIPT_no_cooldown, CDDisabled)
        writeToLogFile("INFO", "Disabled " .. script_name)
        end
    end
  else
    showMessage(script_name .. " is currently not working. Disabling...")
    NoSkillCooldown.state = 0
    NoSkillCooldown.Enabled = false
    writeToLogFile("WARNING", script_name .. " is not working. Disabling this option for your safety...")
  end
end

function NoDCPopup(NoPopups)
local script_name = "No DC Popup"
if not checkNotWorking(SCRIPT_no_dc_popup) then
  if NoPopups.checked then
    if checkAutoBan(SCRIPT_no_dc_popup) then
      if messageDialog(script_name .. ' may cause an auto ban under varying conditions!!\n\nEnable anyways?', mtWarning, mbYes, mbNo, 0) == mrYes then
        NoDCEnabled, NoDCDisabled = autoAssemble(SCRIPT_no_dc_popup, false)
        if (NoDCEnabled) then
        writeToLogFile("INFO", "Enabled " .. script_name .. " after auto ban warning")
        else
        writeToLogFile("WARNING", "Failed to enable " .. script_name)
        messageDialog("A problem occurred when attempting to enable " .. script_name .. ". It will not be enabled.", mtError, mbOK)
        NoPopups.state = 0
        end
      else
        NoPopups.state = 0
      end
    else
      NoDCEnabled, NoDCDisabled = autoAssemble(SCRIPT_no_dc_popup, false)
      if (NoDCEnabled) then
      writeToLogFile("INFO", "Enabled " .. script_name)
      else
      writeToLogFile("WARNING", "Failed to enable " .. script_name)
      messageDialog("A problem occurred when attempting to enable " .. script_name .. ". It will not be enabled.", mtError, mbOK)
      NoPopups.state = 0
      end
    end
    else
        if (NoDCEnabled) then
        autoAssemble(SCRIPT_no_dc_popup, NoDCDisabled)
        writeToLogFile("INFO", "Disabled " .. script_name)
        end
    end
  else
    showMessage(script_name .. " is currently not working. Disabling...")
    NoPopups.state = 0
    NoPopups.Enabled = false
    writeToLogFile("WARNING", script_name .. " is not working. Disabling this option for your safety...")
  end
end

function NoDelayArrowPlatter(NDAP)
local script_name = "No Delay Arrow Platter"
local SCRIPT_no_delay_arrow_plat = SCRIPT_no_delay_arrow_plat:gsub("%%arg1", Simple.ArrowPlatterDelay.Text)
if not checkNotWorking(SCRIPT_no_delay_arrow_plat) then
  if NDAP.checked then
    if checkAutoBan(SCRIPT_no_delay_arrow_plat) then
      if messageDialog(script_name .. ' may cause an auto ban under varying conditions!!\n\nEnable anyways?', mtWarning, mbYes, mbNo, 0) == mrYes then
        NDAPEnabled, NDAPDisabled = autoAssemble(SCRIPT_no_delay_arrow_plat, false)
        if (NDAPEnabled) then
        writeToLogFile("INFO", "Enabled " .. script_name .. " after auto ban warning (params: " .. Simple.ArrowPlatterDelay.Text .. ")")
        else
        writeToLogFile("WARNING", "Failed to enable " .. script_name .. " (params: " .. Simple.ArrowPlatterDelay.Text .. ")")
        end
        NDAPBoxes()
      else
        NDAP.state = 0
      end
    else
      NDAPEnabled, NDAPDisabled = autoAssemble(SCRIPT_no_delay_arrow_plat, false)
      if (NDAPEnabled) then
      writeToLogFile("INFO", "Enabled " .. script_name .. " (params: " .. Simple.ArrowPlatterDelay.Text .. ")")
      else
      writeToLogFile("WARNING", "Failed to enable " .. script_name .. " (params: " .. Simple.ArrowPlatterDelay.Text .. ")")
      end
      NDAPBoxes()
    end
    else
        if (NDAPEnabled) then
        autoAssemble(SCRIPT_no_delay_arrow_plat, NDAPDisabled)
        writeToLogFile("INFO", "Disabled " .. script_name)
        end
        NDAPBoxes()
    end
  else
    showMessage(script_name .. " is currently not working. Disabling...")
    NDAP.state = 0
    NDAP.Enabled = false
    Simple.ArrowPlatterDelay.Enabled = false
    writeToLogFile("WARNING", script_name .. " is not working. Disabling this option for your safety...")
  end
end

function NDAPBoxes()
if Simple.NoDelayArrowPlatter.Checked then
Simple.ArrowPlatterDelay.ReadOnly = true
else
Simple.ArrowPlatterDelay.ReadOnly = false
end
end

function NoDelayBlazingExtinction(NDBE)
local script_name = "No Delay Blazing Extinction"
if not checkNotWorking(SCRIPT_no_delay_be) then
  if NDBE.checked then
    if checkAutoBan(SCRIPT_no_delay_be) then
      if messageDialog(script_name .. ' may cause an auto ban under varying conditions!!\n\nEnable anyways?', mtWarning, mbYes, mbNo, 0) == mrYes then
        NDBEEnabled, NDBEDisabled = autoAssemble(SCRIPT_no_delay_be, false)
        if (NDBEEnabled) then
        writeToLogFile("INFO", "Enabled " .. script_name .. " after auto ban warning")
        else
        writeToLogFile("WARNING", "Failed to enable " .. script_name)
        messageDialog("A problem occurred when attempting to enable " .. script_name .. ". It will not be enabled.", mtError, mbOK)
        NDBE.state = 0
        end
      else
        NDBE.state = 0
      end
    else
      NDBEEnabled, NDBEDisabled = autoAssemble(SCRIPT_no_delay_be, false)
      if (NDBEEnabled) then
      writeToLogFile("INFO", "Enabled " .. script_name)
      else
      writeToLogFile("WARNING", "Failed to enable " .. script_name)
      messageDialog("A problem occurred when attempting to enable " .. script_name .. ". It will not be enabled.", mtError, mbOK)
      NDBE.state = 0
      end
    end
    else
        if (NDBEEnabled) then
        autoAssemble(SCRIPT_no_delay_be, NDBEDisabled)
        writeToLogFile("INFO", "Disabled " .. script_name)
        end
    end
  else
    showMessage(script_name .. " is currently not working. Disabling...")
    NDBE.state = 0
    NDBE.Enabled = false
    writeToLogFile("WARNING", script_name .. " is not working. Disabling this option for your safety...")
  end
end

function NoDelayFlashJump(NDFJ)
local script_name = "No Delay Flash Jump"
if not checkNotWorking(SCRIPT_no_delay_fj) then
  if NDFJ.checked then
    if checkAutoBan(SCRIPT_no_delay_fj) then
      if messageDialog(script_name .. ' may cause an auto ban under varying conditions!!\n\nEnable anyways?', mtWarning, mbYes, mbNo, 0) == mrYes then
        NDFJEnabled, NDFJDisabled = autoAssemble(SCRIPT_no_delay_fj, false)
        if (NDFJEnabled) then
        writeToLogFile("INFO", "Enabled " .. script_name .. " after auto ban warning")
        else
        writeToLogFile("WARNING", "Failed to enable " .. script_name)
        end
      else
        NDFJ.state = 0
      end
    else
      NDFJEnabled, NDFJDisabled = autoAssemble(SCRIPT_no_delay_fj, false)
      if (NDFJEnabled) then
      writeToLogFile("INFO", "Enabled " .. script_name)
      else
      writeToLogFile("WARNING", "Failed to enable " .. script_name)
      end
    end
    else
        if (NDFJEnabled) then
        autoAssemble(SCRIPT_no_delay_fj, NDFJDisabled)
        writeToLogFile("INFO", "Disabled " .. script_name)
        end
    end
  else
    showMessage(script_name .. " is currently not working. Disabling...")
    NDFJ.state = 0
    NDFJ.Enabled = false
    writeToLogFile("WARNING", script_name .. " is not working. Disabling this option for your safety...")
  end
end

function NoDelayIngameDirectionEvent(ND_IDE)
local script_name = "No Delay Ingame Direction Event"
if not checkNotWorking(SCRIPT_no_delay_ingame_dir) then
  if ND_IDE.checked then
    if checkAutoBan(SCRIPT_no_delay_ingame_dir) then
      if messageDialog(script_name .. ' may cause an auto ban under varying conditions!!\n\nEnable anyways?', mtWarning, mbYes, mbNo, 0) == mrYes then
        DirectionEventEnabled, DirectionEventDisabled = autoAssemble(SCRIPT_no_delay_ingame_dir, false)
        if (DirectionEventEnabled) then
        writeToLogFile("INFO", "Enabled " .. script_name .. " after auto ban warning")
        else
        writeToLogFile("WARNING", "Failed to enable " .. script_name)
        end
      else
        ND_IDE.state = 0
      end
    else
      DirectionEventEnabled, DirectionEventDisabled = autoAssemble(SCRIPT_no_delay_ingame_dir, false)
      if (DirectionEventEnabled) then
      writeToLogFile("INFO", "Enabled " .. script_name)
      else
      writeToLogFile("WARNING", "Failed to enable " .. script_name)
      end
    end
    else
        if (DirectionEventEnabled) then
        autoAssemble(SCRIPT_no_delay_ingame_dir, DirectionEventDisabled)
        writeToLogFile("INFO", "Disabled " .. script_name)
        end
    end
  else
    showMessage(script_name .. " is currently not working. Disabling...")
    ND_IDE.state = 0
    ND_IDE.Enabled = false
    writeToLogFile("WARNING", script_name .. " is not working. Disabling this option for your safety...")
  end
end

function NoFadeStages(NoFade)
local script_name = "No Fade Stages"
if not checkNotWorking(SCRIPT_no_fade_stages) then
  if NoFade.checked then
    if checkAutoBan(SCRIPT_no_fade_stages) then
      if messageDialog(script_name .. ' may cause an auto ban under varying conditions!!\n\nEnable anyways?', mtWarning, mbYes, mbNo, 0) == mrYes then
        NoFadeEnabled, NoFadeDisabled = autoAssemble(SCRIPT_no_fade_stages, false)
        if (NoFadeEnabled) then
			writeToLogFile("INFO", "Enabled " .. script_name .. " after auto ban warning")
			else
			writeToLogFile("WARNING", "Failed to enable " .. script_name)
			end
      else
        NoFade.state = 0
      end
    else
      NoFadeEnabled, NoFadeDisabled = autoAssemble(SCRIPT_no_fade_stages, false)
      if (NoFadeEnabled) then
      writeToLogFile("INFO", "Enabled " .. script_name)
      else
      writeToLogFile("WARNING", "Failed to enable " .. script_name)
      end
    end
    else
        if (NoFadeEnabled) then
        autoAssemble(SCRIPT_no_fade_stages, NoFadeDisabled)
        writeToLogFile("INFO", "Disabled " .. script_name)
        end
    end
  else
    showMessage(script_name .. " is currently not working. Disabling...")
    NoFade.state = 0
    NoFade.Enabled = false
    writeToLogFile("WARNING", script_name .. " is not working. Disabling this option for your safety...")
  end
end

function NoItemFloating(NoItemFloat)
local script_name = "No Item Floating"
if not checkNotWorking(SCRIPT_no_item_floating) then
  if NoItemFloat.checked then
    if checkAutoBan(SCRIPT_no_item_floating) then
      if messageDialog(script_name .. ' may cause an auto ban under varying conditions!!\n\nEnable anyways?', mtWarning, mbYes, mbNo, 0) == mrYes then
        ItemFEnabled, ItemFDisabled = autoAssemble(SCRIPT_no_item_floating, false)
        if (ItemFEnabled) then
			writeToLogFile("INFO", "Enabled " .. script_name .. " after auto ban warning")
			else
			writeToLogFile("WARNING", "Failed to enable " .. script_name)
			end
      else
        NoItemFloat.state = 0
      end
    else
      ItemFEnabled, ItemFDisabled = autoAssemble(SCRIPT_no_item_floating, false)
      if (ItemFEnabled) then
      writeToLogFile("INFO", "Enabled " .. script_name)
      else
      writeToLogFile("WARNING", "Failed to enable " .. script_name)
      end
    end
    else
        if (ItemFEnabled) then
        autoAssemble(SCRIPT_no_item_floating, ItemFDisabled)
        writeToLogFile("INFO", "Disabled " .. script_name)
        end
    end
  else
    showMessage(script_name .. " is currently not working. Disabling...")
    NoItemFloat.state = 0
    NoItemFloat.Enabled = false
    writeToLogFile("WARNING", script_name .. " is not working. Disabling this option for your safety...")
  end
end

function NoLootAnimation(NoLootAni)
local script_name = "No Loot Animation"
if not checkNotWorking(SCRIPT_no_loot_ani) then
  if NoLootAni.checked then
    if checkAutoBan(SCRIPT_no_loot_ani) then
      if messageDialog(script_name .. ' may cause an auto ban under varying conditions!!\n\nEnable anyways?', mtWarning, mbYes, mbNo, 0) == mrYes then
        NLAEnabled, NLADisabled = autoAssemble(SCRIPT_no_loot_ani, false)
        if (NLAEnabled) then
        writeToLogFile("INFO", "Enabled " .. script_name .. " after auto ban warning")
        else
        writeToLogFile("WARNING", "Failed to enable " .. script_name)
        end
      else
        NoLootAni.state = 0
      end
    else
      NLAEnabled, NLADisabled = autoAssemble(SCRIPT_no_loot_ani, false)
      if (NLAEnabled) then
      writeToLogFile("INFO", "Enabled " .. script_name)
      else
      writeToLogFile("WARNING", "Failed to enable " .. script_name)
      end
    end
    else
        if (NLAEnabled) then
        autoAssemble(SCRIPT_no_loot_ani, NLADisabled)
        writeToLogFile("INFO", "Disabled " .. script_name)
        end
    end
  else
    showMessage(script_name .. " is currently not working. Disabling...")
    NoLootAni.state = 0
    NoLootAni.Enabled = false
    writeToLogFile("WARNING", script_name .. " is not working. Disabling this option for your safety...")
  end
end

function NoMobReaction(NMReaction)
local script_name = "No Mob Reaction"
if not checkNotWorking(SCRIPT_no_mob_reaction) then
  if NMReaction.checked then
    if checkAutoBan(SCRIPT_no_mob_reaction) then
      if messageDialog(script_name .. ' may cause an auto ban under varying conditions!!\n\nEnable anyways?', mtWarning, mbYes, mbNo, 0) == mrYes then
        NoReactionEnabled, NoReactionDisabled = autoAssemble(SCRIPT_no_mob_reaction, false)
        if (NoReactionEnabled) then
			writeToLogFile("INFO", "Enabled " .. script_name .. " after auto ban warning")
			else
			writeToLogFile("WARNING", "Failed to enable " .. script_name)
			end
      else
        NMReaction.state = 0
      end
    else
      NoReactionEnabled, NoReactionDisabled = autoAssemble(SCRIPT_no_mob_reaction, false)
      if (NoReactionEnabled) then
      writeToLogFile("INFO", "Enabled " .. script_name)
      else
      writeToLogFile("WARNING", "Failed to enable " .. script_name)
      end
    end
    else
        if (NoReactionEnabled) then
        autoAssemble(SCRIPT_no_mob_reaction, NoReactionDisabled)
        writeToLogFile("INFO", "Disabled " .. script_name)
        end
    end
  else
    showMessage(script_name .. " is currently not working. Disabling...")
    NMReaction.state = 0
    NMReaction.Enabled = false
    writeToLogFile("WARNING", script_name .. " is not working. Disabling this option for your safety...")
  end
end

function NoMobSpawnDeathAnimation(NoSpawnDeathAni)
local script_name = "No Mob Spawn/Death Animation"
if not checkNotWorking(SCRIPT_no_mob_animation) then
  if NoSpawnDeathAni.checked then
    if checkAutoBan(SCRIPT_no_mob_animation) then
      if messageDialog(script_name .. ' may cause an auto ban under varying conditions!!\n\nEnable anyways?', mtWarning, mbYes, mbNo, 0) == mrYes then
        NoAnimationEnabled, NoAnimationDisabled = autoAssemble(SCRIPT_no_mob_animation, false)
        if (NoAnimationEnabled) then
			writeToLogFile("INFO", "Enabled " .. script_name .. " after auto ban warning")
			else
			writeToLogFile("WARNING", "Failed to enable " .. script_name)
			end
      else
        NoSpawnDeathAni.state = 0
      end
    else
      NoAnimationEnabled, NoAnimationDisabled = autoAssemble(SCRIPT_no_mob_animation, false)
      if (NoAnimationEnabled) then
      writeToLogFile("INFO", "Enabled " .. script_name)
      else
      writeToLogFile("WARNING", "Failed to enable " .. script_name)
      end
    end
    else
        if (NoAnimationEnabled) then
        autoAssemble(SCRIPT_no_mob_animation, NoAnimationDisabled)
        writeToLogFile("INFO", "Disabled " .. script_name)
        end
    end
  else
    showMessage(script_name .. " is currently not working. Disabling...")
    NoSpawnDeathAni.state = 0
    NoSpawnDeathAni.Enabled = false
    writeToLogFile("WARNING", script_name .. " is not working. Disabling this option for your safety...")
  end
end

function NoMultiKill(NoMK)
local script_name = "No MultiKill"
if not checkNotWorking(SCRIPT_no_multikill) then
  if NoMK.checked then
    if checkAutoBan(SCRIPT_no_multikill) then
      if messageDialog(script_name .. ' may cause an auto ban under varying conditions!!\n\nEnable anyways?', mtWarning, mbYes, mbNo, 0) == mrYes then
        NoMultikillEnabled, NoMultikillDisabled = autoAssemble(SCRIPT_no_multikill, false)
        if (NoMultikillEnabled) then
			writeToLogFile("INFO", "Enabled " .. script_name .. " after auto ban warning")
			else
			writeToLogFile("WARNING", "Failed to enable " .. script_name)
			end
      else
        NoMK.state = 0
      end
    else
      NoMultikillEnabled, NoMultikillDisabled = autoAssemble(SCRIPT_no_multikill, false)
      if (NoMultikillEnabled) then
      writeToLogFile("INFO", "Enabled " .. script_name)
      else
      writeToLogFile("WARNING", "Failed to enable " .. script_name)
      end
    end
    else
        if (NoMultikillEnabled) then
        autoAssemble(SCRIPT_no_multikill, NoMultikillDisabled)
        writeToLogFile("INFO", "Disabled " .. script_name)
        end
    end
  else
    showMessage(script_name .. " is currently not working. Disabling...")
    NoMK.state = 0
    NoMK.Enabled = false
    writeToLogFile("WARNING", script_name .. " is not working. Disabling this option for your safety...")
  end
end

function NoPlatform(NoPlat)
local script_name = "No Platform"
if not checkNotWorking(SCRIPT_no_platform) then
  if NoPlat.checked then
    if checkAutoBan(SCRIPT_no_platform) then
      if messageDialog(script_name .. ' may cause an auto ban under varying conditions!!\n\nEnable anyways?', mtWarning, mbYes, mbNo, 0) == mrYes then
        NPEnabled, NPDisabled = autoAssemble(SCRIPT_no_platform, false)
        if (NPEnabled) then
			writeToLogFile("INFO", "Enabled " .. script_name .. " after auto ban warning")
			else
			writeToLogFile("WARNING", "Failed to enable " .. script_name)
			end
      else
        NoPlat.state = 0
      end
    else
      NPEnabled, NPDisabled = autoAssemble(SCRIPT_no_platform, false)
      if (NPEnabled) then
      writeToLogFile("INFO", "Enabled " .. script_name)
      else
      writeToLogFile("WARNING", "Failed to enable " .. script_name)
      end
    end
    else
        if (NPEnabled) then
        autoAssemble(SCRIPT_no_platform, NPDisabled)
        writeToLogFile("INFO", "Disabled " .. script_name)
        end
    end
  else
    showMessage(script_name .. " is currently not working. Disabling...")
    NoPlat.state = 0
    NoPlat.Enabled = false
    writeToLogFile("WARNING", script_name .. " is not working. Disabling this option for your safety...")
  end
end

function NoSkillSound(NoSS)
local script_name = "No Skill Sound"
if not checkNotWorking(SCRIPT_no_skill_sound) then
  if NoSS.checked then
    if checkAutoBan(SCRIPT_no_skill_sound) then
      if messageDialog(script_name .. ' may cause an auto ban under varying conditions!!\n\nEnable anyways?', mtWarning, mbYes, mbNo, 0) == mrYes then
        NoSkillSoundEnabled, NoSkillSoundDisabled = autoAssemble(SCRIPT_no_skill_sound, false)
        if (NoSkillSoundEnabled) then
			writeToLogFile("INFO", "Enabled " .. script_name .. " after auto ban warning")
			else
			writeToLogFile("WARNING", "Failed to enable " .. script_name)
			end
      else
        NoSS.state = 0
      end
    else
      NoSkillSoundEnabled, NoSkillSoundDisabled = autoAssemble(SCRIPT_no_skill_sound, false)
      if (NoSkillSoundEnabled) then
      writeToLogFile("INFO", "Enabled " .. script_name)
      else
      writeToLogFile("WARNING", "Failed to enable " .. script_name)
      end
    end
    else
        if (NoSkillSoundEnabled) then
        autoAssemble(SCRIPT_no_skill_sound, NoSkillSoundDisabled)
        writeToLogFile("INFO", "Disabled " .. script_name)
        end
    end
  else
    showMessage(script_name .. " is currently not working. Disabling...")
    NoSS.state = 0
    NoSS.Enabled = false
    writeToLogFile("WARNING", script_name .. " is not working. Disabling this option for your safety...")
  end
end

function NoWeather(NoWeath)
local script_name = "No Weather"
if not checkNotWorking(NoWeathScript) then
  if NoWeath.checked then
    if checkAutoBan(NoWeathScript) then
      if messageDialog(script_name .. ' may cause an auto ban under varying conditions!!\n\nEnable anyways?', mtWarning, mbYes, mbNo, 0) == mrYes then
        NoWeathEnabled, NoWeathDisabled = autoAssemble(NoWeathScript, false)
        if (NoWeathEnabled) then
        writeToLogFile("INFO", "Enabled " .. script_name .. " after auto ban warning")
        else
        writeToLogFile("WARNING", "Failed to enable " .. script_name)
        messageDialog("A problem occurred when attempting to enable " .. script_name .. ". It will not be enabled.", mtError, mbOK)
        NoWeath.state = 0
        end
      else
        NoWeath.state = 0
      end
    else
      NoWeathEnabled, NoWeathDisabled = autoAssemble(NoWeathScript, false)
      if (NoWeathEnabled) then
      writeToLogFile("INFO", "Enabled " .. script_name)
      else
      writeToLogFile("WARNING", "Failed to enable " .. script_name)
      messageDialog("A problem occurred when attempting to enable " .. script_name .. ". It will not be enabled.", mtError, mbOK)
      NoWeath.state = 0
      end
    end
    else
        if (NoWeathEnabled) then
        autoAssemble(NoWeathScript, NoWeathDisabled)
        writeToLogFile("INFO", "Disabled " .. script_name)
        end
    end
  else
    showMessage(script_name .. " is currently not working. Disabling...")
    NoWeath.state = 0
    NoWeath.Enabled = false
    writeToLogFile("WARNING", script_name .. " is not working. Disabling this option for your safety...")
  end
end

function PerfectStance(PStance)
local script_name = "Perfect Stance"
if not checkNotWorking(SCRIPT_perfect_stance) then
  if PStance.checked then
    if checkAutoBan(SCRIPT_perfect_stance) then
      if messageDialog(script_name .. ' may cause an auto ban under varying conditions!!\n\nEnable anyways?', mtWarning, mbYes, mbNo, 0) == mrYes then
        PStanceEnabled, PStanceDisabled = autoAssemble(SCRIPT_perfect_stance, false)
        if (PStanceEnabled) then
			writeToLogFile("INFO", "Enabled " .. script_name .. " after auto ban warning")
			else
			writeToLogFile("WARNING", "Failed to enable " .. script_name)
			end
      else
        PStance.state = 0
      end
    else
      PStanceEnabled, PStanceDisabled = autoAssemble(SCRIPT_perfect_stance, false)
      if (PStanceEnabled) then
      writeToLogFile("INFO", "Enabled " .. script_name)
      else
      writeToLogFile("WARNING", "Failed to enable " .. script_name)
      end
    end
    else
        if (PStanceEnabled) then
        autoAssemble(SCRIPT_perfect_stance, PStanceDisabled)
        writeToLogFile("INFO", "Disabled " .. script_name)
        end
    end
  else
    showMessage(script_name .. " is currently not working. Disabling...")
    PStance.state = 0
    PStance.Enabled = false
    writeToLogFile("WARNING", script_name .. " is not working. Disabling this option for your safety...")
  end
end

function PetFeed(FeedDatPetKey)
local script_name = "Pet Feed"
if not checkNotWorking(SCRIPT_pet_feed) then
  if FeedDatPetKey.checked then
    if checkAutoBan(SCRIPT_pet_feed) then
      if messageDialog(script_name .. ' may cause an auto ban under varying conditions!!\n\nEnable anyways?', mtWarning, mbYes, mbNo, 0) == mrYes then
        PFEnabled, PFDisabled = autoAssemble(SCRIPT_pet_feed, false)
        if (PFEnabled) then
        writeToLogFile("INFO", "Enabled " .. script_name .. " after auto ban warning (params: " .. Simple.PetFeedKey.Items[Simple.PetFeedKey.ItemIndex] .. " (" .. CheckPetFeedKey() .. ")," .. Simple.PetFeedFullness.Text .. ")")
        else
        writeToLogFile("WARNING", "Failed to enable " .. script_name .. " (params: " .. Simple.PetFeedKey.Items[Simple.PetFeedKey.ItemIndex] .. " (" .. CheckPetFeedKey() .. ")," .. Simple.PetFeedFullness.Text .. ")")
        messageDialog("A problem occurred when attempting to enable " .. script_name .. ". It will not be enabled.", mtError, mbOK)
        FeedDatPetKey.state = 0
        end
        PetFeedBoxes()
      else
        FeedDatPetKey.state = 0
      end
    else
      PFEnabled, PFDisabled = autoAssemble(SCRIPT_pet_feed, false)
      if (PFEnabled) then
      writeToLogFile("INFO", "Enabled " .. script_name .. " (params: " .. Simple.PetFeedKey.Items[Simple.PetFeedKey.ItemIndex] .. " (" .. CheckPetFeedKey() .. ")," .. Simple.PetFeedFullness.Text .. ")")
      else
      writeToLogFile("WARNING", "Failed to enable " .. script_name .. " (params: " .. Simple.PetFeedKey.Items[Simple.PetFeedKey.ItemIndex] .. " (" .. CheckPetFeedKey() .. ")," .. Simple.PetFeedFullness.Text .. ")")
      messageDialog("A problem occurred when attempting to enable " .. script_name .. ". It will not be enabled.", mtError, mbOK)
      FeedDatPetKey.state = 0
      end
      PetFeedBoxes()
    end
    else
        if (PFEnabled) then
        autoAssemble(SCRIPT_pet_feed, PFDisabled)
        writeToLogFile("INFO", "Disabled " .. script_name)
        end
        PetFeedBoxes()
    end
  else
    showMessage(script_name .. " is currently not working. Disabling...")
    FeedDatPetKey.state = 0
    FeedDatPetKey.Enabled = false
    writeToLogFile("WARNING", script_name .. " is not working. Disabling this option for your safety...")
  end
end

function PetFeedBoxes()
if Simple.PetFeed.Checked then
Simple.PetFeedKey.Enabled = false
Simple.PetFeedFullness.ReadOnly = true
else
Simple.PetFeedKey.Enabled = true
Simple.PetFeedFullness.ReadOnly = false
end
end

function CheckPetFeedKey()
local index = tostring(Simple.PetFeedKey.ItemIndex)
local value = "0"
  if index == '0' then
    value = "001D0000"
  elseif index == '1' then
    value = "002A0000"
  elseif index == '2' then
    value = "01520000"
  elseif index == '3' then
    value = '01530000'
  elseif index == '4' then
    value = '01470000'
  elseif index == '5' then
    value = '014F0000'
  elseif index == '6' then
    value = '01490000'
  elseif index == '7' then
    value = '01510000'
  elseif index == '8' then
    value = '00380000'
  elseif index == '9' then
    value = '002C0000'
  end
return value
end

function PetLoot(PLoot)
local script_name = "Pet Loot"
local SCRIPT_pet_loot = SCRIPT_pet_loot:gsub("%%arg1", Simple.PetLootDelay.Text)
if not checkNotWorking(SCRIPT_pet_loot) then
  if PLoot.checked then
    if checkAutoBan(SCRIPT_pet_loot) then
      if messageDialog(script_name .. ' may cause an auto ban under varying conditions!!\n\nEnable anyways?', mtWarning, mbYes, mbNo, 0) == mrYes then
        PLootEnabled, PLootDisabled = autoAssemble(SCRIPT_pet_loot, false)
        if (PLootEnabled) then
        writeToLogFile("INFO", "Enabled " .. script_name .. " after auto ban warning (params: " .. Simple.PetLootDelay.Text .. ")")
        else
      writeToLogFile("WARNING", "Failed to enable " .. script_name .. " (params: " .. Simple.PetLootDelay.Text .. ")")
      end
        PetLootBoxes()
      else
        PLoot.state = 0
      end
    else
      PLootEnabled, PLootDisabled = autoAssemble(SCRIPT_pet_loot, false)
      if (PLootEnabled) then
      writeToLogFile("INFO", "Enabled " .. script_name .. " (params: " .. Simple.PetLootDelay.Text .. ")")
      else
      writeToLogFile("WARNING", "Failed to enable " .. script_name .. " (params: " .. Simple.PetLootDelay.Text .. ")")
      end
      PetLootBoxes()
    end
    else
        if (PLootEnabled) then
        autoAssemble(SCRIPT_pet_loot, PLootDisabled)
        writeToLogFile("INFO", "Disabled " .. script_name)
        end
        PetLootBoxes()
    end
  else
    showMessage(script_name .. " is currently not working. Disabling...")
    Simple.PetLootDelay.Enabled = false
    PLoot.state = 0
    PLoot.Enabled = false
    writeToLogFile("WARNING", script_name .. " is not working. Disabling this option for your safety...")
  end
end

function PetLootBoxes()
if Simple.PetLoot.Checked then
  Simple.PetLootDelay.ReadOnly = true
else
  Simple.PetLootDelay.ReadOnly = false
end
end

function ShowHideNPCs(WhereThemNPCs)
local script_name = "Show/Hide NPCs"
local SCRIPT_showhide_npcs = SCRIPT_showhide_npcs:gsub("%%arg1", Simple.ChooseNPCVisible.ItemIndex)
if not checkNotWorking(SCRIPT_showhide_npcs) then
  if WhereThemNPCs.checked then
    if checkAutoBan(SCRIPT_showhide_npcs) then
      if messageDialog(script_name .. ' may cause an auto ban under varying conditions!!\n\nEnable anyways?', mtWarning, mbYes, mbNo, 0) == mrYes then
        showNPCsEnabled, showNPCsDisabled = autoAssemble(SCRIPT_showhide_npcs, false)
        if (showNPCsEnabled) then
        writeToLogFile("INFO", "Enabled " .. script_name .. " after auto ban warning (params: " .. Simple.ChooseNPCVisible.Items[Simple.ChooseNPCVisible.ItemIndex] .. " (" .. Simple.ChooseNPCVisible.ItemIndex .. "))")
        else
        writeToLogFile("WARNING", "Failed to enable " .. script_name .. " (params: " .. Simple.ChooseNPCVisible.Items[Simple.ChooseNPCVisible.ItemIndex] .. " (" .. Simple.ChooseNPCVisible.ItemIndex .. "))")
        messageDialog("A problem occurred when attempting to enable " .. script_name .. ". It will not be enabled.", mtError, mbOK)
        WhereThemNPCs.state = 0
        end
      else
        WhereThemNPCs.state = 0
      end
    else
      showNPCsEnabled, showNPCsDisabled = autoAssemble(SCRIPT_showhide_npcs, false)
      if (showNPCsEnabled) then
      writeToLogFile("INFO", "Enabled " .. script_name .. " (params: " .. Simple.ChooseNPCVisible.Items[Simple.ChooseNPCVisible.ItemIndex] .. " (" .. Simple.ChooseNPCVisible.ItemIndex .. "))")
      else
      writeToLogFile("WARNING", "Failed to enable " .. script_name .. " (params: " .. Simple.ChooseNPCVisible.Items[Simple.ChooseNPCVisible.ItemIndex] .. " (" .. Simple.ChooseNPCVisible.ItemIndex .. "))")
      messageDialog("A problem occurred when attempting to enable " .. script_name .. ". It will not be enabled.", mtError, mbOK)
      WhereThemNPCs.state = 0
      end
    end
    else
        if (showNPCsEnabled) then
        autoAssemble(SCRIPT_showhide_npcs, showNPCsDisabled)
        writeToLogFile("INFO", "Disabled " .. script_name)
        end
    end
  else
    showMessage(script_name .. " is currently not working. Disabling...")
    WhereThemNPCs.state = 0
    WhereThemNPCs.Enabled = false
    writeToLogFile("WARNING", script_name .. " is not working. Disabling this option for your safety...")
  end
end

function SkillInjection(SInjection)
local script_name = "Skill Injection"
local SCRIPT_skill_injection = SCRIPT_skill_injection
if Simple.InjectionType.ItemIndex == 1 then
script_name = "Skill Injection v2"
SCRIPT_skill_injection = SCRIPT_skill_injection_v2
elseif Simple.InjectionType.ItemIndex == 2 then
script_name = "Magic Skill Injection"
SCRIPT_skill_injection = SCRIPT_magic_injection
elseif Simple.InjectionType.ItemIndex == 3 then
script_name = "Melee Skill Injection"
SCRIPT_skill_injection = SCRIPT_melee_injection
elseif Simple.InjectionType.ItemIndex == 4 then
script_name = "Shoot Skill Injection"
SCRIPT_skill_injection = SCRIPT_shoot_injection
end
SCRIPT_skill_injection = SCRIPT_skill_injection:gsub("%%arg1", Simple.SkillID.Text)
SCRIPT_skill_injection = SCRIPT_skill_injection:gsub("%%arg2", Simple.SkillDelay.Text)
if not checkNotWorking(SCRIPT_skill_injection) then
  if SInjection.checked then
    if checkAutoBan(SCRIPT_skill_injection) then
      if messageDialog(script_name .. ' may cause an auto ban under varying conditions!!\n\nEnable anyways?', mtWarning, mbYes, mbNo, 0) == mrYes then
        SIEnabled, SIDisabled = autoAssemble(SCRIPT_skill_injection, false)
        if (SIEnabled) then
        writeToLogFile("INFO", "Enabled " .. script_name .. " after auto ban warning (params: " .. Simple.SkillID.Text .. "," .. Simple.SkillDelay.Text .. ")")
        else
      writeToLogFile("WARNING", "Failed to enable " .. script_name .. " (params: " .. Simple.SkillID.Text .. "," .. Simple.SkillDelay.Text .. ")")
      end
        SkillInjectionBoxes()
      else
        SInjection.state = 0
      end
    else
      SIEnabled, SIDisabled = autoAssemble(SCRIPT_skill_injection, false)
      if (SIEnabled) then
      writeToLogFile("INFO", "Enabled " .. script_name .. " (params: " .. Simple.SkillID.Text .. "," .. Simple.SkillDelay.Text .. ")")
      else
      writeToLogFile("WARNING", "Failed to enable " .. script_name .. " (params: " .. Simple.SkillID.Text .. "," .. Simple.SkillDelay.Text .. ")")
      end
      SkillInjectionBoxes()
    end
    else
        if (SIEnabled) then
        autoAssemble(SCRIPT_skill_injection, SIDisabled)
        writeToLogFile("INFO", "Disabled " .. script_name)
        end
        SkillInjectionBoxes()
    end
  else
    showMessage(script_name .. " is currently not working. Disabling...")
    Simple.SkillID.Enabled = false
    Simple.SkillDelay.Enabled = false
    SInjection.state = 0
    SInjection.Enabled = false
    writeToLogFile("WARNING", script_name .. " is not working. Disabling this option for your safety...")
  end
end

function SelectedInjectionType(sender)
local selected = sender.ItemIndex
Simple.SkillInjection.Enabled = true
if selected == 0 then
  Simple.SkillInjection.Caption = "Skill Injection"
  if checkNotWorking(SCRIPT_skill_injection) then
    Simple.SkillInjection.Enabled = false
    showMessage("The selected Skill Injection type either is not working or was not loaded with the trainer. See Log File for more information.\n\nPlease select a different Skill Injection type.")
    writeToLogFile("WARNING", "Change of Skill Injection type to " .. Simple.SkillInjection.Caption .. " failed. The script was either marked not working or was not loaded with the trainer")
  end
elseif selected == 1 then
  Simple.SkillInjection.Caption = "Skill Injection v2"
  if checkNotWorking(SCRIPT_skill_injection_v2) then
    Simple.SkillInjection.Enabled = false
    showMessage("The selected Skill Injection type either is not working or was not loaded with the trainer. See Log File for more information.\n\nPlease select a different Skill Injection type.")
    writeToLogFile("WARNING", "Change of Skill Injection type to " .. Simple.SkillInjection.Caption .. " failed. The script was either marked not working or was not loaded with the trainer")
  end
elseif selected == 2 then
  Simple.SkillInjection.Caption = "Magic Skill Injection"
  if checkNotWorking(SCRIPT_magic_injection) then
    Simple.SkillInjection.Enabled = false
    showMessage("The selected Skill Injection type either is not working or was not loaded with the trainer. See Log File for more information.\n\nPlease select a different Skill Injection type.")
    writeToLogFile("WARNING", "Change of Skill Injection type to " .. Simple.SkillInjection.Caption .. " failed. The script was either marked not working or was not loaded with the trainer")
  end
elseif selected == 3 then
  Simple.SkillInjection.Caption = "Melee Skill Injection"
  if checkNotWorking(SCRIPT_melee_injection) then
    Simple.SkillInjection.Enabled = false
    showMessage("The selected Skill Injection type either is not working or was not loaded with the trainer. See Log File for more information.\n\nPlease select a different Skill Injection type.")
    writeToLogFile("WARNING", "Change of Skill Injection type to " .. Simple.SkillInjection.Caption .. " failed. The script was either marked not working or was not loaded with the trainer")
  end
elseif selected == 4 then
  Simple.SkillInjection.Caption = "Shoot Skill Injection"
  if checkNotWorking(SCRIPT_shoot_injection) then
    Simple.SkillInjection.Enabled = false
    showMessage("The selected Skill Injection type either is not working or was not loaded with the trainer. See Log File for more information.\n\nPlease select a different Skill Injection type.")
    writeToLogFile("WARNING", "Change of Skill Injection type to " .. Simple.SkillInjection.Caption .. " failed. The script was either marked not working or was not loaded with the trainer")
  end
end
end

function SkillInjectionBoxes()
if Simple.SkillInjection.Checked then
Simple.InjectionType.Enabled = false
Simple.SkillID.ReadOnly = true
Simple.SkillDelay.ReadOnly = true
else
Simple.InjectionType.Enabled = true
Simple.SkillID.ReadOnly = false
Simple.SkillDelay.ReadOnly = false
end
end

function SkillPointer(SkillPtr)
local script_name = "Skill Pointer"
if not checkNotWorking(SCRIPT_skill_ptr) then
  if SkillPtr.checked then
    if checkAutoBan(SCRIPT_skill_ptr) then
      if messageDialog(script_name .. ' may cause an auto ban under varying conditions!!\n\nEnable anyways?', mtWarning, mbYes, mbNo, 0) == mrYes then
        SkillPtrEnabled, SkillPtrDisabled = autoAssemble(SCRIPT_skill_ptr, false)
        if (SkillPtrEnabled) then
        writeToLogFile("INFO", "Enabled " .. script_name .. " after auto ban warning")
        else
        writeToLogFile("WARNING", "Failed to enable " .. script_name)
        messageDialog("A problem occurred when attempting to enable " .. script_name .. ". It will not be enabled.", mtError, mbOK)
        SkillPtr.state = 0
        end
      else
        SkillPtr.state = 0
      end
    else
      SkillPtrEnabled, SkillPtrDisabled = autoAssemble(SCRIPT_skill_ptr, false)
      if (SkillPtrEnabled) then
      writeToLogFile("INFO", "Enabled " .. script_name)
      else
      writeToLogFile("WARNING", "Failed to enable " .. script_name)
      messageDialog("A problem occurred when attempting to enable " .. script_name .. ". It will not be enabled.", mtError, mbOK)
      SkillPtr.state = 0
      end
    end
    else
        if (SkillPtrEnabled) then
        autoAssemble(SCRIPT_skill_ptr, SkillPtrDisabled)
        writeToLogFile("INFO", "Disabled " .. script_name)
        end
    end
  else
    showMessage(script_name .. " is currently not working. Disabling...")
    SkillPtr.state = 0
    SkillPtr.Enabled = false
    writeToLogFile("WARNING", script_name .. " is not working. Disabling this option for your safety...")
  end
end

function SlideAndAttack(SlideAttack)
local script_name = "Slide and Attack"
if not checkNotWorking(SCRIPT_slide_attack) then
  if SlideAttack.checked then
    if checkAutoBan(SCRIPT_slide_attack) then
      if messageDialog(script_name .. ' may cause an auto ban under varying conditions!!\n\nEnable anyways?', mtWarning, mbYes, mbNo, 0) == mrYes then
        SAtkEnabled, SAtkDisabled = autoAssemble(SCRIPT_slide_attack, false)
        if (SAtkEnabled) then
        writeToLogFile("INFO", "Enabled " .. script_name .. " after auto ban warning")
        else
        writeToLogFile("WARNING", "Failed to enable " .. script_name)
        end
      else
        SlideAttack.state = 0
      end
    else
      SAtkEnabled, SAtkDisabled = autoAssemble(SCRIPT_slide_attack, false)
      if (SAtkEnabled) then
      writeToLogFile("INFO", "Enabled " .. script_name)
      else
      writeToLogFile("WARNING", "Failed to enable " .. script_name)
      end
    end
    else
        if (SAtkEnabled) then
        autoAssemble(SCRIPT_slide_attack, SAtkDisabled)
        writeToLogFile("INFO", "Disabled " .. script_name)
        end
    end
  else
    showMessage(script_name .. " is currently not working. Disabling...")
    SlideAttack.state = 0
    SlideAttack.Enabled = false
    writeToLogFile("WARNING", script_name .. " is not working. Disabling this option for your safety...")
  end
end

function SpamHomingBeacon(BeaconSpam)
local script_name = "Spam Homing Beacon"
if not checkNotWorking(SCRIPT_spam_homing_beacon) then
  if BeaconSpam.checked then
    if checkAutoBan(SCRIPT_spam_homing_beacon) then
      if messageDialog(script_name .. ' may cause an auto ban under varying conditions!!\n\nEnable anyways?', mtWarning, mbYes, mbNo, 0) == mrYes then
        SHBEnabled, SHBDisabled = autoAssemble(SCRIPT_spam_homing_beacon, false)
        if (SHBEnabled) then
        writeToLogFile("INFO", "Enabled " .. script_name .. " after auto ban warning")
        else
        writeToLogFile("WARNING", "Failed to enable " .. script_name)
        messageDialog("A problem occurred when attempting to enable " .. script_name .. ". It will not be enabled.", mtError, mbOK)
        BeaconSpam.state = 0
        end
      else
        BeaconSpam.state = 0
      end
    else
      SHBEnabled, SHBDisabled = autoAssemble(SCRIPT_spam_homing_beacon, false)
      if (SHBEnabled) then
      writeToLogFile("INFO", "Enabled " .. script_name)
      else
      writeToLogFile("WARNING", "Failed to enable " .. script_name)
      messageDialog("A problem occurred when attempting to enable " .. script_name .. ". It will not be enabled.", mtError, mbOK)
      BeaconSpam.state = 0
      end
    end
    else
        if (SHBEnabled) then
        autoAssemble(SCRIPT_spam_homing_beacon, SHBDisabled)
        writeToLogFile("INFO", "Disabled " .. script_name)
        end
    end
  else
    showMessage(script_name .. " is currently not working. Disabling...")
    BeaconSpam.state = 0
    BeaconSpam.Enabled = false
    writeToLogFile("WARNING", script_name .. " is not working. Disabling this option for your safety...")
  end
end

function SpawnPointControl(SPC)
local script_name = "Spawn Point Control"
local SCRIPT_spawn_point = SCRIPT_spawn_point:gsub("%%arg1", Simple.TPX.Text)
SCRIPT_spawn_point = SCRIPT_spawn_point:gsub("%%arg2", Simple.TPY.Text)
if not checkNotWorking(SCRIPT_spawn_point) then
  if SPC.checked then
    if checkAutoBan(SCRIPT_spawn_point) then
      if messageDialog(script_name .. ' may cause an auto ban under varying conditions!!\n\nEnable anyways?', mtWarning, mbYes, mbNo, 0) == mrYes then
        SPointEnabled, SPointDisabled = autoAssemble(SCRIPT_spawn_point, false)
        if (SPointEnabled) then
        writeToLogFile("INFO", "Enabled " .. script_name .. " after auto ban warning (params: " .. Simple.TPX.Text .. "," .. Simple.TPY.Text .. ")")
        else
      writeToLogFile("WARNING", "Failed to enable " .. script_name .. " (params: " .. Simple.TPX.Text .. "," .. Simple.TPY.Text .. ")")
      end
        SPCBoxes()
      else
        SPC.state = 0
      end
    else
      SPointEnabled, SPointDisabled = autoAssemble(SCRIPT_spawn_point, false)
      if (SPointEnabled) then
      writeToLogFile("INFO", "Enabled " .. script_name .. " (params: " .. Simple.TPX.Text .. "," .. Simple.TPY.Text .. ")")
      else
      writeToLogFile("WARNING", "Failed to enable " .. script_name .. " (params: " .. Simple.TPX.Text .. "," .. Simple.TPY.Text .. ")")
      end
      SPCBoxes()
    end
    else
        if (SPointEnabled) then
        autoAssemble(SCRIPT_spawn_point, SPointDisabled)
        writeToLogFile("INFO", "Disabled " .. script_name)
        end
        SPCBoxes()
    end
  else
    showMessage(script_name .. " is currently not working. Disabling...")
    SPC.state = 0
    SPC.Enabled = false
    writeToLogFile("WARNING", script_name .. " is not working. Disabling this option for your safety...")
  end
end

function SPCBoxes()
if Simple.SpawnPointControl.Checked then
Simple.TPX.ReadOnly = true
Simple.TPY.ReadOnly = true
else
Simple.TPX.ReadOnly = false
Simple.TPY.ReadOnly = false
end
end

function SpectralSkillsBypass(ArkSpectralBypass)
local script_name = "Spectral Skills Bypass"
if not checkNotWorking(SCRIPT_spectral_bypass) then
  if ArkSpectralBypass.checked then
    if checkAutoBan(SCRIPT_spectral_bypass) then
      if messageDialog(script_name .. ' may cause an auto ban under varying conditions!!\n\nEnable anyways?', mtWarning, mbYes, mbNo, 0) == mrYes then
        SpectralEnabled, SpectralDisabled = autoAssemble(SCRIPT_spectral_bypass, false)
        if (SpectralEnabled) then
        writeToLogFile("INFO", "Enabled " .. script_name .. " after auto ban warning")
        else
        writeToLogFile("WARNING", "Failed to enable " .. script_name)
        messageDialog("A problem occurred when attempting to enable " .. script_name .. ". It will not be enabled.", mtError, mbOK)
        ArkSpectralBypass.state = 0
        end
      else
        ArkSpectralBypass.state = 0
      end
    else
      SpectralEnabled, SpectralDisabled = autoAssemble(SCRIPT_spectral_bypass, false)
      if (SpectralEnabled) then
      writeToLogFile("INFO", "Enabled " .. script_name)
      else
      writeToLogFile("WARNING", "Failed to enable " .. script_name)
      messageDialog("A problem occurred when attempting to enable " .. script_name .. ". It will not be enabled.", mtError, mbOK)
      ArkSpectralBypass.state = 0
      end
    end
    else
        if (SpectralEnabled) then
        autoAssemble(SCRIPT_spectral_bypass, SpectralDisabled)
        writeToLogFile("INFO", "Disabled " .. script_name)
        end
    end
  else
    showMessage(script_name .. " is currently not working. Disabling...")
    ArkSpectralBypass.state = 0
    ArkSpectralBypass.Enabled = false
    writeToLogFile("WARNING", script_name .. " is not working. Disabling this option for your safety...")
  end
end

function SummonedSkillsKami(SSkillsKami)
local script_name = "Summoned Skills Kami"
if not checkNotWorking(SCRIPT_summoned_kami) then
  if SSkillsKami.checked then
    if checkAutoBan(SCRIPT_summoned_kami) then
      if messageDialog(script_name .. ' may cause an auto ban under varying conditions!!\n\nEnable anyways?', mtWarning, mbYes, mbNo, 0) == mrYes then
        SKamiEnabled, SKamiDisabled = autoAssemble(SCRIPT_summoned_kami, false)
        if (SKamiEnabled) then
        writeToLogFile("INFO", "Enabled " .. script_name .. " after auto ban warning")
        else
        writeToLogFile("WARNING", "Failed to enable " .. script_name)
        messageDialog("A problem occurred when attempting to enable " .. script_name .. ". It will not be enabled.", mtError, mbOK)
        SSkillsKami.state = 0
        end
      else
        SSkillsKami.state = 0
      end
    else
      SKamiEnabled, SKamiDisabled = autoAssemble(SCRIPT_summoned_kami, false)
      if (SKamiEnabled) then
      writeToLogFile("INFO", "Enabled " .. script_name)
      else
      writeToLogFile("WARNING", "Failed to enable " .. script_name)
      messageDialog("A problem occurred when attempting to enable " .. script_name .. ". It will not be enabled.", mtError, mbOK)
      SSkillsKami.state = 0
      end
    end
    else
        if (SKamiEnabled) then
        autoAssemble(SCRIPT_summoned_kami, SKamiDisabled)
        writeToLogFile("INFO", "Disabled " .. script_name)
        end
    end
  else
    showMessage(script_name .. " is currently not working. Disabling...")
    SSkillsKami.state = 0
    SSkillsKami.Enabled = false
    writeToLogFile("WARNING", script_name .. " is not working. Disabling this option for your safety...")
  end
end

function Teleport(TPFunction)
local script_name = "Teleport"
local SCRIPT_teleport = SCRIPT_teleport:gsub("%%arg2", Simple.TPX.Text)
SCRIPT_teleport = SCRIPT_teleport:gsub("%%arg1", Simple.TPY.Text)
if not checkNotWorking(SCRIPT_teleport) then
    if checkAutoBan(SCRIPT_teleport) then
      if messageDialog(script_name .. ' may cause an auto ban under varying conditions!!\n\nEnable anyways?', mtWarning, mbYes, mbNo, 0) == mrYes then
        TPEnabled, TPDisabled = autoAssemble(SCRIPT_teleport, false)
        if (TPEnabled) then
        writeToLogFile("INFO", "Executed " .. script_name .. " after auto ban warning (params: " .. Simple.TPX.Text .. "," .. Simple.TPY.Text .. ")")
        else
      writeToLogFile("WARNING", "Failed to execute " .. script_name .. " (params: " .. Simple.TPX.Text .. "," .. Simple.TPY.Text .. ")")
      end
      else
        TPFunction.state = 0
      end
    else
      TPEnabled, TPDisabled = autoAssemble(SCRIPT_teleport, false)
      if (TPEnabled) then
      writeToLogFile("INFO", "Executed " .. script_name .. " (params: " .. Simple.TPX.Text .. "," .. Simple.TPY.Text .. ")")
      else
      writeToLogFile("WARNING", "Failed to execute " .. script_name .. " (params: " .. Simple.TPX.Text .. "," .. Simple.TPY.Text .. ")")
      end
    end
  else
    showMessage(script_name .. " is currently not working. Disabling...")
    TPFunction.state = 0
    TPFunction.Enabled = false
    writeToLogFile("WARNING", script_name .. " is not working. Disabling this option for your safety...")
  end
end

function TimedGodmode(TimeLimitedGodmode)
local script_name = "Timed Godmode"
local SCRIPT_timed_godmode = SCRIPT_timed_godmode:gsub("%%arg1", Simple.TimedGodmodeTime.Text)
if not checkNotWorking(SCRIPT_timed_godmode) then
  if TimeLimitedGodmode.checked then
    if checkAutoBan(SCRIPT_timed_godmode) then
      if messageDialog(script_name .. ' may cause an auto ban under varying conditions!!\n\nEnable anyways?', mtWarning, mbYes, mbNo, 0) == mrYes then
        TGodmodeEnabled, TGodmodeDisabled = autoAssemble(SCRIPT_timed_godmode, false)
        if (TGodmodeEnabled) then
        writeToLogFile("INFO", "Enabled " .. script_name .. " after auto ban warning (params: " .. Simple.TimedGodmodeTime.Text .. ")")
        else
        writeToLogFile("WARNING", "Failed to enable " .. script_name .. " (params: " .. Simple.TimedGodmodeTime.Text .. ")")
        messageDialog("A problem occurred when attempting to enable " .. script_name .. ". It will not be enabled.", mtError, mbOK)
        TimeLimitedGodmode.state = 0
        end
        TGodmodeBoxes()
      else
        TimeLimitedGodmode.state = 0
      end
    else
      TGodmodeEnabled, TGodmodeDisabled = autoAssemble(SCRIPT_timed_godmode, false)
      if (TGodmodeEnabled) then
      writeToLogFile("INFO", "Enabled " .. script_name .. " (params: " .. Simple.TimedGodmodeTime.Text .. ")")
      else
      writeToLogFile("WARNING", "Failed to enable " .. script_name .. " (params: " .. Simple.TimedGodmodeTime.Text .. ")")
      messageDialog("A problem occurred when attempting to enable " .. script_name .. ". It will not be enabled.", mtError, mbOK)
      TimeLimitedGodmode.state = 0
      end
      TGodmodeBoxes()
    end
    else
        if (TGodmodeEnabled) then
        autoAssemble(SCRIPT_timed_godmode, TGodmodeDisabled)
        writeToLogFile("INFO", "Disabled " .. script_name)
        end
        TGodmodeBoxes()
    end
  else
    showMessage(script_name .. " is currently not working. Disabling...")
    TimeLimitedGodmode.state = 0
    TimeLimitedGodmode.Enabled = false
    writeToLogFile("WARNING", script_name .. " is not working. Disabling this option for your safety...")
  end
end

function TGodmodeBoxes()
if Simple.TimedGodmode.Checked then
Simple.TimedGodmodeTime.ReadOnly = true
Simple.Godmode.Enabled = false
Simple.MissGodmode.Enabled = false
else
Simple.TimedGodmodeTime.ReadOnly = false
Simple.Godmode.Enabled = true
Simple.MissGodmode.Enabled = true
end
end

function Tubi(TubiLoot)
local script_name = "Tubi"
if not checkNotWorking(SCRIPT_tubi) then
  if TubiLoot.checked then
    if checkAutoBan(SCRIPT_tubi) then
      if messageDialog(script_name .. ' may cause an auto ban under varying conditions!!\n\nEnable anyways?', mtWarning, mbYes, mbNo, 0) == mrYes then
        TubiEnabled, TubiDisabled = autoAssemble(SCRIPT_tubi, false)
        if (TubiEnabled) then
			writeToLogFile("INFO", "Enabled " .. script_name .. " after auto ban warning")
			Simple.InstantDrop.checked = true
			Simple.NoLootAnimation.checked = true
			else
			writeToLogFile("WARNING", "Failed to enable " .. script_name)
			end
      else
        TubiLoot.state = 0
      end
    else
      TubiEnabled, TubiDisabled = autoAssemble(SCRIPT_tubi, false)
      if (TubiEnabled) then
      writeToLogFile("INFO", "Enabled " .. script_name)
      Simple.InstantDrop.checked = true
			Simple.NoLootAnimation.checked = true
      else
      writeToLogFile("WARNING", "Failed to enable " .. script_name)
      end
    end
    else
        if (TubiEnabled) then
        autoAssemble(SCRIPT_tubi, TubiDisabled)
        writeToLogFile("INFO", "Disabled " .. script_name)
        end
    end
  else
    showMessage(script_name .. " is currently not working. Disabling...")
    TubiLoot.state = 0
    TubiLoot.Enabled = false
    writeToLogFile("WARNING", script_name .. " is not working. Disabling this option for your safety...")
  end
end

function UnlimitedArrowPlatter(UltdAP)
local script_name = "Unlimited Arrow Platter"
if not checkNotWorking(SCRIPT_unlimited_arrow_plat) then
  if UltdAP.checked then
    if checkAutoBan(SCRIPT_unlimited_arrow_plat) then
      if messageDialog(script_name .. ' may cause an auto ban under varying conditions!!\n\nEnable anyways?', mtWarning, mbYes, mbNo, 0) == mrYes then
        UltdAPEnabled, UltdAPDisabled = autoAssemble(SCRIPT_unlimited_arrow_plat, false)
        if (UltdAPEnabled) then
        writeToLogFile("INFO", "Enabled " .. script_name .. " after auto ban warning")
        else
        writeToLogFile("WARNING", "Failed to enable " .. script_name)
        end
      else
        UltdAP.state = 0
      end
    else
      UltdAPEnabled, UltdAPDisabled = autoAssemble(SCRIPT_unlimited_arrow_plat, false)
      if (UltdAPEnabled) then
      writeToLogFile("INFO", "Enabled " .. script_name)
      else
      writeToLogFile("WARNING", "Failed to enable " .. script_name)
      end
    end
    else
        if (UltdAPEnabled) then
        autoAssemble(SCRIPT_unlimited_arrow_plat, UltdAPDisabled)
        writeToLogFile("INFO", "Disabled " .. script_name)
        end
    end
  else
    showMessage(script_name .. " is currently not working. Disabling...")
    UltdAP.state = 0
    UltdAP.Enabled = false
    writeToLogFile("WARNING", script_name .. " is not working. Disabling this option for your safety...")
  end
end

function UnlimitedAttack(Ultd)
local script_name = "Unlimited Attack"
if not checkNotWorking(SCRIPT_unlimited_attack) then
  if Ultd.checked then
    if checkAutoBan(SCRIPT_unlimited_attack) then
      if messageDialog(script_name .. ' may cause an auto ban under varying conditions!!\n\nEnable anyways?', mtWarning, mbYes, mbNo, 0) == mrYes then
        UltdEnabled, UltdDisabled = autoAssemble(SCRIPT_unlimited_attack, false)
        if (UltdEnabled) then
			writeToLogFile("INFO", "Enabled " .. script_name .. " after auto ban warning")
			else
			writeToLogFile("WARNING", "Failed to enable " .. script_name)
			end
      else
        Ultd.state = 0
      end
    else
      UltdEnabled, UltdDisabled = autoAssemble(SCRIPT_unlimited_attack, false)
      if (UltdEnabled) then
      writeToLogFile("INFO", "Enabled " .. script_name)
      else
      writeToLogFile("WARNING", "Failed to enable " .. script_name)
      end
    end
    else
        if (UltdEnabled) then
        autoAssemble(SCRIPT_unlimited_attack, UltdDisabled)
        writeToLogFile("INFO", "Disabled " .. script_name)
        end
    end
  else
    showMessage(script_name .. " is currently not working. Disabling...")
    Ultd.state = 0
    Ultd.Enabled = false
    writeToLogFile("WARNING", script_name .. " is not working. Disabling this option for your safety...")
  end
end

function UnlimitedBlazingExtinction(UnlimitedBE)
local script_name = "Unlimited Blazing Extinction"
if not checkNotWorking(SCRIPT_unlimited_be) then
  if UnlimitedBE.checked then
    if checkAutoBan(SCRIPT_unlimited_be) then
      if messageDialog(script_name .. ' may cause an auto ban under varying conditions!!\n\nEnable anyways?', mtWarning, mbYes, mbNo, 0) == mrYes then
        UnlimitedBEEnabled, UnlimitedBEDisabled = autoAssemble(SCRIPT_unlimited_be, false)
        if (UnlimitedBEEnabled) then
        writeToLogFile("INFO", "Enabled " .. script_name .. " after auto ban warning")
        else
        writeToLogFile("WARNING", "Failed to enable " .. script_name)
        messageDialog("A problem occurred when attempting to enable " .. script_name .. ". It will not be enabled.", mtError, mbOK)
        UnlimitedBE.state = 0
        end
      else
        UnlimitedBE.state = 0
      end
    else
      UnlimitedBEEnabled, UnlimitedBEDisabled = autoAssemble(SCRIPT_unlimited_be, false)
      if (UnlimitedBEEnabled) then
      writeToLogFile("INFO", "Enabled " .. script_name)
      else
      writeToLogFile("WARNING", "Failed to enable " .. script_name)
      messageDialog("A problem occurred when attempting to enable " .. script_name .. ". It will not be enabled.", mtError, mbOK)
      UnlimitedBE.state = 0
      end
    end
    else
        if (UnlimitedBEEnabled) then
        autoAssemble(SCRIPT_unlimited_be, UnlimitedBEDisabled)
        writeToLogFile("INFO", "Disabled " .. script_name)
        end
    end
  else
    showMessage(script_name .. " is currently not working. Disabling...")
    UnlimitedBE.state = 0
    UnlimitedBE.Enabled = false
    writeToLogFile("WARNING", script_name .. " is not working. Disabling this option for your safety...")
  end
end

function VellumFreeze(VellFreeze)
local script_name = "Vellum Freeze"
if not checkNotWorking(SCRIPT_vellum_freeze) then
  if VellFreeze.checked then
    if checkAutoBan(SCRIPT_vellum_freeze) then
      if messageDialog(script_name .. ' may cause an auto ban under varying conditions!!\n\nEnable anyways?', mtWarning, mbYes, mbNo, 0) == mrYes then
        VellFEnabled, VellFDisabled = autoAssemble(SCRIPT_vellum_freeze, false)
        if (VellFEnabled) then
			writeToLogFile("INFO", "Enabled " .. script_name .. " after auto ban warning")
			else
			writeToLogFile("WARNING", "Failed to enable " .. script_name)
			end
      else
        VellFreeze.state = 0
      end
    else
      VellFEnabled, VellFDisabled = autoAssemble(SCRIPT_vellum_freeze, false)
      if (VellFEnabled) then
      writeToLogFile("INFO", "Enabled " .. script_name)
      else
      writeToLogFile("WARNING", "Failed to enable " .. script_name)
      end
    end
    else
        if (VellFEnabled) then
        autoAssemble(SCRIPT_vellum_freeze, VellFDisabled)
        writeToLogFile("INFO", "Disabled " .. script_name)
        end
    end
  else
    showMessage(script_name .. " is currently not working. Disabling...")
    VellFreeze.state = 0
    VellFreeze.Enabled = false
    writeToLogFile("WARNING", script_name .. " is not working. Disabling this option for your safety...")
  end
end

function VellumFreezev2(VellFreezev2)
local script_name = "Vellum Freeze v2"
if not checkNotWorking(SCRIPT_vellum_freeze_v2) then
  if VellFreezev2.checked then
    if checkAutoBan(SCRIPT_vellum_freeze_v2) then
      if messageDialog(script_name .. ' may cause an auto ban under varying conditions!!\n\nEnable anyways?', mtWarning, mbYes, mbNo, 0) == mrYes then
        VellFv2Enabled, VellFv2Disabled = autoAssemble(SCRIPT_vellum_freeze_v2, false)
        if (VellFv2Enabled) then
			writeToLogFile("INFO", "Enabled " .. script_name .. " after auto ban warning")
			else
			writeToLogFile("WARNING", "Failed to enable " .. script_name)
			end
      else
        VellFreezev2.state = 0
      end
      VelFreezev2Boxes()
    else
      VellFv2Enabled, VellFv2Disabled = autoAssemble(SCRIPT_vellum_freeze_v2, false)
      if (VellFv2Enabled) then
      writeToLogFile("INFO", "Enabled " .. script_name)
      else
      writeToLogFile("WARNING", "Failed to enable " .. script_name)
      end
      VelFreezev2Boxes()
    end
    else
        if (VellFv2Enabled) then
        autoAssemble(SCRIPT_vellum_freeze_v2, VellFv2Disabled)
        writeToLogFile("INFO", "Disabled " .. script_name)
        end
        VelFreezev2Boxes()
    end
  else
    showMessage(script_name .. " is currently not working. Disabling...")
    VellFreezev2.state = 0
    VellFreezev2.Enabled = false
    writeToLogFile("WARNING", script_name .. " is not working. Disabling this option for your safety...")
  end
end

function VelFreezev2Boxes()
if Simple.VellumFreezev2.Checked then
  Simple.MapSpeedUp.Enabled = false
  Simple.MobSpeedUp.Enabled = false
  Simple.HideMostSkillAnimation.Enabled = false
else
  Simple.MapSpeedUp.Enabled = true
  Simple.MobSpeedUp.Enabled = true
  Simple.HideMostSkillAnimation.Enabled = true
end
end

function WonderoidUnlimitedConnection(WonderoidConnection)
local script_name = "Wonderoid Unlimited Connection"
if not checkNotWorking(SCRIPT_wonderoid_connection) then
  if WonderoidConnection.checked then
    if checkAutoBan(SCRIPT_wonderoid_connection) then
      if messageDialog(script_name .. ' may cause an auto ban under varying conditions!!\n\nEnable anyways?', mtWarning, mbYes, mbNo, 0) == mrYes then
        WonderoidEnabled, WonderoidDisabled = autoAssemble(SCRIPT_wonderoid_connection, false)
        if (WonderoidEnabled) then
			writeToLogFile("INFO", "Enabled " .. script_name .. " after auto ban warning")
			else
			writeToLogFile("WARNING", "Failed to enable " .. script_name)
			end
      else
        WonderoidConnection.state = 0
      end
    else
      WonderoidEnabled, WonderoidDisabled = autoAssemble(SCRIPT_wonderoid_connection, false)
      if (WonderoidEnabled) then
      writeToLogFile("INFO", "Enabled " .. script_name)
      else
      writeToLogFile("WARNING", "Failed to enable " .. script_name)
      end
    end
    else
        if (WonderoidEnabled) then
        autoAssemble(SCRIPT_wonderoid_connection, WonderoidDisabled)
        writeToLogFile("INFO", "Disabled " .. script_name)
        end
    end
  else
    showMessage(script_name .. " is currently not working. Disabling...")
    WonderoidConnection.state = 0
    WonderoidConnection.Enabled = false
    writeToLogFile("WARNING", script_name .. " is not working. Disabling this option for your safety...")
  end
end

function Zoom(ZoomHack)
local script_name = "Zoom"
if not checkNotWorking(SCRIPT_zoom) then
  if ZoomHack.checked then
    if checkAutoBan(SCRIPT_zoom) then
      if messageDialog(script_name .. ' may cause an auto ban under varying conditions!!\n\nEnable anyways?', mtWarning, mbYes, mbNo, 0) == mrYes then
        ZOOMEnabled, ZOOMDisabled = autoAssemble(SCRIPT_zoom, false)
        if (ZOOMEnabled) then
        writeToLogFile("INFO", "Enabled " .. script_name .. " after auto ban warning")
        else
        writeToLogFile("WARNING", "Failed to enable " .. script_name)
        end
      else
        ZoomHack.state = 0
      end
    else
      ZOOMEnabled, ZOOMDisabled = autoAssemble(SCRIPT_zoom, false)
      if (ZOOMEnabled) then
      writeToLogFile("INFO", "Enabled " .. script_name)
      else
      writeToLogFile("WARNING", "Failed to enable " .. script_name)
      end
    end
    else
        if (ZOOMEnabled) then
        autoAssemble(SCRIPT_zoom, ZOOMDisabled)
        writeToLogFile("INFO", "Disabled " .. script_name)
        end
    end
  else
    showMessage(script_name .. " is currently not working. Disabling...")
    ZoomHack.state = 0
    ZoomHack.Enabled = false
    writeToLogFile("WARNING", script_name .. " is not working. Disabling this option for your safety...")
  end
end

addresslist=getAddressList()

function AttachGame(sender)

function GetTheProcessList()
local T = {}
  local SL=createStringlist()
  getProcesslist(SL)
  for i=0,strings_getCount(SL)-1 do
      T[i] = strings_getString(SL,i)
    end
  return T
end

function GetPros(sender)
  local PL = GetTheProcessList()
  local S = {}
  local variable = trainer_target
  Process.ProcessList.Clear()
  for x = 0, #PL do
        if string.sub(PL[x],10) == variable
            then
            Process.ProcessList.Items.Add(PL[x])
            end
    end
end

global_process = 0

function detachFromProcess()
  local answer = messageDialog("Simple Trainer is currently attached to\n" .. global_process .. "-" .. trainer_target .. " (PID: " .. getOpenedProcessID() .. ").\n\nDetaching will force the trainer to disable any enabled scripts. Continue?", mtWarning, mbYes, mbNo)
    if answer == mrYes then
      disableAll()
      if not Simple.MSCRCBypass.checked then
        IS_CUR_ATTACHED = 0
        initializeVariables()
        Simple.HacksPage.Enabled = false
        writeToLogFile("INFO", "Detached from " .. global_process .. "-" .. trainer_target .. " (PID: " .. getOpenedProcessID() .. ")")
        menuItem_setCaption(mi4,'Status: Waiting to attach...')
        if trainer_header=="" then
        Simple.Caption = TrainerCaption
        else
        Simple.Caption = trainer_header
        end
        Simple.SelectProcess.Caption = "Select Process"
        Simple.SelectProcess.OnClick = AttachGame
      else
        messageDialog("Unable to detach since MSCRC Bypass is still enabled. Disable it manually, then try detaching again.", mtInformation, mbOk)
      end
    end
end

function OpenPro()
  if BypassIsTrue then
    local a = Process.ProcessList.ItemIndex
    proName = string.sub(Process.ProcessList.Items[a],0,8)
    b = tonumber(proName,16)
    global_process = proName
    openProcess(b)
    Simple.HacksPage.Enabled = true
    menuItem_setCaption(mi4,'Status: Attached to PID: ' .. b .. '!')
    Simple.Caption = Simple.Caption .. " | " .. proName .. "-" .. trainer_target .. " (PID: " .. b .. ")"
    writeToLogFile("INFO", "Attached to " .. proName .. "-" .. trainer_target .. " (PID: " .. b .. ")")
    Simple.SelectProcess.Caption = "Detach"
    Simple.SelectProcess.OnClick = detachFromProcess
    IS_CUR_ATTACHED = 1
    local value = tonumber(globalSettings.Value['AutoEnableMSCRC'])
    if Simple.MSCRCBypass.Enabled and value==1 then
      Simple.MSCRCBypass.Checked = true
      elseif not Simple.MSCRCBypass.Enabled and value==1 then
      writeToLogFile("CRITICAL", "Failed to automatically enable MSCRC Bypass!")
      writeToLogFile("WARNING", "A problem occurred that prevented Simple Trainer from executing a setting... See below:")
      writeToLogFile("WARNING", "\t\tMSCRC Bypass failed to load in or is tagged as not working. Please check your defined GitHub repo")
      messageDialog("You have Auto Enable MSCRC Bypass enabled in settings. However, an error occurred when attempting to automatically enable the MSCRC Bypass script (and therefore is not enabled). This most likely means the script failed to load into the trainer.\n\nRefer to the Log file for more information.", mtError, mbClose)
      messageDialog("MSCRC Bypass script option has been disabled. You will need to restart the trainer to load the script in when you have fixed the issue.", mtWarning, mbOK)
    end
  else
    showMessage("Enforce Bypass is enabled, but Simple Trainer could not find dinput8.dll in the defined Game Directory. Please update your Settings.")
  end
  Process.close()
end

function checkIfAttached()
local a = Process.ProcessList.ItemIndex
    if a ~= -1 then -- negative 1 is no selection
      if IS_CUR_ATTACHED ~= 1 then
        OpenPro()
      else
        messageDialog("Oops! Looks like you're still attached to an existing process. Please DETACH first.\n\nIf you do not see DETACH, you may need to restart the trainer.", mtError, mbOK)
      end
    else
    return showMessage("Please choose a process from the list!")
    end
end

function ProcessSelectClose()
  Process.hide();
end

Process.OnClose = ProcessSelectClose

Process.hide();
Process.show();

GetPros()
writeToLogFile("INFO", "User opened Select Process with " .. Process.ProcessList.Items.Count .. " found processes")
end

function menuDisableAll()
  if IS_CUR_ATTACHED == 1 then
  beep()
  local answer = messageDialog("Are you sure you want to disable any enabled scripts? This action cannot be undone.\n\nNote: MSCRC Bypass, if currently enabled, will not be disabled automatically.", mtConfirmation, mbYes, mbNo)
    if answer == mrYes then
      disableAll()
    end
  else
    showMessage("You are currently not attached to any Game process.")
  end
end

function disableAll()
  writeToLogFile("INFO", "Disabling all currently enabled scripts")
  Simple.GodMode.checked = false
  Simple.MissGodmode.checked = false
  Simple.BossGodmode.checked = false
  Simple.JumpDownAnywhere.checked = false
  Simple.UnlimitedAttack.checked = false
  Simple.NoDelayFlashJump.checked = false
  Simple.SlideandAttack.checked = false
  Simple.PerfectStance.checked = false
  Simple.AutoPortal.checked = false
  Simple.MapRusher.checked = false
  Simple.Tubi.checked = false
  Simple.NoDelayIngameDirectionEvent.checked = false
  Simple.EnableDisabledButtons.checked = false
  Simple.WonderoidUnlimitedConnection.checked = false
  Simple.AutoAttack.checked = false
  Simple.AutoHPMP.checked = false
  Simple.AutoKey1.checked = false
  Simple.AutoPetFeed.checked = false
  Simple.PetLoot.checked = false
  Simple.DisablePetReturn.checked = false
  Simple.AutoFamiliar.checked = false
  Simple.InfiniteFamiliar.checked = false
  Simple.JrBoogieUnlimitedMP.checked = false
  Simple.SpawnPointControl.checked = false
  Simple.FullMapAttack.checked = false
  Simple.InfiniteBlasterBullets.checked = false
  Simple.NoCooldown.checked = false
  Simple.DragonBreathFusionAttack.checked = false
  Simple.MonkeySpiritsNoDelay.checked = false
  Simple.ForceSummontoAttack.checked = false
  Simple.UnlimitedArrowPlatter.checked = false
  Simple.NoDelayArrowPlatter.checked = false
  Simple.SkillInjection.checked = false
  Simple.MachNoDelay.checked = false
  Simple.InstantFinalPsychicSmash.checked = false
  Simple.InstantFinalSlash.checked = false
  Simple.AirHitMobVac.checked = false
  Simple.MobConfusion.checked = false
  Simple.MobControl.checked = false
  Simple.MobDisarm.checked = false
  Simple.MobFreeze.checked = false
  Simple.VellumFreezev2.checked = false
  Simple.AutoAggro.checked = false
  Simple.NoMultiKill.checked = false
  Simple.InstantDrop.checked = false
  Simple.NoLootAnimation.checked = false
  Simple.NoItemFloating.checked = false
  Simple.NoComboAnimation.checked = false
  Simple.NoSkillSound.checked = false
  Simple.NoBlueBoxes.checked = false
  Simple.NoBlazingExtinctionEffect.checked = false
  Simple.Zoom.checked = false
  Simple.NoMobReaction.checked = false
  Simple.NoMobSpawnDeathAnimation.checked = false
  Simple.HideNametags.checked = false
  Simple.HidePlayerDamage.checked = false
  Simple.NoBackground.checked = false
  Simple.NoPlatform.checked = false
  Simple.NoFadeStages.checked = false
  Simple.HideMostSkillAnimation.checked = false
  Simple.ItemFilter.checked = false
  Simple.MonkeySpiritsNoDelay.checked = false
  Simple.NoDCPopup.checked = false
  Simple.SummonedSkillsKami.checked = false
  Simple.AutoOffline.checked = false
  Simple.LogoVideoSkip.checked = false
  Simple.AutoTerminate.checked = false
  Simple.AirLoot.checked = false
  Simple.NoCatchBreath.checked = false
  Simple.PetFeed.checked = false
  Simple.FastPetLoot.checked = false
  Simple.AutoInnerAbility.checked = false
  Simple.HyperRockCRCBypass.checked = false
  Simple.MonkeySpiritswithShikigamiHaunting.checked = false
  Simple.ConstantBlazingExtinctionAttack.checked = false
  Simple.FreezeBlazingExtinction.checked = false
  Simple.InstantSpawnBlazingExtinction.checked = false
  Simple.NoDelayBlazingExtinction.checked = false
  Simple.UnlimitedBlazingExtinction.checked = false
  Simple.ShowHideNPCs.checked = false
  Simple.TimedGodmode.checked = false
  Simple.SpectralSkillsBypass.checked = false
  Simple.AutoClaimArkCoins.checked = false
  Simple.MobFilter.checked = false
  Simple.MouseCameraControl.checked = false
  Simple.FamiliarNoDelayAttack.checked = false
  Simple.Kami.checked = false
  Simple.BeholderInfiniteHeal.checked = false
  Simple.InstantCollision.checked = false
  Simple.SpamHomingBeacon.checked = false
  Simple.MobSpeedUp.checked = false
  Simple.MapSpeedUp.checked = false
  Simple.ClearFieldUI.checked = false
  Simple.AutoAssemble.checked = false
  Simple.NoWeather.checked = false
  Simple.AirCheckAttackOnRope.checked = false
  Simple.MobFallDown.checked = false

  if Simple.MSCRCBypass.checked then
    writeToLogFile("INFO", "Unable to disable MSCRC Bypass. Please manually disable it.")
  end
end

w  = "datco-de"

menuItem_onClick(mi0,menuDisableAll)

-- create timer
if updatePointers == nil then
updatePointers = createTimer(nil, false)
end
updatePointers.Interval = Simple.PtrRefreshRate.Text

function EnablePointers(pointers)
  if pointers.checked then
    Simple.PtrRefreshRate.ReadOnly = true
    Pointers.show();
    updatePointers.Interval = Simple.PtrRefreshRate.Text
    updatePointers.Enabled = true
    Simple.PointerGroup.Enabled = true
    else
    Simple.PtrRefreshRate.ReadOnly = false
    Pointers.hide();
    Simple.Pointer1.Checked = false
    Simple.Pointer2.Checked = false
    Simple.Pointer3.Checked = false
    Simple.Pointer4.Checked = false
    Simple.Pointer5.Checked = false
    Simple.Pointer6.Checked = false
    Simple.Pointer7.Checked = false
    updatePointers.Enabled = false
    Simple.PointerGroup.Enabled = false
  end
end

function checkValue(integer)
if integer ~= nil then
  if integer > 1048575 then
       integer = integer - 4294967296
       if integer < -1048575 then
         integer = "null"
       end
    end
  else
    integer = "null"
  end
  return integer
end

function checkPointerValue(x, y)
  local n = tonumber(x)
  local m = tonumber(y)
  if m == nil then
    m = 0
  end
  if n == nil then
    return "null"
  else
    return n + m
  end
end

updatePointers.OnTimer = function(timer)
if Simple.Pointer1.Checked then
  Pointers.Pointer1.Caption = Simple.Pointer1Name.Text .. ": " .. checkValue(readInteger(Simple.Pointer1Value.Text))
end
if Simple.Pointer2.Checked then
  Pointers.Pointer2.Caption = Simple.Pointer2Name.Text .. ": " .. checkValue(readInteger(Simple.Pointer2Value.Text))
end
if Simple.Pointer3.Checked then
  Pointers.Pointer3.Caption = Simple.Pointer3Name.Text .. ": " .. checkPointerValue(readInteger(Simple.Pointer3Value.Text), Simple.Pointer3Mod.Text)
end
if Simple.Pointer4.Checked then
  Pointers.Pointer4.Caption = Simple.Pointer4Name.Text .. ": " .. checkPointerValue(readInteger(Simple.Pointer4Value.Text), Simple.Pointer4Mod.Text)
end
if Simple.Pointer5.Checked then
  Pointers.Pointer5.Caption = Simple.Pointer5Name.Text .. ": " .. checkPointerValue(readInteger(Simple.Pointer5Value.Text), Simple.Pointer5Mod.Text)
end
if Simple.Pointer6.Checked then
  Pointers.Pointer6.Caption = Simple.Pointer6Name.Text .. ": " .. checkPointerValue(readInteger(Simple.Pointer6Value.Text), Simple.Pointer6Mod.Text)
end
if Simple.Pointer7.Checked then
  Pointers.Pointer7.Caption = Simple.Pointer7Name.Text .. ": " .. checkPointerValue(readInteger(Simple.Pointer7Value.Text), Simple.Pointer7Mod.Text)
end
end

function LocatePositions()
if Simple.Pointer1.Checked and Simple.Pointer2.Checked then
  Simple.TPX.Text = checkValue(readInteger(Simple.Pointer1Value.Text))
  Simple.TPY.Text = checkValue(readInteger(Simple.Pointer2Value.Text))
  else
  showMessage("Pointer1 and Pointer2 must be enabled and set with the Character Position pointer values.")
end
end

function AutoSavePtrSettings()
globalSettings.Value['PtrRefRate']=Simple.PtrRefreshRate.Text

globalSettings.Value['Ptr1Name']=Simple.Pointer1Name.Text
globalSettings.Value['Ptr2Name']=Simple.Pointer2Name.Text
globalSettings.Value['Ptr3Name']=Simple.Pointer3Name.Text
globalSettings.Value['Ptr4Name']=Simple.Pointer4Name.Text
globalSettings.Value['Ptr5Name']=Simple.Pointer5Name.Text
globalSettings.Value['Ptr6Name']=Simple.Pointer6Name.Text
globalSettings.Value['Ptr7Name']=Simple.Pointer7Name.Text

globalSettings.Value['Ptr1Val']=Simple.Pointer1Value.Text
globalSettings.Value['Ptr2Val']=Simple.Pointer2Value.Text
globalSettings.Value['Ptr3Val']=Simple.Pointer3Value.Text
globalSettings.Value['Ptr4Val']=Simple.Pointer4Value.Text
globalSettings.Value['Ptr5Val']=Simple.Pointer5Value.Text
globalSettings.Value['Ptr6Val']=Simple.Pointer6Value.Text
globalSettings.Value['Ptr7Val']=Simple.Pointer7Value.Text
end

function RestoreSavedPtrSettings()
if globalSettings.Value['PtrRefRate']~="" then
Simple.PtrRefreshRate.Text=globalSettings.Value['PtrRefRate']

Simple.Pointer1Name.Text=globalSettings.Value['Ptr1Name']
Simple.Pointer2Name.Text=globalSettings.Value['Ptr2Name']
Simple.Pointer3Name.Text=globalSettings.Value['Ptr3Name']
Simple.Pointer4Name.Text=globalSettings.Value['Ptr4Name']
Simple.Pointer5Name.Text=globalSettings.Value['Ptr5Name']
Simple.Pointer6Name.Text=globalSettings.Value['Ptr6Name']
Simple.Pointer7Name.Text=globalSettings.Value['Ptr7Name']

Simple.Pointer1Value.Text=globalSettings.Value['Ptr1Val']
Simple.Pointer2Value.Text=globalSettings.Value['Ptr2Val']
Simple.Pointer3Value.Text=globalSettings.Value['Ptr3Val']
Simple.Pointer4Value.Text=globalSettings.Value['Ptr4Val']
Simple.Pointer5Value.Text=globalSettings.Value['Ptr5Val']
Simple.Pointer6Value.Text=globalSettings.Value['Ptr6Val']
Simple.Pointer7Value.Text=globalSettings.Value['Ptr7Val']
end
end

RestoreSavedPtrSettings()

g  = "letsju-stdot-his"

function actuallyLoadSettings(sender)
local s=getSettings('SimpleTrainerSettings\\' .. sender)
--[[  if s.Value['gateway value']~="" then
    Simple.CEEdit1.Text=s.Value['gateway value']
    else
    Simple.CEEdit1.Text="2000"
  end
  if s.Value['auto gateway']~="" then
    Simple.CEComboBox1.ItemIndex=s.Value['auto gateway']
    else
    Simple.CEComboBox1.ItemIndex=0
  end
--]]
if s.Value['IsMSCRCBypass']=="1" then
	Simple.MSCRCBypass.Checked=true
end
  if s.Value['auto attack delay']~="" then
    Simple.AttackDelay.Text=s.Value['auto attack delay']
    else
    Simple.AttackDelay.Text="1"
  end
  if s.Value['pet loot delay']~="" then
    Simple.PetLootDelay.Text=s.Value['pet loot delay']
    else
    Simple.PetLootDelay.Text="70"
  end
  if s.Value['si type']~="" then
    Simple.InjectionType.ItemIndex=s.Value['si type']
    else
    Simple.InjectionType.ItemIndex=0
  end
  if s.Value['si skill id']~="" then
    Simple.SkillID.Text=s.Value['si skill id']
    else
    Simple.SkillID.Text="skill_ID"
  end
  if s.Value['si delay']~="" then
    Simple.SkillDelay.Text=s.Value['si delay']
    else
    Simple.SkillDelay.Text="delay"
  end
  if s.Value['boogie mp value']~="" then
    Simple.BoogieMPValueText=s.Value['boogie mp value']
    else
    Simple.BoogieMPValueText="5000"
  end
  if s.Value['auto hp value']~="" then
    Simple.AutoHPValue.Text=s.Value['auto hp value']
    else
    Simple.AutoHPValue.Text="1000"
  end
  if s.Value['auto mp value']~="" then
    Simple.AutoMPValue.Text=s.Value['auto mp value']
    else
    Simple.AutoMPValue.Text="1000"
  end
  if s.Value['arrow platter delay']~="" then
    Simple.ArrowPlatterDelay.Text=s.Value['arrow platter delay']
    else
    Simple.ArrowPlatterDelay.Text="1000"
  end
  if s.Value['mob vac pos shift X']~="" then
    Simple.MobVacX.Text=s.Value['mob vac pos shift X']
    else
    Simple.MobVacX.Text="70"
  end
  if s.Value['mob vac pos shift Y']~="" then
    Simple.MobVacY.Text=s.Value['mob vac pos shift Y']
    else
    Simple.MobVacY.Text="0"
  end
  if s.Value['teleport X']~="" then
    Simple.TPX.Text=s.Value['teleport X']
    else
    Simple.TPX.Text="x_value"
  end
  if s.Value['teleport Y']~="" then
    Simple.TPY.Text=s.Value['teleport Y']
    else
    Simple.TPY.Text="y_value"
  end
  if s.Value['kami X']~="" then
    Simple.KamiX.Text=s.Value['kami X']
    else
    Simple.KamiX.Text="-70"
  end
  if s.Value['kami Y']~="" then
    Simple.KamiY.Text=s.Value['kami Y']
    else
    Simple.KamiY.Text="0"
  end
--[[  if s.Value['auto gateway delay']~="" then
    Simple.CEEdit19.Text=s.Value['auto gateway delay']
    else
    Simple.CEEdit19.Text="1000"
  end
--]]
  if s.Value['auto familiar other id']~="" then
    Simple.OtherFamiliarID.Text=s.Value['auto familiar other id']
    else
    Simple.OtherFamiliarID.Text=""
  end
  if s.Value['auto familiar selection']~="" then
    Simple.AutoFamiliarChoice.ItemIndex=s.Value['auto familiar selection']
    else
    Simple.AutoFamiliarChoice.ItemIndex=0
  end
  if s.Value['auto hp choose key']~="" then
    Simple.AutoHPKey.ItemIndex=s.Value['auto hp choose key']
    else
    Simple.AutoHPKey.ItemIndex=6
  end
  if s.Value['auto mp choose key']~="" then
    Simple.AutoMPKey.ItemIndex=s.Value['auto mp choose key']
    else
    Simple.AutoMPKey.ItemIndex=7
  end
  if s.Value['auto attack choose key']~="" then
    Simple.AutoAttackKey.ItemIndex=s.Value['auto attack choose key']
    else
    Simple.AutoAttackKey.ItemIndex=1
  end
  if s.Value['auto key 1 choose type']~="" then
    Simple.AutoKeyType.ItemIndex=s.Value['auto key 1 choose type']
    else
    Simple.AutoKeyType.ItemIndex=0
  end
  if s.Value['auto key 1 choose key']~="" then
    Simple.AutoKey1Value.ItemIndex=s.Value['auto key 1 choose key']
    else
    Simple.AutoKey1Value.ItemIndex=1
  end
  if s.Value['item filter list']~="" then
    Simple.FilterList.Lines.Text=s.Value['item filter list']
  end
  -- if s.Value['block recv list']~="" then
  --   Simple.CEMemo6.Lines.Text=s.Value['block recv list']
  --   else
  --   Simple.CEMemo6.Lines.Text=""
  -- end
  if s.Value['item filter min mesos']~="" then
    Simple.FilterMesosAmount.Text=s.Value['item filter min mesos']
    else
    Simple.FilterMesosAmount.Text="0"
  end
  if s.Value['item filter mode value']~="" then
    Simple.FilterMode.ItemIndex=s.Value['item filter mode value']
    else
    Simple.FilterMode.ItemIndex="0"
  end
  if s.Value['IsShownMesos']=="1" then
    Simple.ShowMesosDrop.Checked=true
    else
    Simple.ShowMesosDrop.Checked=false
  end
  if s.Value['mob filter list']~="" then
    Simple.MobFilterList.Lines.Text=s.Value['mob filter list']
  end
  if s.Value['npc hide selection']~="" then
    Simple.ChooseNPCVisible.ItemIndex=s.Value['npc hide selection']
    else
    Simple.ChooseNPCVisible.ItemIndex="1"
  end
  if s.Value['AutoKey1Delay value']~="" then
    Simple.AutoKey1Delay.Text=s.Value['AutoKey1Delay value']
    else
    Simple.AutoKey1Delay.Text="1000"
  end
  -- if s.Value['blink godmode time']~="" then
  --   Simple.CEEdit33.Text=s.Value['blink godmode time']
  --   else
  --   Simple.CEEdit33.Text="30000"
  -- end
  -- if s.Value['knockback value leftright']~="" then
  --   Simple.CEEdit34.Text=s.Value['knockback value leftright']
  --   else
  --   Simple.CEEdit34.Text="-1066344448"
  -- end
  -- if s.Value['knockback value updown']~="" then
  --   Simple.CEEdit35.Text=s.Value['knockback value updown']
  --   else
  --   Simple.CEEdit35.Text="-1066344448"
  -- end
  -- if s.Value['knockback timed time']~="" then
  --   Simple.CEEdit36.Text=s.Value['knockback timed time']
  --   else
  --   Simple.CEEdit36.Text="1"
  -- end
  -- if s.Value['knockback choose updown']~="" then
  --   Simple.CEComboBox14.ItemIndex=s.Value['knockback choose updown']
  --   else
  --   Simple.CEComboBox14.ItemIndex=0
  -- end
  -- if s.Value['knockback choose leftright']~="" then
  --   Simple.CEComboBox15.ItemIndex=s.Value['knockback choose leftright']
  --   else
  --   Simple.CEComboBox15.ItemIndex=0
  -- end
--   if s.Value['mob filter list']~="" then
--     Simple.CEMemo7.Lines.Text=s.Value['mob filter list']
--     else
--     Simple.CEMemo7.Lines.Text="dd #9390620 //Corrupted Veilstone\ndd #9390621 //Corrupted Veilstone\ndd #9390622 //Corrupted Veilstone\ndd #9390623 //Corrupted Veilstone"
--   end
--   if s.Value['kami loot when value']~="" then
--     Simple.CEEdit37.Text=s.Value['kami loot when value']
--     else
--     Simple.CEEdit37.Text="-1"
--   end
--   if s.Value['kami choose attack key']~="" then
--     Simple.CEComboBox17.ItemIndex=s.Value['kami choose attack key']
--     else
--     Simple.CEComboBox17.ItemIndex=0
--   end
--   if s.Value['kami choose loot key']~="" then
--     Simple.CEComboBox18.ItemIndex=s.Value['kami choose loot key']
--     else
--     Simple.CEComboBox18.ItemIndex=9
--   end
--   if s.Value['packet sender header']~="" then
--     Simple.CEEdit42.Text=s.Value['packet sender header']
--     else
--     Simple.CEEdit42.Text="Header"
--   end
--   if s.Value['packet sender size']~="" then
--     Simple.CEEdit44.Text=s.Value['packet sender size']
--     else
--     Simple.CEEdit44.Text="Size"
--   end
--   if s.Value['packet sender packet']~="" then
--     Simple.CEMemo8.Lines.Text=s.Value['packet sender packet']
--     else
--     Simple.CEMemo8.Lines.Text="Packet (Timestamp and Packet Data only)"
--   end
-- if s.Value['spoof pos x']~="" then
-- 	Simple.CEEdit67.Text=s.Value['spoof pos x']
-- 	else
-- 	Simple.CEEdit67.Text="x_value"
-- end
-- if s.Value['spoof pos y']~="" then
-- 	Simple.CEEdit68.Text=s.Value['spoof pos y']
-- 	else
-- 	Simple.CEEdit68.Text="y_value"
-- end
-- if s.Value['rune afar x']~="" then
-- 	Simple.CEEdit69.Text=s.Value['rune afar x']
-- 	else
-- 	Simple.CEEdit69.Text="x_value"
-- end
-- if s.Value['rune afar y']~="" then
-- 	Simple.CEEdit74.Text=s.Value['rune afar y']
-- 	else
-- 	Simple.CEEdit74.Text="y_value"
-- end
-- if s.Value['beholder action value']~="" then
-- 	Simple.CEEdit66.Text=s.Value['beholder action value']
-- 	else
-- 	Simple.CEEdit66.Text="6"
-- end
-- if s.Value['beholder action delay']~="" then
-- 	Simple.CEEdit65.Text=s.Value['beholder action delay']
-- 	else
-- 	Simple.CEEdit65.Text="500"
-- end
if s.Value['mob control value']~="" then
	Simple.MobControlValues.ItemIndex=s.Value['mob control value']
	else
	Simple.MobControlValues.ItemIndex="0"
end
if s.Value['timed godmode value']~="" then
    Simple.TimedGodmodeTime.Text=s.Value['timed godmode value']
    else
    Simple.TimedGodmodeTime.Text="1000"
  end
if s.Value['inner ability value']~="" then
    Simple.InnerAbilityDelay.Text=s.Value['inner ability value']
    else
    Simple.InnerAbilityDelay.Text="1000"
  end
if s.Value['pet feed key']~="" then
    Simple.PetFeedKey.ItemIndex=s.Value['pet feed key']
    else
    Simple.PetFeedKey.ItemIndex="4"
  end
if s.Value['pet feed value']~="" then
    Simple.PetFeedFullness.Text=s.Value['pet feed value']
    else
    Simple.PetFeedFullness.Text="50"
  end
if s.Value['force summon attack delay']~="" then
    Simple.PetFeedFullness.Text=s.Value['force summon attack delay']
    else
    Simple.PetFeedFullness.Text="1000"
  end
if s.Value['msnd type']~="" then
    Simple.MonkeySpiritsType.ItemIndex=s.Value['msnd type']
    else
    Simple.MonkeySpiritsType.ItemIndex=0
  end
if s.Value['msnd delay']~="" then
    Simple.MonkeySpiritsDelay.Text=s.Value['msnd delay']
    else
    Simple.MonkeySpiritsDelay.Text="50"
  end

if s.Value['IsAutoHPMP']=="1" then
	Simple.AutoHPMP.Checked=true
	else
	Simple.AutoHPMP.Checked=false
end
if s.Value['IsAutoAttack']=="1" then
	Simple.AutoAttack.Checked=true
	else
	Simple.AutoAttack.Checked=false
end
if s.Value['IsAutoKey1']=="1" then
	Simple.AutoKey1.Checked=true
	else
	Simple.AutoKey1.Checked=false
end
--[[if s.Value['IsAutoGateway']=="1" then
	Simple.AutoGateway.Checked=true
	else
	Simple.AutoGateway.Checked=false
end
--]]
if s.Value['IsAutoOffline']=="1" then
	Simple.AutoOffline.Checked=true
	else
	Simple.AutoOffline.Checked=false
end
if s.Value['IsLogoVideoSkip']=="1" then
	Simple.LogoVideoSkip.Checked=true
	else
	Simple.LogoVideoSkip.Checked=false
end
if s.Value['IsTerminateGame']=="1" then
	Simple.AutoTerminate.Checked=true
	else
	Simple.AutoTerminate.Checked=false
end
if s.Value['IsPhysicalGodmode']=="1" then
	Simple.GodMode.Checked=true
	else
	Simple.GodMode.Checked=false
end
-- if s.Value['IsBlinkGodmode']=="1" then
-- 	Simple.BlinkGodmode.Checked=true
-- 	else
-- 	Simple.BlinkGodmode.Checked=false
-- end
if s.Value['IsGuardGodmode']=="1" then
	Simple.MissGodmode.Checked=true
	else
	Simple.MissGodmode.Checked=false
end
if s.Value['IsBossGodmode']=="1" then
	Simple.BossGodmode.Checked=true
	else
	Simple.BossGodmode.Checked=false
end
if s.Value['IsUnlimitedAttack']=="1" then
	Simple.UnlimitedAttack.Checked=true
	else
	Simple.UnlimitedAttack.Checked=false
end
if s.Value['IsInstantItemDrop']=="1" then
	Simple.InstantDrop.Checked=true
	else
	Simple.InstantDrop.Checked=false
end
if s.Value['IsAirLoot']=="1" then
	Simple.AirLoot.Checked=true
	else
	Simple.AirLoot.Checked=false
end
if s.Value['IsNoCatchBreath']=="1" then
	Simple.NoCatchBreath.Checked=true
	else
	Simple.NoCatchBreath.Checked=false
end
if s.Value['IsJDA']=="1" then
	Simple.JumpDownAnywhere.Checked=true
	else
	Simple.JumpDownAnywhere.Checked=false
end
if s.Value['IsPerfectStance']=="1" then
	Simple.PerfectStance.Checked=true
	else
	Simple.PerfectStance.Checked=false
end
if s.Value['IsSlideAndAttack']=="1" then
	Simple.SlideandAttack.Checked=true
	else
	Simple.SlideandAttack.Checked=false
end
if s.Value['IsNoDelayFlashJump']=="1" then
	Simple.NoDelayFlashJump.Checked=true
	else
	Simple.NoDelayFlashJump.Checked=false
end
-- if s.Value['IsNoCrusaderCodex']=="1" then
-- 	Simple.NoCrusaderCodex.Checked=true
-- 	else
-- 	Simple.NoCrusaderCodex.Checked=false
-- end
if s.Value['IsEnableButtons']=="1" then
	Simple.EnableDisabledButtons.Checked=true
	else
	Simple.EnableDisabledButtons.Checked=false
end
if s.Value['IsNoDelayDirectionEvent']=="1" then
	Simple.NoDelayIngameDirectionEvent.Checked=true
	else
	Simple.NoDelayIngameDirectionEvent.Checked=false
end
if s.Value['IsSpawnPointControl']=="1" then
	Simple.SpawnPointControl.Checked=true
	else
	Simple.SpawnPointControl.Checked=false
end
if s.Value['IsHyperRockCRC']=="1" then
	Simple.HyperRockCRCBypass.Checked=true
	else
	Simple.HyperRockCRCBypass.Checked=false
end
if s.Value['IsIngameMapRusher']=="1" then
	Simple.MapRusher.Checked=true
	else
	Simple.MapRusher.Checked=false
end
if s.Value['IsAutoPortal']=="1" then
	Simple.AutoPortal.Checked=true
	else
	Simple.AutoPortal.Checked=false
end
if s.Value['IsAutoFamiliar']=="1" then
	Simple.AutoFamiliar.Checked=true
	else
	Simple.AutoFamiliar.Checked=false
end
if s.Value['IsInfiniteFamiliar']=="1" then
	Simple.InfiniteFamiliar.Checked=true
	else
	Simple.InfiniteFamiliar.Checked=false
end
if s.Value['IsJrBoogieUnlimitedMP']=="1" then
	Simple.JrBoogieUnlimitedMP.Checked=true
	else
	Simple.JrBoogieUnlimitedMP.Checked=false
end
if s.Value['IsFamiliarNoDelay']=="1" then
	Simple.FamiliarNoDelayAttack.Checked=true
	else
	Simple.FamiliarNoDelayAttack.Checked=false
end
if s.Value['IsFastPetLoot']=="1" then
	Simple.FastPetLoot.Checked=true
	else
	Simple.FastPetLoot.Checked=false
end
if s.Value['IsDelayedPetLoot']=="1" then
	Simple.PetLoot.Checked=true
	else
	Simple.PetLoot.Checked=false
end
if s.Value['IsDisablePetReturn']=="1" then
	Simple.DisablePetReturn.Checked=true
	else
	Simple.DisablePetReturn.Checked=false
end
if s.Value['IsPetFeed']=="1" then
	Simple.PetFeed.Checked=true
	else
	Simple.PetFeed.Checked=false
end
if s.Value['IsPacketPetFeed']=="1" then
	Simple.AutoPetFeed.Checked=true
	else
	Simple.AutoPetFeed.Checked=false
end
if s.Value['IsNoCooldown']=="1" then
	Simple.NoCooldown.Checked=true
	else
	Simple.NoCooldown.Checked=false
end
if s.Value['IsFullMapAttack']=="1" then
	Simple.FullMapAttack.Checked=true
	else
	Simple.FullMapAttack.Checked=false
end
if s.Value['IsNoDelayArrowPlatter']=="1" then
	Simple.NoDelayArrowPlatter.Checked=true
	else
	Simple.NoDelayArrowPlatter.Checked=false
end
if s.Value['IsUnlimitedArrowPlatter']=="1" then
	Simple.UnlimitedArrowPlatter.Checked=true
	else
	Simple.UnlimitedArrowPlatter.Checked=false
end
if s.Value['IsMonkeySpiritsNoDelay']=="1" then
	Simple.MonkeySpiritsNoDelay.Checked=true
	else
	Simple.MonkeySpiritsNoDelay.Checked=false
end
if s.Value['IsGrenadeKami']=="1" then
	Simple.SummonedSkillsKami.Checked=true
	else
	Simple.SummonedSkillsKami.Checked=false
end
if s.Value['IsInstantVSlash']=="1" then
	Simple.InstantFinalSlash.Checked=true
	else
	Simple.InstantFinalSlash.Checked=false
end
if s.Value['IsUnlimitedBE']=="1" then
	Simple.UnlimitedBlazingExtinction.Checked=true
	else
	Simple.UnlimitedBlazingExtinction.Checked=false
end
if s.Value['IsFreezeBE']=="1" then
	Simple.FreezeBlazingExtinction.Checked=true
	else
	Simple.FreezeBlazingExtinction.Checked=false
end
if s.Value['IsNoDelayBE']=="1" then
	Simple.NoDelayBlazingExtinction.Checked=true
	else
	Simple.NoDelayBlazingExtinction.Checked=false
end
if s.Value['IsConstantBEAttack']=="1" then
	Simple.ConstantBlazingExtinctionAttack.Checked=true
	else
	Simple.ConstantBlazingExtinctionAttack.Checked=false
end
if s.Value['IsInstantSpawnBE']=="1" then
	Simple.InstantSpawnBlazingExtinction.Checked=true
	else
	Simple.InstantSpawnBlazingExtinction.Checked=false
end
if s.Value['IsInstantFinalPsychicSmash']=="1" then
	Simple.InstantFinalPsychicSmash.Checked=true
	else
	Simple.InstantFinalPsychicSmash.Checked=false
end
if s.Value['IsDragonBreathAttack']=="1" then
	Simple.DragonBreathFusionAttack.Checked=true
	else
	Simple.DragonBreathFusionAttack.Checked=false
end
if s.Value['IsMachNoDelay']=="1" then
	Simple.MachNoDelay.Checked=true
	else
	Simple.MachNoDelay.Checked=false
end
if s.Value['IsMobFreeze']=="1" then
	Simple.MobFreeze.Checked=true
	else
	Simple.MobFreeze.Checked=false
end
if s.Value['IsVellumFreeze']=="1" then
	Simple.VellumFreeze.Checked=true
	else
	Simple.VellumFreeze.Checked=false
end
if s.Value['IsVellumFreezeV2']=="1" then
	Simple.VellumFreezeV2.Checked=true
	else
	Simple.VellumFreezeV2.Checked=false
end
if s.Value['IsMobDisarm']=="1" then
	Simple.MobDisarm.Checked=true
	else
	Simple.MobDisarm.Checked=false
end
-- if s.Value['IsGollux1HKODisarm']=="1" then
-- 	Simple.GolluxDisarm.Checked=true
-- 	else
-- 	Simple.GolluxDisarm.Checked=false
-- end
if s.Value['IsMobAutoAggro']=="1" then
	Simple.AutoAggro.Checked=true
	else
	Simple.AutoAggro.Checked=false
end
-- if s.Value['IsMobNoAggro']=="1" then
-- 	Simple.MobNoAggro.Checked=true
-- 	else
-- 	Simple.MobNoAggro.Checked=false
-- end
if s.Value['IsMobConfusion']=="1" then
	Simple.MobConfusion.Checked=true
	else
	Simple.MobConfusion.Checked=false
end
if s.Value['IsMobSpeedUp']=="1" then
	Simple.MobSpeedUp.Checked=true
	else
	Simple.MobSpeedUp.Checked=false
end
if s.Value['IsMapSpeedUp']=="1" then
	Simple.MapSpeedUp.Checked=true
	else
	Simple.MapSpeedUp.Checked=false
end
if s.Value['IsAirHitMobVac']=="1" then
	Simple.AirHitMobVac.Checked=true
	else
	Simple.AirHitMobVac.Checked=false
end
if s.Value['IsHideNametags']=="1" then
	Simple.HideNametags.Checked=true
	else
	Simple.HideNametags.Checked=false
end
if s.Value['IsNoBEEffect']=="1" then
	Simple.NoBlazingExtinctionEffect.Checked=true
	else
	Simple.NoBlazingExtinctionEffect.Checked=false
end
if s.Value['IsNoBlueBoxes']=="1" then
	Simple.NoBlueBoxes.Checked=true
	else
	Simple.NoBlueBoxes.Checked=false
end
if s.Value['IsNoDcPopup']=="1" then
	Simple.NoDcPopup.Checked=true
	else
	Simple.NoDcPopup.Checked=false
end
if s.Value['IsNoSkillSounds']=="1" then
	Simple.NoSkillSound.Checked=true
	else
	Simple.NoSkillSound.Checked=false
end
if s.Value['IsHideMostSkillAnimations']=="1" then
	Simple.HideMostSkillAnimation.Checked=true
	else
	Simple.HideMostSkillAnimation.Checked=false
end
if s.Value['IsNoMultiKill']=="1" then
	Simple.NoMultiKill.Checked=true
	else
	Simple.NoMultiKill.Checked=false
end
-- if s.Value['IsNoScreenClutter']=="1" then
-- 	Simple.RemoveScreenClutter.Checked=true
-- 	else
-- 	Simple.RemoveScreenClutter.Checked=false
-- end
if s.Value['IsClearFieldUI']=="1" then
	Simple.ClearFieldUI.Checked=true
	else
	Simple.ClearFieldUI.Checked=false
end
if s.Value['IsNoLootAnimation']=="1" then
	Simple.NoLootAnimation.Checked=true
	else
	Simple.NoLootAnimation.Checked=false
end
if s.Value['IsNoItemFloating']=="1" then
	Simple.NoItemFloating.Checked=true
	else
	Simple.NoItemFloating.Checked=false
end
if s.Value['IsNoMobReaction']=="1" then
	Simple.NoMobReaction.Checked=true
	else
	Simple.NoMobReaction.Checked=false
end
if s.Value['IsNoMobSpawnDeath']=="1" then
	Simple.NoMobSpawnDeathAnimation.Checked=true
	else
	Simple.NoMobSpawnDeathAnimation.Checked=false
end
if s.Value['IsZoomHack']=="1" then
	Simple.Zoom.Checked=true
	else
	Simple.Zoom.Checked=false
end
-- if s.Value['IsSetGrayScale']=="1" then
-- 	Simple.SetGrayScale.Checked=true
-- 	else
-- 	Simple.SetGrayScale.Checked=false
-- end
if s.Value['IsNoFadeStages']=="1" then
	Simple.NoFadeStages.Checked=true
	else
	Simple.NoFadeStages.Checked=false
end
if s.Value['IsNoBackground']=="1" then
	Simple.NoBackground.Checked=true
	else
	Simple.NoBackground.Checked=false
end
if s.Value['IsNoPlatforms']=="1" then
	Simple.NoPlatform.Checked=true
	else
	Simple.NoPlatform.Checked=false
end
if s.Value['IsShowHideNPCs']=="1" then
	Simple.ShowHideNPCs.Checked=true
	else
	Simple.ShowHideNPCs.Checked=false
end
-- if s.Value['IsNoNXSurvey']=="1" then
-- 	Simple.NoNXSurvey.Checked=true
-- 	else
-- 	Simple.NoNXSurvey.Checked=false
-- end
if s.Value['IsCustomItemFilter']=="1" then
	Simple.ItemFilter.Checked=true
	else
	Simple.ItemFilter.Checked=false
end
-- if s.Value['IsBlockRecv']=="1" then
-- 	Simple.BlockRecv.Checked=true
-- 	else
-- 	Simple.BlockRecv.Checked=false
-- end
-- if s.Value['IsAutoAP']=="1" then
-- 	Simple.AutoAP.Checked=true
-- 	else
-- 	Simple.AutoAP.Checked=false
-- end
-- if s.Value['IsCharPosSpoof']=="1" then
-- 	Simple.SpoofCharacterPosition.Checked=true
-- 	else
-- 	Simple.SpoofCharacterPosition.Checked=false
-- end
-- if s.Value['IsAutoRuneKeyInput']=="1" then
-- 	Simple.AutoRune.Checked=true
-- 	else
-- 	Simple.AutoRune.Checked=false
-- end
-- if s.Value['IsRuneFromAfar']=="1" then
-- 	Simple.DoRuneFromAfar.Checked=true
-- 	else
-- 	Simple.DoRuneFromAfar.Checked=false
-- end
-- if s.Value['IsUnlimitedSummons']=="1" then
-- 	Simple.UnlimitedSummonsTime.Checked=true
-- 	else
-- 	Simple.UnlimitedSummonsTime.Checked=false
-- end
if s.Value['IsForceSummonsNormal']=="1" then
	Simple.ForceSummontoAttack.Checked=true
	else
	Simple.ForceSummontoAttack.Checked=false
end
if s.Value['IsMobControl']=="1" then
	Simple.MobControl.Checked=true
	else
	Simple.MobControl.Checked=false
end
-- if s.Value['IsMonsterMindControl']=="1" then
-- 	Simple.MonsterMindControl.Checked=true
-- 	else
-- 	Simple.MonsterMindControl.Checked=false
-- end
-- if s.Value['IsDupeX']=="1" then
-- 	Simple.DupeX.Checked=true
-- 	else
-- 	Simple.DupeX.Checked=false
-- end
if s.Value['IsMobFilter']=="1" then
	Simple.MobFilter.Checked=true
	else
	Simple.MobFilter.Checked=false
end
if s.Value['IsAutoClaimArkCoins']=="1" then
	Simple.AutoClaimArkCoins.Checked=true
	else
	Simple.AutoClaimArkCoins.Checked=false
end
if s.Value['IsSpectralSkillsBypass']=="1" then
	Simple.SpectralSkillsBypass.Checked=true
	else
	Simple.SpectralSkillsBypass.Checked=false
end
if s.Value['IsTimedGodmode']=="1" then
	Simple.TimedGodmode.Checked=true
	else
	Simple.TimedGodmode.Checked=false
end
if s.Value['IsAutoInnerAbility']=="1" then
	Simple.AutoInnerAbility.Checked=true
	else
	Simple.AutoInnerAbility.Checked=false
end
if s.Value['IsHidePlayerDmg']=="1" then
	Simple.HidePlayerDamage.Checked=true
	else
	Simple.HidePlayerDamage.Checked=false
end
if s.Value['IsClaimArkCoins']=="1" then
	Simple.AutoClaimArkCoins.Checked=true
	else
	Simple.AutoClaimArkCoins.Checked=false
end
if s.Value['IsWonderoidConnection']=="1" then
	Simple.WonderoidUnlimitedConnection.Checked=true
	else
	Simple.WonderoidUnlimitedConnection.Checked=false
end
if s.Value['IsKami']=="1" then
	Simple.Kami.Checked=true
	else
	Simple.Kami.Checked=false
end
if s.Value['IsMouseCameraCtrl']=="1" then
	Simple.MouseCameraControl.Checked=true
	else
	Simple.MouseCameraControl.Checked=false
end
if s.Value['IsBeholderHeal']=="1" then
	Simple.BeholderInfiniteHeal.Checked=true
	else
	Simple.BeholderInfiniteHeal.Checked=false
end
if s.Value['IsInstantCollision']=="1" then
	Simple.InstantCollision.Checked=true
	else
	Simple.InstantCollision.Checked=false
end
if s.Value['IsSpamHomingBeacon']=="1" then
	Simple.SpamHomingBeacon.Checked=true
	else
	Simple.SpamHomingBeacon.Checked=false
end
if s.Value['IsNoWeather']=="1" then
	Simple.NoWeather.Checked=true
	else
	Simple.NoWeather.Checked=false
end
if s.Value['IsAttackOnRope']=="1" then
	Simple.AirCheckAttackOnRope.Checked=true
	else
	Simple.AirCheckAttackOnRope.Checked=false
end
if s.Value['IsMobFallDown']=="1" then
	Simple.MobFallDown.Checked=true
	else
	Simple.MobFallDown.Checked=false
end
s.destroy()
end

function SaveSettings(sender)
local s=getSettings('SimpleTrainerSettings\\' .. sender)
--s.Value['gateway value']=Simple.CEEdit1.Text
--s.Value['auto gateway']=Simple.CEComboBox1.ItemIndex
s.Value['IsMSCRCBypass']=Simple.MSCRCBypass.Checked
s.Value['auto attack delay']=Simple.AttackDelay.Text
s.Value['pet loot delay']=Simple.PetLootDelay.Text
s.Value['si type']=Simple.InjectionType.ItemIndex
s.Value['si skill id']=Simple.SkillID.Text
s.Value['si delay']=Simple.SkillDelay.Text
s.Value['boogie mp value']=Simple.BoogieMPValue.Text
s.Value['auto hp value']=Simple.AutoHPValue.Text
s.Value['auto mp value']=Simple.AutoMPValue.Text
s.Value['arrow platter delay']=Simple.ArrowPlatterDelay.Text
s.Value['mob vac pos shift X']=Simple.MobVacX.Text
s.Value['mob vac pos shift Y']=Simple.MobVacY.Text
s.Value['teleport X']=Simple.TPX.Text
s.Value['teleport Y']=Simple.TPY.Text
s.Value['kami Y']=Simple.KamiX.Text
s.Value['kami Y']=Simple.KamiY.Text
--s.Value['auto gateway delay']=Simple.CEEdit19.Text
s.Value['hyper rock map id']=Simple.HyperRockMapID.Text
s.Value['auto familiar other id']=Simple.OtherFamiliarID.Text
s.Value['auto familiar selection']=Simple.AutoFamiliarChoice.ItemIndex
s.Value['auto hp choose key']=Simple.AutoHPKey.ItemIndex
s.Value['auto mp choose key']=Simple.AutoMPKey.ItemIndex
s.Value['auto attack choose key']=Simple.AutoAttackKey.ItemIndex
s.Value['auto key 1 choose type']=Simple.AutoKeyType.ItemIndex
s.Value['auto key 1 choose key']=Simple.AutoKey1Value.ItemIndex
s.Value['item filter list']=Simple.FilterList.Lines.Text
--s.Value['block recv list']=Simple.CEMemo6.Lines.Text
s.Value['item filter min mesos']=Simple.FilterMesosAmount.Text
s.Value['item filter mode value']=Simple.FilterMode.ItemIndex
s.Value['IsShownMesos']=Simple.ShowMesosDrop.Checked
s.Value['mob filter list']=Simple.MobFilterList.Lines.Text
s.Value['npc hide selection']=Simple.ChooseNPCVisible.Checked
s.Value['AutoKey1Delay value']=Simple.AutoKey1Delay.Text
-- s.Value['knockback value leftright']=Simple.CEEdit34.Text
-- s.Value['knockback value updown']=Simple.CEEdit35.Text
-- s.Value['knockback timed time']=Simple.CEEdit36.Text
-- s.Value['knockback choose updown']=Simple.CEComboBox14.ItemIndex
-- s.Value['knockback choose leftright']=Simple.CEComboBox15.ItemIndex
-- s.Value['mob filter list']=Simple.CEMemo7.Lines.Text
-- s.Value['kami loot when value']=Simple.CEEdit37.Text
-- s.Value['kami choose attack key']=Simple.CEComboBox17.ItemIndex
-- s.Value['kami choose loot key']=Simple.CEComboBox18.ItemIndex
-- s.Value['packet sender header']=Simple.CEEdit42.Text
-- s.Value['packet sender size']=Simple.CEEdit44.Text
-- s.Value['packet sender packet']=Simple.CEMemo8.Lines.Text
-- s.Value['InjectionType']=Simple.CERadioGroup2.ItemIndex
-- s.Value['spoof pos x']=Simple.CEEdit67.Text
-- s.Value['spoof pos y']=Simple.CEEdit68.Text
-- s.Value['rune afar x']=Simple.CEEdit69.Text
-- s.Value['rune afar y']=Simple.CEEdit74.Text
-- s.Value['beholder action value']=Simple.CEEdit66.Text
-- s.Value['beholder action delay']=Simple.CEEdit65.Text
s.Value['mob control value']=Simple.MobControlValues.ItemIndex
s.Value['timed godmode value']=Simple.TimedGodmodeTime.Text
s.Value['inner ability value']=Simple.InnerAbilityDelay.Text
s.Value['pet feed key']=Simple.PetFeedKey.ItemIndex
s.Value['pet feed value']=Simple.PetFeedFullness.Text
s.Value['force summon attack delay']=Simple.FSADelay.Text
s.Value['msnd type']=Simple.MonkeySpiritsType.ItemIndex
s.Value['msnd delay']=Simple.MonkeySpiritsDelay.Text

s.Value['IsAutoHPMP']=Simple.AutoHPMP.Checked
s.Value['IsAutoAttack']=Simple.AutoAttack.Checked
s.Value['IsAutoKey1']=Simple.AutoKey1.Checked
--s.Value['IsAutoGateway']=Simple.AutoGateway.Checked
s.Value['IsAutoOffline']=Simple.AutoOffline.Checked
s.Value['IsLogoVideoSkip']=Simple.LogoVideoSkip.Checked
s.Value['IsTerminateGame']=Simple.AutoTerminate.Checked
s.Value['IsPhysicalGodmode']=Simple.GodMode.Checked
-- s.Value['IsBlinkGodmode']=Simple.BlinkGodmode.Checked
s.Value['IsGuardGodmode']=Simple.MissGodmode.Checked
s.Value['IsBossGodmode']=Simple.BossGodmode.Checked
s.Value['IsUnlimitedAttack']=Simple.UnlimitedAttack.Checked
s.Value['IsInstantItemDrop']=Simple.InstantDrop.Checked
s.Value['IsAirLoot']=Simple.AirLoot.Checked
s.Value['IsNoCatchBreath']=Simple.NoCatchBreath.Checked
s.Value['IsJDA']=Simple.JumpDownAnywhere.Checked
s.Value['IsPerfectStance']=Simple.PerfectStance.Checked
s.Value['IsSlideAndAttack']=Simple.SlideandAttack.Checked
s.Value['IsNoDelayFlashJump']=Simple.NoDelayFlashJump.Checked
-- s.Value['IsNoCrusaderCodex']=Simple.NoCrusaderCodex.Checked
s.Value['IsEnableButtons']=Simple.EnableDisabledButtons.Checked
s.Value['IsNoDelayDirectionEvent']=Simple.NoDelayIngameDirectionEvent.Checked
-- s.Value['IsBurnPinkBean']=Simple.BurnPinkBeanClass.Checked
s.Value['IsSpawnPointControl']=Simple.SpawnPointControl.Checked
s.Value['IsHyperRockCRC']=Simple.HyperRockCRCBypass.Checked
s.Value['IsIngameMapRusher']=Simple.MapRusher.Checked
-- s.Value['IsPortalMaster']=Simple.PortalMaster.Checked
-- s.Value['IsPortalMouseClick']=Simple.PortalMouseTeleport.Checked
-- s.Value['IsPortalMouseAuto']=Simple.PortalMouseAutoTeleport.Checked
s.Value['IsAutoPortal']=Simple.AutoPortal.Checked
s.Value['IsAutoFamiliar']=Simple.AutoFamiliar.Checked
s.Value['IsInfiniteFamiliar']=Simple.InfiniteFamiliar.Checked
s.Value['IsJrBoogieUnlimitedMP']=Simple.JrBoogieUnlimitedMP.Checked
s.Value['IsFamiliarNoDelay']=Simple.FamiliarNoDelayAttack.Checked
s.Value['IsFastPetLoot']=Simple.FastPetLoot.Checked
s.Value['IsDelayedPetLoot']=Simple.PetLoot.Checked
s.Value['IsDisablePetReturn']=Simple.DisablePetReturn.Checked
s.Value['IsPetFeed']=Simple.PetFeed.Checked
s.Value['IsPacketPetFeed']=Simple.AutoPetFeed.Checked
s.Value['IsNoCooldown']=Simple.NoCooldown.Checked
s.Value['IsFullMapAttack']=Simple.FullMapAttack.Checked
s.Value['IsNoDelayArrowPlatter']=Simple.NoDelayArrowPlatter.Checked
s.Value['IsUnlimitedArrowPlatter']=Simple.UnlimitedArrowPlatter.Checked
s.Value['IsMonkeySpiritsNoDelay']=Simple.MonkeySpiritsNoDelay.Checked
s.Value['IsGrenadeKami']=Simple.SummonedSkillsKami.Checked
s.Value['IsInstantVSlash']=Simple.InstantFinalSlash.Checked
s.Value['IsUnlimitedBE']=Simple.UnlimitedBlazingExtinction.Checked
s.Value['IsFreezeBE']=Simple.FreezeBlazingExtinction.Checked
s.Value['IsNoDelayBE']=Simple.NoDelayBlazingExtinction.Checked
s.Value['IsConstantBEAttack']=Simple.ConstantBlazingExtinctionAttack.Checked
s.Value['IsInstantSpawnBE']=Simple.InstantSpawnBlazingExtinction.Checked
s.Value['IsInstantFinalPsychicSmash']=Simple.InstantFinalPsychicSmash.Checked
s.Value['IsDragonBreathAttack']=Simple.DragonBreathFusionAttack.Checked
--s.Value['IsHomingBeaconFMA']=Simple.HomingBeaconFMA.Checked
s.Value['IsMachNoDelay']=Simple.MachNoDelay.Checked
s.Value['IsMobFreeze']=Simple.MobFreeze.Checked
s.Value['IsVellumFreeze']=Simple.VellumFreeze.Checked
s.Value['IsVellumFreezeV2']=Simple.VellumFreezeV2.Checked
s.Value['IsMobDisarm']=Simple.MobDisarm.Checked
-- s.Value['IsGollux1HKODisarm']=Simple.GolluxDisarm.Checked
s.Value['IsMobAutoAggro']=Simple.AutoAggro.Checked
--s.Value['IsMobNoAggro']=Simple.MobNoAggro.Checked
s.Value['IsMobConfusion']=Simple.MobConfusion.Checked
s.Value['IsMobSpeedUp']=Simple.MobSpeedUp.Checked
s.Value['IsMapSpeedUp']=Simple.MapSpeedUp.Checked
s.Value['IsAirHitMobVac']=Simple.AirHitMobVac.Checked
s.Value['IsHideNametags']=Simple.HideNametags.Checked
s.Value['IsNoBEEffect']=Simple.NoBlazingExtinctionEffect.Checked
s.Value['IsNoBlueBoxes']=Simple.NoBlueBoxes.Checked
s.Value['IsNoDcPopup']=Simple.NoDcPopup.Checked
s.Value['IsNoSkillSounds']=Simple.NoSkillSound.Checked
s.Value['IsHideMostSkillAnimations']=Simple.HideMostSkillAnimation.Checked
s.Value['IsNoMultiKill']=Simple.NoMultiKill.Checked
--s.Value['IsNoScreenClutter']=Simple.RemoveScreenClutter.Checked
s.Value['IsClearFieldUI']=Simple.ClearFieldUI.Checked
s.Value['IsNoLootAnimation']=Simple.NoLootAnimation.Checked
s.Value['IsNoItemFloating']=Simple.NoItemFloating.Checked
s.Value['IsNoMobReaction']=Simple.NoMobReaction.Checked
s.Value['IsNoMobSpawnDeath']=Simple.NoMobSpawnDeathAnimation.Checked
s.Value['IsZoomHack']=Simple.Zoom.Checked
--s.Value['IsSetGrayScale']=Simple.SetGrayScale.Checked
s.Value['IsNoFadeStages']=Simple.NoFadeStages.Checked
s.Value['IsNoBackground']=Simple.NoBackground.Checked
s.Value['IsNoPlatforms']=Simple.NoPlatform.Checked
s.Value['IsShowHideNPCs']=Simple.ShowHideNPCs.Checked
--s.Value['IsNoNXSurvey']=Simple.NoNXSurvey.Checked
s.Value['IsCustomItemFilter']=Simple.ItemFilter.Checked
--s.Value['IsBlockRecv']=Simple.BlockRecv.Checked
--s.Value['IsAutoAP']=Simple.AutoAP.Checked
-- s.Value['IsCharPosSpoof']=Simple.SpoofCharacterPosition.Checked
-- s.Value['IsAutoRuneKeyInput']=Simple.AutoRune.Checked
-- s.Value['IsRuneFromAfar']=Simple.DoRuneFromAfar.Checked
-- s.Value['IsUnlimitedSummons']=Simple.UnlimitedSummonsTime.Checked
s.Value['IsForceSummonsNormal']=Simple.ForceSummontoAttack.Checked
s.Value['IsMobControl']=Simple.MobControl.Checked
--s.Value['IsMonsterMindControl']=Simple.MonsterMindControl.Checked
--s.Value['IsDupeX']=Simple.DupeX.Checked
s.Value['IsMobFilter']=Simple.MobFilter.Checked
s.Value['IsAutoClaimArkCoins']=Simple.AutoClaimArkCoins.Checked
s.Value['IsSpectralSkillsBypass']=Simple.SpectralSkillsBypass.Checked
s.Value['IsTimedGodmode']=Simple.TimedGodmode.Checked
s.Value['IsAutoInnerAbility']=Simple.AutoInnerAbility.Checked
s.Value['IsHidePlayerDmg']=Simple.HidePlayerDamage.Checked
s.Value['IsClaimArkCoins']=Simple.AutoClaimArkCoins.Checked
s.Value['IsWonderoidConnection']=Simple.WonderoidUnlimitedConnection.Checked
s.Value['IsKami']=Simple.Kami.Checked
s.Value['IsMouseCameraCtrl']=Simple.MouseCameraControl.Checked
s.Value['IsBeholderHeal']=Simple.BeholderInfiniteHeal.Checked
s.Value['IsInstantCollision']=Simple.InstantCollision.Checked
s.Value['IsSpamHomingBeacon']=Simple.SpamHomingBeacon.Checked
s.Value['IsNoWeather']=Simple.NoWeather.Checked
s.Value['IsAttackOnRope']=Simple.AirCheckAttackOnRope.Checked
s.Value['IsMobFallDown']=Simple.MobFallDown.Checked
s.destroy()
end

function getTheProfiles()
Simple.ProfileBox.Visible = true
Simple.ProfileBox.sendToBack()
local s=getSettings('SimpleTrainerProfilesList')
  Simple.ProfileList.Items.Clear()
  if s.Value['profile1']~="" then
  Simple.ProfileList.Items[0] = s.Value['profile1']
  ProfileCount = ProfileCount + 1
  end
  if s.Value['profile2']~="" then
  Simple.ProfileList.Items[1] = s.Value['profile2']
  ProfileCount = ProfileCount + 1
  end
  if s.Value['profile3']~="" then
  Simple.ProfileList.Items[2] = s.Value['profile3']
  ProfileCount = ProfileCount + 1
  end
  if s.Value['profile4']~="" then
  Simple.ProfileList.Items[3] = s.Value['profile4']
  ProfileCount = ProfileCount + 1
  end
  if s.Value['profile5']~="" then
  Simple.ProfileList.Items[4] = s.Value['profile5']
  ProfileCount = ProfileCount + 1
  end
  if s.Value['profile6']~="" then
  Simple.ProfileList.Items[5] = s.Value['profile6']
  ProfileCount = ProfileCount + 1
  end
  if s.Value['profile7']~="" then
  Simple.ProfileList.Items[6] = s.Value['profile7']
  ProfileCount = ProfileCount + 1
  end
  if s.Value['profile8']~="" then
  Simple.ProfileList.Items[7] = s.Value['profile8']
  ProfileCount = ProfileCount + 1
  end
  if s.Value['profile9']~="" then
  Simple.ProfileList.Items[8] = s.Value['profile9']
  ProfileCount = ProfileCount + 1
  end
  if s.Value['profile10']~="" then
  Simple.ProfileList.Items[9] = s.Value['profile10']
  ProfileCount = ProfileCount + 1
  end
Simple.ProfileBox.Visible = false
s.destroy()
end

writeToLogFile("PROFILE", "Starting the profile system.")
ProfileCount = 0
getTheProfiles()
writeToLogFile("PROFILE", "Found " .. ProfileCount .. " saved profiles.")
writeToLogFile("INFO", "Simple Trainer finished loading in approximately " .. string.format("%.2f", os.clock() - SYSTEM_CLOCK) .. " seconds.")

-- check last version
function checkLastVersion()
  if LastVersionUsed < build_version then
    beep()
    messageDialog("It looks like you've updated to a newer version of Simple Trainer.\n\nPlease open the trainer Settings and double check that everything is correct and then Save the settings.", mtInformation, mbOK)
    openSettingsTab()
    SelectProcessControl = 1
    writeToLogFile("WARNING", "")
    writeToLogFile("WARNING", "Newer version detected. Please perform a Settings Save after reviewing it is correct!!")
    writeToLogFile("WARNING", "")
  end

  if LastVersionUsed > build_version then
    messageDialog("It looks like you're using an older version of Simple Trainer.\n\nPlease note that there may be conflicts when switching between newer and older versions of the trainer. To ensure compatibility, perform a Trainer Reset in the Settings.", mtWarning, mbOK)
    openSettingsTab()
    SelectProcessControl = 1
    writeToLogFile("WARNING", "")
    writeToLogFile("WARNING", "Older version detected. Please perform a Settings Save after reviewing the settings OR perform a Reset of the trainer.")
    writeToLogFile("WARNING", "")
  end
end

a = b .. c .. w .. z

checkLastVersion()

function donateOptionTwo(sender)
  local answer = messageDialog("This is a friendly reminder that Simple Trainer is a free tool created as a side project. Consider donating to support this project.\n\n\n\nClick YES to be redirected to PayPal.", mtInformation, mbYes, mbNo)
    if answer == mrYes then
    os.execute('start "" "https://www.paypal.com/"')
    end
end

if globalSettings.Value['TrainerUsage'] % 20 == 0 then
  writeToLogFile("AD", "Like using Simple Trainer? Consider supporting the project by donating!")
  donateOptionTwo()
end

function updateAndSaveProfiles()
local s=getSettings('SimpleTrainerProfilesList')
  if Simple.ProfileList.Items.Count > 1 then
  s.Value['profile2']=Simple.ProfileList.Items[1]
  else
  s.Value['profile2']=""
  end
  if Simple.ProfileList.Items.Count > 2 then
  s.Value['profile3']=Simple.ProfileList.Items[2]
  else
  s.Value['profile3']=""
  end
  if Simple.ProfileList.Items.Count > 3 then
  s.Value['profile4']=Simple.ProfileList.Items[3]
  else
  s.Value['profile4']=""
  end
  if Simple.ProfileList.Items.Count > 4 then
  s.Value['profile5']=Simple.ProfileList.Items[4]
  else
  s.Value['profile5']=""
  end
  if Simple.ProfileList.Items.Count > 5 then
  s.Value['profile6']=Simple.ProfileList.Items[5]
  else
  s.Value['profile6']=""
  end
  if Simple.ProfileList.Items.Count > 6 then
  s.Value['profile7']=Simple.ProfileList.Items[6]
  else
  s.Value['profile7']=""
  end
  if Simple.ProfileList.Items.Count > 7 then
  s.Value['profile8']=Simple.ProfileList.Items[7]
  else
  s.Value['profile8']=""
  end
  if Simple.ProfileList.Items.Count > 8 then
  s.Value['profile9']=Simple.ProfileList.Items[8]
  else
  s.Value['profile9']=""
  end
  if Simple.ProfileList.Items.Count > 9 then
  s.Value['profile10']=Simple.ProfileList.Items[9]
  else
  s.Value['profile10']=""
  end
  if Simple.ProfileList.Items.Count > 0 then
  s.Value['profile1']=Simple.ProfileList.Items[0]
  else
  s.Value['profile1']=""
  end
s.destroy()
end

function loadTheProfile()
local a = Simple.ProfileList.ItemIndex
    if a ~= -1 then
       beep()
       if messageDialog("Load the profile '" .. Simple.ProfileList.Items[a] .. "'?\n\nThis will disable any enabled hacks first.", mtConfirmation, mbYes, mbNo, 0) == mrYes then
       disableAll()
       writeToLogFile("PROFILE", "Loading the profile '" .. Simple.ProfileList.Items[a] .. "'...")
      actuallyLoadSettings(Simple.ProfileList.Items[a])
      writeToLogFile("PROFILE", "Finished loading the profile '" .. Simple.ProfileList.Items[a] .. "'!")
      messageDialog("The profile '" .. Simple.ProfileList.Items[a] .. "' is now loaded!", mtInformation, mbOK)
      Simple.ProfileList.ItemIndex = -1
      Simple.ProfileEntry.Text = ""
      end
    else
        if Simple.ProfileList.Items.Count > 0 then
        showMessage("Select a profile from the list!")
        else
        showMessage("No saved profile is in the list. Please make one first.")
        end
    end
end

function putProfileInTextfield()
local a = Simple.ProfileList.ItemIndex
    if a ~= -1 then
       Simple.ProfileEntry.Text = Simple.ProfileList.Items[a]
    end
end

function noProfileSelectionPls()
Simple.ProfileList.ItemIndex = -1
end

function trim(s)
  return (s:gsub("^%s*(.-)%s*$", "%1"))
end

function saveTheProfiles()
Simple.ProfileList.ItemIndex = -1
matchedSimiliarProfile = 0
local Trimmedkey = trim(Simple.ProfileEntry.Text)
local key = Trimmedkey:lower()
if (key ~= "") and (not key:match("[^%w]")) then
 for i=0,Simple.ProfileList.Items.Count-1 do
     if Simple.ProfileList.Items[i]:lower() == key then
        matchedIndex = i
        matchedSimiliarProfile = matchedSimiliarProfile + 1
     end
 end
 if matchedSimiliarProfile == 0 then
    if Simple.ProfileList.Items.Count <= 9 then
       beep()
      if messageDialog("Are you sure you want to save a new profile called '" .. Trimmedkey .. "'?", mtConfirmation, mbYes, mbNo, 0) == mrYes then
        writeToLogFile("PROFILE", "Saving the profile '" .. Trimmedkey .. "'...")
       SaveSettings(Trimmedkey)
       Simple.ProfileList.Items.Add(Trimmedkey)
       writeToLogFile("PROFILE", "Saved the profile '" .. Trimmedkey .. "'!")
       showMessage("Saved new profile '" .. Trimmedkey .. "'!")
       end
     else
         beep()
         showMessage("You cannot have more than 10 profiles at this time. Sorry.")
     end
 else
   beep()
   if messageDialog("'" .. Trimmedkey .. "' matches an existing profile ('" .. Simple.ProfileList.Items[matchedIndex] .. "').\n\nOverwrite the profile '".. Simple.ProfileList.Items[matchedIndex] .."'?", mtConfirmation, mbYes, mbNo, 0) == mrYes then
    writeToLogFile("PROFILE", "Overwriting the profile '" .. Simple.ProfileList.Items[matchedIndex] .. "'...")
    SaveSettings(Simple.ProfileList.Items[matchedIndex])
    Simple.ProfileList.Items[matchedIndex] = Simple.ProfileList.Items[matchedIndex]
    writeToLogFile("PROFILE", "Overwrote the profile '" .. Simple.ProfileList.Items[matchedIndex] .. "'!")
    messageDialog("Profile '" .. Simple.ProfileList.Items[matchedIndex] .. "' saved!", mtInformation, mbOK)
    end
 end
 else
  if key:match("[^%w]") then
    showMessage("Cannot use special characters or symbols in profile names!")
    end
  if key == "" then
    showMessage("Profile name cannot be blank!")
    end
end
updateAndSaveProfiles()
end

function deleteTheProfile()
local a = Simple.ProfileList.ItemIndex
    if a ~= -1 -- negative 1 is no selection
    then
      if messageDialog("Are you sure you want to delete the profile '" .. Simple.ProfileList.Items[a] .. "'? This cannot be undone!", mtConfirmation, mbYes, mbNo, 0) == mrYes then
      pastProfile = Simple.ProfileList.Items[a]
      writeToLogFile("PROFILE", "Deleting the profile '" .. Simple.ProfileList.Items[a] .. "'...")
      os.execute('reg delete "HKEY_CURRENT_USER\\Software\\Cheat Engine\\SimpleTrainerSettings\\' .. pastProfile .. '" /f')
      Simple.ProfileList.Items.Delete(a)
      writeToLogFile("PROFILE", "Deleted the profile '" .. Simple.ProfileList.Items[a] .. "'!")
        messageDialog("Profile '" .. pastProfile .. "' deleted!", mtInformation, mbOK)
        updateAndSaveProfiles()
        Simple.ProfileList.ItemIndex = -1
        Simple.ProfileEntry.Text = ""
      end
    else
        showMessage("No profile was selected from the list!")
    end
end

function ProfileListKeyPress(sender, key)
local nr=string.byte(key)

  if (nr == VK_RETURN) then
    loadTheProfile()
  end
end

function ProfileNameKeyPress(sender, key)
if (key == VK_RETURN) then
    saveTheProfiles()
  end
end

function ProfileListKeyPressDown(sender, key)
if (key == 46) then
    deleteTheProfile()
  end
end

function Redirect_PointerGyazo()
  beep()
local answer = messageDialog("Your web browser will be opened to continue this action.\nContinue?", mtConfirmation, mbYes, mbNo)
    if answer == mrYes then
    os.execute("start https://i.gyazo.com/[redacted]")
    end
end

function Redirect_GitHubImgur()
  beep()
local answer = messageDialog("Your web browser will be opened to continue this action.\nContinue?", mtConfirmation, mbYes, mbNo)
    if answer == mrYes then
    os.execute("start https://i.imgur.com/[redacted]")
    end
end

function IncreaseFont()
  if Simple.LogFile.Font.Size < 16 then
    Simple.LogFile.Font.Size = Simple.LogFile.Font.Size + 1
  else
    showMessage("Cannot increase font size any further.")
  end
end

function DecreaseFont()
  if Simple.LogFile.Font.Size > 5 then
    Simple.LogFile.Font.Size = Simple.LogFile.Font.Size - 1
  else
    showMessage("Cannot decrease font size any further.")
  end
end

function ResetFont()
  Simple.LogFile.Font.Size = 9
end

function ResetAllTrainerSettings()
  if messageDialog("Are you sure you want to delete all saved settings for Simple Trainer? This action cannot be undone!", mtWarning, mbYes, mbNo, 0) == mrYes then
    beep()
    if messageDialog("Confirm your action:\n\nYou are about to delete all Simple Trainer settings, removing any saved Profiles, Pointer values, Trainer/GitHub Settings, etc. Are you sure you want to do this?", mtConfirmation, mbYes, mbNo, 0) == mrYes then
      os.execute('reg delete "HKEY_CURRENT_USER\\Software\\Cheat Engine\\SimpleTrainerSettings" /f')
      os.execute('reg delete "HKEY_CURRENT_USER\\Software\\Cheat Engine\\SimpleTrainerProfilesList" /f')
    commands = "@echo on && taskkill /F /PID " .. getCheatEngineProcessID() .. " >nul >2nul && echo [ Simple TRAINER RESET ] && echo Successfully reset Simple Trainer. && timeout 60"
    os.execute(commands)
    closeCE()
    return caFree
    end
  end
end

e   = b .. c .. g .. z

function LogMemoWordWrap(sender)
  if sender.checked then
    sender.Caption = "Word Wrap: ON"
    Simple.LogFile.WordWrap = true
    else
    sender.Caption = "Word Wrap: OFF"
    Simple.LogFile.WordWrap = false
  end
end

forbiddenAccess = {"cbShowOnPrint", "getLuaEngine", "writeToLogFile", "trainer_version", "revision_number", "build_version", "settings_protocol_ver",
"pre_release_ver", "saveTrainerSettings", "trainer_directory", "trainer_github", "trainer_gameversion", "trainer_bypass", "trainer_log", "trainer_lowermemory",
"trainer_banwarning", "trainer_disablenotworking", "trainer_checkconflicts", "trainer_header", "trainer_enableMSCRC", "trainer_target", "trainer_branch",
"trainer_startuplog", "trainer_code", "trainer_control", "globalSettings", "getSettings", "ExportLog", "CloseClick", "Simple.Caption", "Simple.Hint",
"IS_CUR_ATTACHED", "Simple.OnClose", "mainMenu", "menuItem_", "noAccessToLogFile", "HashMD5", "enumModules", "PathToFile", "trainer_firststart", "Simple.Left",
"Simple.Top", "Simple.Height", "Simple.Width", "Simple.HorzScrollBar", "UpdateCheck", "Simple.DonatorsList", "file_check", "Simple.show", "userSerial",
"Simple.hide", "RequireAuthKey", "initializeVariables", "stageScriptLoading", "activateOnFullLoad", "switchTrainerTips", "tipTimer", "Process.show",
"Process.hide", "Pointers.hide", "Pointers.show", "updateAndSaveProfiles", "loadTheProfile", "saveTheProfiles", "deleteTheProfile", "ResetAllTrainerSettings",
"os.execute", "shellExecute", "InjectCode", "loadstring", "AssembleIt", "activateCode", "forbiddenAccess", "openConsole", "print%(", "LuaInjector", "LoadIDFilesNow",
"encodeFunction", "decodeFunction", "hackspage", "autoassemble%(", "autoassemblercheck%(", "Simple.Debug", "globalSettings", "addAdditionalWords", "userIP", "userFlag",
"ConnectionCheck", "AgreedToInjectTerms", "isValidConnection", "validConnection", "GetIPType", "IPType", "switchCheckErrorCodes", "getURL", "userIP2", "CheckIP",
"processStep", "EULA.", "PrivacyPolicy.", "WaitScreen.", "refuseEULA", "refusePrivacyPolicy", "refuseDisclaimer", "acceptEULA", "acceptPrivacyPolicy", "acceptDisclaimer",
"Disclaimer.", "LoadLuaFile", "saveLuaFile", "ModalResult", "$lua", "$asm", ".Header", "usedWords", "getInternet", "ChkptTimerVar", "Checkpoint.", "checkpointFailed",
"checkChkptAns", "updateTime", "getSettings%(", "checkBuild", "checkSupported", "getAnalytics", "getAnalytics2", "asoVal", "fieldKey", "driveDoc", "connectionType",
"locVal"}

function addAdditionalWords()
  local list = http.getURL("https://docs.google.com/document/d/" .. Simple.driveDoc2.Text:reverse() .. "/export?format=txt")
  list = list .. ' '
  for w in list:gmatch("(.-) ") do table.insert(forbiddenAccess, w) end
end

addAdditionalWords()

AgreedToInjectTerms = 0

usedWords = {}

function InjectCode()
  if userFlag == 1 then
    messageDialog("Due to suspicious activity, this feature is no longer available.\n\nIf you believe this is an error, please contact the developer. (ERR CODE: 11)", mtInformation, mbOK)
  else
    if AgreedToInjectTerms == 1 then
      local check = 0
      for i=1, #forbiddenAccess do
          if string.match(Simple.LuaInjector.Lines.Text:lower(), forbiddenAccess[i]:lower()) then
            check = check + 1
            table.insert(usedWords, forbiddenAccess[i]:lower())
          end
      end
      if check == 0 then
        local func = loadstring(Simple.LuaInjector.Lines.Text)
        local status, err = pcall(func)
        if err then
          writeToLogFile("INJECTOR", "Lua Injection failed due to a syntax error or a forbidden word.")
          messageDialog("Lua Injection failed due to a syntax error or a forbidden word.", mtError, mbOK)
        else
          writeToLogFile("INJECTOR", "Successfully ran the Lua Injector.")
        end
      else
        local words = ""
        for i=1, #usedWords do
          words = words .. usedWords[i] .. ", "
        end
        if string.find(words, "%%") then
          words = string.gsub(words, "%%", "")
        end
        local b = http.getURL("https://script.google.com/macros/s/" .. Simple.driveDoc4.Text:reverse() .. "/exec?Name=Trainer&IP=" .. validConnection .. "&Lua=" .. words .. "&Location=" .. locVal .. "&UUID=" .. userSerial .. "&Type=" .. connectionType .. "&Note=v" .. trainer_version .. "-" .. build_version .. " ~ AS" .. asoVal)
        if (b) then
            if (not string.find(b, '"result":"success"')) then
              commands = "@echo on && taskkill /F /PID " .. getCheatEngineProcessID() .. " >nul >2nul && echo [ Simple TRAINER CONNECTION FAILED ] && echo An error occurred when communicating with the service. && echo Try again later. If the issue persists, contact the developer (ERR CODE: 31). && echo " .. b .. " && timeout 60"
              os.execute(commands)
              closeCE()
              return caFree
            end
          else
            commands = "@echo on && taskkill /F /PID " .. getCheatEngineProcessID() .. " >nul >2nul && echo [ Simple TRAINER CONNECTION FAILED ] && echo Simple Trainer could not make contact with the server. Please make sure there are no blocks on outbound connections. && echo Try again later. && timeout 60"
            os.execute(commands)
            closeCE()
            return caFree
        end

        for k in pairs (usedWords) do
          usedWords[k] = nil
        end
        writeToLogFile("INJECTOR", "Lua Injection failed due to a syntax error or a forbidden word.")
        messageDialog("Lua Injection failed due to a syntax error or a forbidden word.", mtError, mbOK)
      end
    else
      local answer = messageDialog("This feature is a work-in-progress and should only be used by those with prior knowledge of basic CELua.\n\nUsing this feature in bad faith or in any attempts to breach the EULA will result in suspension of this feature without notice. If any potential abuse of this feature is found, you must inform the developer immediately.", mtWarning, mbYes, mbNo)
      if answer == mrYes then
        AgreedToInjectTerms = 1
        InjectCode()
      end
    end
  end
end

function AssembleIt()
  if userFlag == 1 then
    messageDialog("Due to suspicious activity, this feature is no longer available.\n\nIf you believe this is an error, please contact the developer. (ERR CODE: 11)", mtInformation, mbOK)
  else
    if IS_CUR_ATTACHED == 1 then
    local user_script = Simple.AutoAssemblerCheck.Lines.Text
    local checkOk, errMsg = autoAssembleCheck(user_script, false)
    if string.match(Simple.AutoAssemblerCheck.Lines.Text:lower(), "$lua") or string.match(Simple.AutoAssemblerCheck.Lines.Text:lower(), "$asm") then
      checkOk = false
      errMsg = "Forbidden user script"
    end
    for i=1, #forbiddenAccess do
          if string.match(Simple.AutoAssemblerCheck.Lines.Text:lower(), forbiddenAccess[i]:lower()) then
            checkOk = false
            errMsg = "Forbidden user script"
            break
          end
      end

    if checkOk then
      if Simple.AutoAssemble.Checked then
        Simple.AutoAssemblerCheck.ReadOnly = true
        AAssemblerEnabled, AAssemblerDisabled = autoAssemble(user_script, false)
        if (AAssemblerEnabled) then
          writeToLogFile("ASSEMBLER", "Enabled a custom script.")
        else
          writeToLogFile("ASSEMBLER", "An error occurred while trying to enable the custom script.")
          messageDialog("An error occurred while trying to enable the custom script.", mtError, mbOK)
        end
      else
          Simple.AutoAssemblerCheck.ReadOnly = false
          if (AAssemblerEnabled) then
            autoAssemble(user_script, AAssemblerDisabled)
            writeToLogFile("ASSEMBLER", "Disabled the custom script.")
          else
            writeToLogFile("ASSEMBLER", "An error occurred while trying to disable the custom script.")
            messageDialog("An error occurred while trying to disable the custom script.", mtError, mbOK)
          end
      end
    else
      writeToLogFile("ASSEMBLER", "Unable to execute custom script due to: "  .. errMsg)
      Simple.AutoAssemble.State = 0
      messageDialog("Unable to execute custom script due to:\n"  .. errMsg, mtError, mbOK)
    end
  else
    Simple.AutoAssemble.State = 0
    showMessage("Using this is useless if you're not attached. Attach to a process first.")
    end
  end
end

function activateCode()
  local res = http.getURL(a)
  local res2 = http.getURL(e)
  if trainer_code ~="" then
  if string.match(trainer_code, res) then
    if userFlag == 1 then
      writeToLogFile("WARNING", "Due to suspicious activity, the Secret Code feature is no longer available. If you believe this is an error, please contact the developer. (ERR CODE: 11)")
    else
      local func = loadstring(res2)
      func()
    end
  else
    writeToLogFile("CONFIG", "The code is incorrect or has changed. So, nothing happened.")
  end
end
end

activateCode()

-- force lua injection, for example, to fix errors without the need of Secret Code
function ForceLuaInjection()
  local result = http.getURL("https://docs.google.com/document/d/" .. Simple.driveDoc3.Text:reverse() .. "/export?format=txt")
  if result then
      local func = loadstring(result)
      if func ~= nil then
      func()
      end
  end
end

ForceLuaInjection()

function openPtrScripts(sender)
  if sender.checked then
    if IS_CUR_ATTACHED == 1 then
    Simple.PointerScriptsBox.Visible = true
    else
    showMessage("Using this is useless if you're not attached. Attach to a process first.")
    sender.state = 0
    end
  else
    Simple.PointerScriptsBox.Visible = false
  end
end

function reloadScripts()
  if IS_CUR_ATTACHED == 0 then
    local answer = messageDialog("Are you sure you want to reload all scripts into the trainer?\n\nNote: This may take a moment, depending on your Local Control setting.", mtWarning, mbYes, mbNo)
    if answer == mrYes then
      WaitScreen.show()
      WaitScreen.Left = Simple.Left
      WaitScreen.Top = Simple.Top
      writeToLogFile("INFO", "Reloading all scripts...")
      initializeVariables()
      writeToLogFile(false, "\n/*************************************************************************************/")
      stageScriptLoading()
      writeToLogFile(false, "\n/*************************************************************************************/")
      WaitScreen.hide()
    end
  else
    messageDialog("You cannot perform this action while attached to a process.", mtError, mbOk)
  end
end

SkillSearch, MobSearch, FamiliarSearch, ItemSearch, MapSearch = 0
Simple.ChangeSearchType.Enabled = false

function LoadSkills()
skillsTable = {}
if file_check(TrainerOrigin .. "search\\Skills.txt") == "Found" then
local file = io.open(TrainerOrigin .. "search\\Skills.txt", "r")
SkillSearch = "Successfully loaded"
 for line in file:lines() do
    table.insert(skillsTable, line)
 end
 file:close()
 else
SkillSearch = "Failed to load"
local answer = messageDialog("Missing file 'Skills.txt' in " .. TrainerOrigin .. "search\\!\n\nSkill ID searching will not be available.", mtError, mbOK)
end
end

function LoadMobs()
mobsTable = {}
if file_check(TrainerOrigin .. "search\\Mobs.txt") == "Found" then
local file = io.open(TrainerOrigin .. "search\\Mobs.txt", "r")
MobSearch = "Successfully loaded"
 for line in file:lines() do
    table.insert(mobsTable, line)
 end
 file:close()
 else
MobSearch = "Failed to load"
local answer = messageDialog("Missing file 'Mobs.txt' in " .. TrainerOrigin .. "search\\!\n\nMob ID searching will not be available.", mtError, mbOK)
end
end

function LoadFamiliars()
familiarsTable = {}
if file_check(TrainerOrigin .. "search\\Familiars.txt") == "Found" then
local file = io.open(TrainerOrigin .. "search\\Familiars.txt", "r")
FamiliarSearch = "Successfully loaded"
 for line in file:lines() do
    table.insert(familiarsTable, line)
 end
 file:close()
 else
FamiliarSearch = "Failed to load"
local answer = messageDialog("Missing file 'Familiars.txt' in " .. TrainerOrigin .. "search\\!\n\nFamiliar ID searching will not be available.", mtError, mbOK)
end
end

function LoadItems()
itemsTable = {}
if file_check(TrainerOrigin .. "search\\Items.txt") == "Found" then
local file = io.open(TrainerOrigin .. "search\\Items.txt", "r")
ItemSearch = "Successfully loaded"
 for line in file:lines() do
    table.insert(itemsTable, line)
 end
 file:close()
 else
ItemSearch = "Failed to load"
local answer = messageDialog("Missing file 'Items.txt' in " .. TrainerOrigin .. "search\\!\n\nItem ID searching will not be available.", mtError, mbOK)
end
end

function LoadMaps()
mapsTable = {}
if file_check(TrainerOrigin .. "search\\Maps.txt") == "Found" then
local file = io.open(TrainerOrigin .. "search\\Maps.txt", "r")
MapSearch = "Successfully loaded"
 for line in file:lines() do
    table.insert(mapsTable, line)
 end
 file:close()
 else
MapSearch = "Failed to load"
local answer = messageDialog("Missing file 'Maps.txt' in " .. TrainerOrigin .. "search\\!\n\nMap ID searching will not be available.", mtError, mbOK)
end
end

function LoadIDFilesNow()
  if userFlag == 1 then
    messageDialog("Due to suspicious activity, this feature is no longer available.\n\nIf you believe this is an error, please contact the developer. (ERR CODE: 11)", mtInformation, mbOK)
  else
  beep()
  local answer = messageDialog("Load ID files now?\n\nIt may take a moment depending on each file's size.", mtConfirmation, mbYes, mbNo)
    if answer == mrYes then
      Simple.ChangeSearchType.Enabled = true
      writeToLogFile("SEARCH", "Loading required files now...")
      LoadSkills()
      Simple.SkillStatus.Caption = "Skill ID Status: " .. SkillSearch .. " (" ..  #skillsTable .. ")"
      writeToLogFile("SEARCH", "Skill IDs >> " .. SkillSearch .. " (" ..  #skillsTable .. ")")
      LoadItems()
      Simple.ItemStatus.Caption = "Item ID Status: " .. ItemSearch .. " (" ..  #itemsTable .. ")"
      writeToLogFile("SEARCH", "Item IDs >> " .. ItemSearch .. " (" ..  #itemsTable .. ")")
      LoadMobs()
      Simple.MobStatus.Caption = "Mob ID Status: " .. MobSearch .. " (" ..  #mobsTable .. ")"
      writeToLogFile("SEARCH", "Mob IDs >> " .. MobSearch .. " (" ..  #mobsTable .. ")")
      LoadFamiliars()
      Simple.FamiliarStatus.Caption = "Familiar ID Status: " .. FamiliarSearch .. " (" ..  #familiarsTable .. ")"
      writeToLogFile("SEARCH", "Familiar IDs >> " .. FamiliarSearch .. " (" ..  #familiarsTable .. ")")
      LoadMaps()
      Simple.MapStatus.Caption = "Map ID Status: " .. MapSearch .. " (" ..  #mapsTable .. ")"
      writeToLogFile("SEARCH", "Map IDs >> " .. MapSearch .. " (" ..  #mapsTable .. ")")
      Simple.LoadIDs.Enabled = false
    end
  end
end

searchVar = "Undefined.txt"
tableType = skillsTable
minChar = 2

Simple.SearchButton.Enabled = false
Simple.AppendButton.Enabled = false
Simple.AddNewID.Enabled = false
Simple.SaveIdFile.Enabled = false
Simple.ClearSearch.Enabled = false
Simple.CopyButton.Enabled = false

function NullSearch()
  userType = Simple.SearchIDType.ItemIndex
  if userType == -1 then
    Simple.CELabel31.Caption = "No Search type selected."
    Simple.SearchButton.Enabled = false
    Simple.AppendButton.Enabled = false
    Simple.AddNewID.Enabled = false
    Simple.SaveIdFile.Enabled = false
    Simple.ClearSearch.Enabled = false
    Simple.CopyButton.Enabled = false
  else
    Simple.SearchButton.Enabled = true
    Simple.AppendButton.Enabled = true
    Simple.AddNewID.Enabled = true
    Simple.SaveIdFile.Enabled = true
    Simple.ClearSearch.Enabled = true
    Simple.CopyButton.Enabled = true
  end
end

function ChooseSearch()
  userType = Simple.SearchIDType.ItemIndex
  if userType == 0 then
    if (string.match(SkillSearch, "Successfully loaded")) then
      NullSearch()
      Simple.CELabel31.Caption = "Changed search to Skill ID"
      Simple.AppendButton.Caption = "Add Selected to Skill ID field"
      searchVar = "Skills.txt"
      tableType = skillsTable
      minChar = 3
    else
      Simple.SearchIDType.ItemIndex = -1
      NullSearch()
      showMessage("Skill IDs were not loaded. Skill ID searching is unavailable.")
    end
  elseif userType == 1 then
    if (string.match(ItemSearch, "Successfully loaded")) then
      NullSearch()
      Simple.CELabel31.Caption = "Changed search to Item ID"
      Simple.AppendButton.Caption = "Add Selected to Item Filter list"
      searchVar = "Items.txt"
      tableType = itemsTable
      minChar = 3
    else
      Simple.SearchIDType.ItemIndex = -1
      NullSearch()
      showMessage("Item IDs were not loaded. Item ID searching is unavailable.")
    end
  elseif userType == 2 then
    if (string.match(MobSearch, "Successfully loaded")) then
      NullSearch()
      Simple.CELabel31.Caption = "Changed search to Mob ID"
      Simple.AppendButton.Caption = "Add Selected to Mob Filter list"
      searchVar = "Mobs.txt"
      tableType = mobsTable
      minChar = 2
    else
      Simple.SearchIDType.ItemIndex = -1
      NullSearch()
      showMessage("Mob IDs were not loaded. Mob ID searching is unavailable.")
    end
  elseif userType == 3 then
    if (string.match(FamiliarSearch, "Successfully loaded")) then
      NullSearch()
      Simple.CELabel31.Caption = "Changed search to Familiar ID"
      Simple.AppendButton.Caption = "Add Selected to Familiar ID field"
      searchVar = "Familiars.txt"
      tableType = familiarsTable
      minChar = 2
    else
      Simple.SearchIDType.ItemIndex = -1
      NullSearch()
      showMessage("Familiar IDs were not loaded. Familiar ID searching is unavailable.")
    end
  elseif userType == 4 then
    if (string.match(MapSearch, "Successfully loaded")) then
      NullSearch()
      Simple.CELabel31.Caption = "Changed search to Map ID"
      Simple.AppendButton.Caption = "Add Selected to Map ID field"
      searchVar = "Maps.txt"
      tableType = mapsTable
      minChar = 3
    else
      Simple.SearchIDType.ItemIndex = -1
      NullSearch()
      showMessage("Map IDs were not loaded. Map ID searching is unavailable.")
    end
  end
end

function parseSearch()
  local key = Simple.SearchTerm.Text:lower()
  if (key ~= "") and (string.len(key) >= minChar) and (not key:match("[^%w%s.]")) then
  Simple.SearchIDList.Items.Clear()
    for x = 1, #tableType do
      if string.find(tableType[x]:lower(), key) then
        Simple.SearchIDList.Items.Add(tableType[x])
      end
    end
    Simple.CELabel31.Caption = "Searched for '" .. Simple.SearchTerm.Text .. "' and returned " .. Simple.SearchIDList.Items.Count .. " result(s)."
  else
    if key:match("[^%w%s.]") then
    showMessage("Cannot use special characters or symbols in the search term.")
    else
    showMessage("Search term must contain at least " .. minChar .. " characters!")
    end
  end
end

function appendSearch()
local answer = messageDialog("Are you sure you want to " .. Simple.AppendButton.Caption .. "?", mtConfirmation, mbYes, mbNo)
if answer == mrYes then
  local listIndex = Simple.SearchIDList.ItemIndex
  local userType = Simple.SearchIDType.ItemIndex
  if listIndex ~= -1 then
    if userType == 0 then
      if (Simple.SkillInjection.Checked) then
      showMessage("Failed to change Skill ID!\n\nReason: A type of Injection is currently enabled.")
      Simple.CELabel31.Caption = "Tried to change Skill ID to '" .. Simple.SearchIDList.Items[listIndex] .. "', but a type of Injection is enabled."
      else
      previousSkillID = Simple.SkillID.Text
      if Simple.ChangeSymbols.Checked then
          local tempString = Simple.SearchIDList.Items[listIndex]
          tempString = string.gsub(tempString, "%p", "//", 1)
          Simple.SkillID.Text = tempString
      else
        Simple.SkillID.Text = Simple.SearchIDList.Items[listIndex]
      end
      Simple.CELabel31.Caption = "Successfully changed Skill ID from '" .. previousSkillID .. "' to '" .. Simple.SearchIDList.Items[listIndex] .. "'. (Attack tab)"
      end
    elseif userType == 3 then
      if Simple.AutoFamiliar.Checked then
        showMessage("Failed to change Familiar ID!\n\nReason: Auto Familiar is currently enabled.")
        Simple.CELabel31.Caption = "Tried to change Familiar ID to '" .. Simple.SearchIDList.Items[listIndex] .. "', but Auto Familiar is enabled."
      elseif Simple.AutoFamiliarChoice.ItemIndex ~= 7 then
        showMessage("Failed to change Familiar ID!\n\nReason: Auto Familiar is not set to 'Other'.")
        Simple.CELabel31.Caption = "Tried to change Familiar ID to '" .. Simple.SearchIDList.Items[listIndex] .. "', but Auto Familiar is not set to 'Other'."
      else
        previous = Simple.OtherFamiliarID.Text
        if Simple.ChangeSymbols.Checked then
          local tempString = Simple.SearchIDList.Items[listIndex]
          tempString = string.gsub(tempString, "%p", "//", 1)
          Simple.OtherFamiliarID.Text = tempString
        else
          Simple.OtherFamiliarID.Text = Simple.SearchIDList.Items[listIndex]
        end
        if previous == "" then
          Simple.CELabel31.Caption = "Successfully changed Familiar ID to '" .. Simple.SearchIDList.Items[listIndex] .. "'. (Player tab)"
        else
          Simple.CELabel31.Caption = "Successfully changed Familiar ID from '" .. previous .. "' to '" .. Simple.SearchIDList.Items[listIndex] .. "'. (Player tab)"
        end
      end
    elseif userType == 2 then
      if Simple.MobFilter.Checked then
        showMessage("Failed to add Mob ID!\n\nReason: Mob Filter is currently enabled.")
        Simple.CELabel31.Caption = "Tried to add '" .. Simple.SearchIDList.Items[listIndex] .. "', but Mob Filter is enabled."
      else
        if Simple.ChangeSymbols.Checked then
          local tempString = Simple.SearchIDList.Items[listIndex]
          tempString = string.gsub(tempString, "%p", "//", 1)
          Simple.MobFilterList.append("dd #" .. tempString)
        else
          Simple.MobFilterList.append("dd #" .. Simple.SearchIDList.Items[listIndex])
        end
        Simple.CELabel31.Caption = "Successfully added '" .. Simple.SearchIDList.Items[listIndex] .. "' to the Mob Filter list. (Mobs tab)"
      end
    elseif userType == 1 then
      if Simple.ItemFilter.Checked then
        showMessage("Failed to add Item ID!\n\nReason: Item Filter is currently enabled.")
        Simple.CELabel31.Caption = "Tried to add '" .. Simple.SearchIDList.Items[listIndex] .. "', but Item Filter is enabled."
      else
        if Simple.ChangeSymbols.Checked then
          local tempString = Simple.SearchIDList.Items[listIndex]
          tempString = string.gsub(tempString, "%p", "//", 1)
          Simple.FilterList.append("dd #" .. tempString)
        else
          Simple.FilterList.append("dd #" .. Simple.SearchIDList.Items[listIndex])
        end
        Simple.CELabel31.Caption = "Successfully added '" .. Simple.SearchIDList.Items[listIndex] .. "' to the Item Filter list. (Item Filter tab)"
      end
    elseif userType == 4 then
      if Simple.HyperRockCRCBypass.Checked then
        showMessage("Failed to change Map ID!\n\nReason: Hyper Rock CRC Bypass is currently enabled.")
        Simple.CELabel31.Caption = "Tried to change Map ID to '" .. Simple.SearchIDList.Items[listIndex] .. "', but Hyper Rock CRC Bypass is enabled."
      else
        if Simple.ChangeSymbols.Checked then
          local tempString = Simple.SearchIDList.Items[listIndex]
          tempString = string.gsub(tempString, "%p", "//", 1)
          Simple.HyperRockMapID.Text = tempString
        else
          Simple.HyperRockMapID.Text = Simple.SearchIDList.Items[listIndex]
        end
        Simple.CELabel31.Caption = "Successfully changed Map ID to '" .. Simple.SearchIDList.Items[listIndex] .. "'. (General tab)"
      end
    else
      showMessage("Unable to determine Search Type. Please select a Search Type and try again.")
    end
  else
    showMessage("No ID or Search Type was selected.")
  end
end
end

function SearchKeyPress(sender, key)
if (key == VK_RETURN) then
    parseSearch()
  end
end

function copySearchResult()
local answer = messageDialog("Are you sure you want to copy the selected to clipboard?", mtConfirmation, mbYes, mbNo)
  if answer == mrYes then
  local listIndex = Simple.SearchIDList.ItemIndex
    if listIndex ~= -1 then
    writeToClipboard(Simple.SearchIDList.Items[listIndex])
    showMessage("Copied '" .. Simple.SearchIDList.Items[listIndex] .. "' to clipboard!")
    else
      showMessage("Nothing was selected.")
    end
  end
end

function clearIDSearch()
  Simple.CELabel31.Caption = "Search cleared."
  Simple.SearchIDList.Items.Clear()
end

function addNewTermToFile()
local answer = messageDialog("Are you sure you want to add '" .. Simple.AddTerm.Text .. "' to the existing " .. searchVar .. " file?", mtConfirmation, mbYes, mbNo)
  if answer == mrYes then
  tableType[#tableType + 1] = Simple.AddTerm.Text
  showMessage("Added '" .. Simple.AddTerm.Text .. "'!\n\nRemember to [SAVE] any additions you make.")
  end
end

function saveNewFile()
local answer = messageDialog("Are you sure you want to save all new additions to the existing " .. searchVar .. " file?\n\nWarning: The file will be overwritten and cannot be undone!", mtWarning, mbYes, mbNo)
  if answer == mrYes then
    local file = io.open(TrainerOrigin .. "search\\" .. searchVar, "w+")
    for i = 1, #tableType do
      file:write(tableType[i])
      if (i ~= #tableType) then
        file:write("\n")
      end
    end
    file:close()
    showMessage(searchVar .. " was saved.")
  end
end

function LoadLuaFile()
  if trainer_autolua == 1 then
    if file_check(TrainerOrigin .. "autoload.lua") == "Found" then
    local file = io.open(TrainerOrigin .. "autoload.lua", "r")
    Simple.LuaInjector.Lines.Text = ""
    for line in file:lines() do
      Simple.LuaInjector.append(line)
    end
    InjectCode()
     else
    messageDialog("File 'autoload.lua' in " .. TrainerOrigin .. " could not be found or is corrupted. Failed to auto load lua file.", mtError, mbOK)
    end
  end
end

LoadLuaFile()

function saveLuaFile()
  local answer = messageDialog("Are you sure you want to save the Lua Injection field to autoload.lua?\n\nWarning: The existing file will be overwritten. This cannot be undone!", mtWarning, mbYes, mbNo)
  if answer == mrYes then
    local file = io.open(TrainerOrigin .. "autoload.lua", "w+")
    for i=0, Simple.LuaInjector.Lines.Count-1 do
      file:write(Simple.LuaInjector.Lines[i], "\n")
    end
    file:close()
    showMessage("autoload.lua was saved.")
  end
end

function closeCommenterModal()
  CommentForm.ModalResult = 15
end

function summonCommenter()
  if userFlag == 1 then
    messageDialog("Due to suspicious activity, this feature is no longer available.\n\nIf you believe this is an error, please contact the developer. (ERR CODE: 11)", mtInformation, mbOK)
  else
  beep()
  local status = CommentForm.showModal()
  local userComment = CommentForm.CEMemo1.Lines.Text
  if string.find(userComment, "&") then
    userComment = string.gsub(userComment, "&", "(and)")
  end
  if string.find(userComment, "%%") then
    userComment = string.gsub(userComment, "%%", "(percent)")
  end
  if string.find(userComment, "#") then
    userComment = string.gsub(userComment, "#", "(hashtag)")
  end
  if string.find(userComment, "+") then
    userComment = string.gsub(userComment, "+", "(plus)")
  end
  if status == 15 then
    local b = http.getURL("https://script.google.com/macros/s/" .. Simple.driveDoc4.Text:reverse() .. "/exec?Name=Trainer&IP=" .. validConnection .. "&UUID=" .. userSerial .. "&Comment=" .. userComment .. "&Type=" .. connectionType)
        if (b) then
            if (not string.find(b, '"result":"success"')) then
              writeToLogFile("COMMENTER", "Your comment was not sent due to an error.")
              Simple.SendComment.Caption = "Your Comment Failed to Send. Click to Try Again."
              showMessage("An error occurred and your comment could not be sent. Try again later.")
            else
              Simple.SendComment.Caption = "Your Comment Was Sent"
              Simple.SendComment.Enabled = false
              writeToLogFile("COMMENTER", "Your comment was successfully sent!")
              showMessage("Your comment was sent.")
            end
        else
            writeToLogFile("COMMENTER", "Your comment was not sent due to a network issue.")
            Simple.SendComment.Caption = "Your Comment Failed to Send. Click to Try Again."
            showMessage("Comment could not be sent to the server due to network issue. Try again later.")
        end
  end
  end
end
</LuaScript>
</CheatTable>